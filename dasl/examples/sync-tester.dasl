//a correct synchronous collision avoidance protocol
MOC_SYNC;

CONST OUTSIDE = 0;
CONST TRYING = 1; 
CONST INSIDE = 2;

NODE node(id)
{
  GLOBAL _Bool lock[#N];
  GLOBAL _Bool heartbeat;
  LOCAL unsigned char state;

  void ROUND()
  {
    PRIVATE
    {
      heartbeat = 0;
      FORALL_NODE(idp)
      {
        lock[idp] = idp;
      }
    }
    
    FORALL_OTHER(idp)
    {
      lock[idp] = 0;
    }
    
    FORALL_OTHER_LOWER(idp)
    {
      lock[idp] = 1;
    }
    
    FORALL_OTHER_HIGHER(idp)
    {
      lock[idp] = 2;
    }
    
    FORALL_DISTINCT_NODE_PAIR (id1, id2)
    {
      ASSUME(lock[id1] != INSIDE || lock[id2] != INSIDE);
    }
  }
}

//PROGRAM = node(0) || node(1);
PROGRAM = node(0) || node(1) || node(2) || node(3);

void INIT()
{
  FORALL_NODE(id) {
    ND(state.id); ND(lock[id]);
    ASSUME(state.id == OUTSIDE && 
      lock[id] == 0 || 
      state.id == INSIDE && 
      lock[id] == 1);
  }
  FORALL_DISTINCT_NODE_PAIR
    (id1,id2) {
    ASSUME(state.id1 != INSIDE || 
           state.id2 != INSIDE);
  }
}

void SAFETY()
{
  FORALL_DISTINCT_NODE_PAIR
    (id1,id2) {
    ASSERT(state.id1 != INSIDE || 
           state.id2 != INSIDE);
  }
}
