target WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

const INITS = 0;
const MOVE = 4;
const NEXT = 1;
const REQUEST = 2;
const WAITING = 3;

extern int my_sleep(int seconds);
extern void print_int(int i);
extern void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);

node uav
{
  //shared variables -- visible across nodes. 
  global _Bool lock [X][Y] = {
    int i = 0,j = 0;
    for(i = 0;i < X;i=i+1) {
      for(i = 0;i < X;i=i+1) {
        lock[i][j] = i * j;
      }
    }
  };

  local int dummy1;

  record dummyrec1 {
    local int dummy2, dummy3 = 0;
  } = {
    int t1 = 0, t2;
    dummy2 = t1 * t2 - 1;
  }

  local unsigned char input dummy4, input dummy5 ~ (0 < dummy5 && dummy5 < 10);

  record dummyrec2 {
    local char input dummy6 ~ (20 < dummy6 && dummy6 < dummy5 + 30), input dummy7 ~ {
      if (dummy7 < dummy6) return 0;
      else if (dummy7 > dummy5 + dummy2) return 0;
      return 1;
    };
    local unsigned char dummy8, dummy9 = 10, input dummy10;
  } = {
    dummy8 = dummy6 + dummy9;
  } ~ {
    if (dummy10 < dummy6) return 0;
    else if (dummy10 > dummy5 + dummy2) return 0;
    return 1;
  }

  record dummyrec3 {
    global int input dummy20, dummy21;
  } = {
    dummy21 = 21;
  }

  record dummyrec4 {
    local int input dummy30, dummy31;
  } ~ {
    return dummy30 == 30;
  }

  record dummyrec5 {
    global int input dummy40, dummy41;
  }
  
  //private variables -- local to the node.
  //preserved across rounds
  local unsigned char state = INITS; //the state
  local unsigned char input x, input y; //current coordinates
  local unsigned char xp = x, yp = y; //next coordinates
  local unsigned char input xf, input yf; //final coordinates

  //-- saves the next waypoint in (xp,yp)
  void NEXT_XY () {
    xp = x; yp = y;
    if(x < xf) xp = x + 1;
    else if(x > xf) xp = x - 1;
    else if(y < yf) yp = y + 1;
    else yp = y - 1;
  }

  role Protector
  {
    local int dummy = 0;
    thread COLLISION_AVOIDANCE;

    override void NEXT_XY () {
      int x = 0, y;
      x = NEXT_XY();
      x = uav::NEXT_XY();
      x = NEXT_XY()@id;
      x = uav::NEXT_XY()@id;
      x = NEXT_XY()@(x+y-1+2);
      x = uav::NEXT_XY()@(x+1);
      
      NEXT_XY();
      uav::NEXT_XY();
      NEXT_XY()@id;
      uav::NEXT_XY()@id;
      NEXT_XY()@(x+1);
      uav::NEXT_XY()@(x+1);

      x = NEXT_XY()@x+1;
      x = uav::NEXT_XY()@x+1;
    }
  }

  role Leader id 0
  {
    local double dummy = 0.42;
    thread COLLISION_AVOIDANCE;
  }
}

node uav
{
  @Period(100000);
  @BarrierSync;
  @PlatformController;
  thread COLLISION_AVOIDANCE {
    print_state(X,Y,id,x,y,xf,yf);
    //my_sleep(1);
    @IF_INIT;
    if (state == INITS) {
      lock[x][y] = 1;
      state = NEXT;
    }
    @IF_NEXT;
    if (state == NEXT) {
      //compute next point on route
      if(x == xf && y == yf) return;
      NEXT_XY();
      state = REQUEST;
    } else
    @IF_REQUEST;
    if (state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp]@idp != 0)) return;
      lock[xp][yp] = 1;
      state = WAITING;
    } else
    @IF_WAITING;
    if (state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp]@idp != 0)) return;
      state = MOVE;
    } else
    @IF_MOVE;
    if (state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,1)) return;
      lock[x][y] = 0; 
      x = xp; y = yp;
      state = NEXT;
    }
  }

  @InitSim;
  void StartingPosition ()
  {
    GRID_INIT();
    GRID_PLACE(x, y, 1);
  }

  //initial state
  @INIT;
  void NodeInit () 
  {
    FORALL_NODE(cid) {
      state@cid = INITS;
      ND(x@cid); ND(y@cid);
      ASSUME(0 <= x@cid && x@cid < X && 0 <= y@cid && y@cid < Y);
      ND(xf@cid); ND(yf@cid);
      ASSUME(0 <= xf@cid && xf@cid < X && 0 <= yf@cid && yf@cid < Y);
    }
    
    FORALL_DISTINCT_NODE_PAIR (id1,id2) {
      ASSUME(x@id1 != x@id2 || y@id1 != y@id2);
    }
  }

  //the safety property checked at the beginning of each round
  @SAFETY;
  pure bool NoCollisions ()
  {
    FORALL_DISTINCT_NODE_PAIR (id1,id2) {
      if(x@id1 == x@id2 && y@id1 == y@id2) return false;
    }
    return true;
  }

  //-- guaranteed properties
  require NoCollision1 => NoCollisions;

  //-- best-effort properties
  expect AtEndProtect1 : at_end => NoCollisions;
  expect AtEndProtect2 : at_end => NoCollisions;  
  expect AtLeastProtect1 : at_least 0.9 => NoCollisions;

  require NoCollision3 => NoCollisions;
}

node uav {
  expect AtEndProtect3 : at_end => NoCollisions;  
  expect AtLeastProtect2 : at_least 0.42 => NoCollisions;
  require NoCollision2 => NoCollisions;
}
