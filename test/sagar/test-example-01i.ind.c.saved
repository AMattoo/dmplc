//-- DMPLC Version: 0.2
//-- DMPLC Command Line: dmplc --cube-grid 10 --roles uav:Uav:2 -r 0 -sip -rp NoCollision -o test-example-01i.ind.c test-example-01i.dmpl

/************************ external functions **********************/

/**************************** constants ***************************/
#define MOVE 4
#define NEXT 1
#define REQUEST 2
#define WAITING 3
#define X 10
#define Y 10
#define Z 10
#define false 0
#define true 1

/************************ global variables ************************/
_Bool lock_f[2][10][10];
_Bool lock_i[2][10][10];
unsigned char nodeId;
unsigned char nodeIds[2];
unsigned char state[2];
unsigned char x[2];
unsigned char xf[2];
unsigned char xp[2];
unsigned char y[2];
unsigned char yf[2];
unsigned char yp[2];

/********************** function declarations *********************/
void __ASSUME();
void __HAVOC();
void __INIT();
void __INIT_lock_0();
void __INIT_lock_1();
void __INIT_state_0();
void __INIT_state_1();
int __INIT_x_0();
int __INIT_x_1();
int __INIT_xf_0();
int __INIT_xf_1();
void __INIT_xp_0();
void __INIT_xp_1();
int __INIT_y_0();
int __INIT_y_1();
int __INIT_yf_0();
int __INIT_yf_1();
void __INIT_yp_0();
void __INIT_yp_1();
_Bool __SAFETY_NoCollision_bwd();
_Bool __SAFETY_NoCollision_fwd();
void __SAFETY_bwd();
void __SAFETY_fwd();
unsigned char __id_0(unsigned char x);
unsigned char __id_1(unsigned char x);
int main();
extern int my_sleep(int seconds);
_Bool nondet_lock_i();
unsigned char nondet_nodeIds();
unsigned char nondet_state();
unsigned char nondet_x();
unsigned char nondet_xf();
unsigned char nondet_xp();
unsigned char nondet_y();
unsigned char nondet_yf();
unsigned char nondet_yp();
extern void print_int(int i);
extern void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);
void round_bwd_copier();
void round_fwd_copier();
void uav__COLLISION_AVOIDANCE_0_fwd();
void uav__COLLISION_AVOIDANCE_1_fwd();
void uav__NEXT_XY_0_fwd();
void uav__NEXT_XY_1_fwd();

/********************** function definitions **********************/
void __ASSUME()
{
  __CPROVER_assume(__SAFETY_NoCollision_fwd());
}

void __HAVOC()
{
  state[0] = nondet_state();
  state[1] = nondet_state();
  x[0] = nondet_x();
  x[1] = nondet_x();
  y[0] = nondet_y();
  y[1] = nondet_y();
  xp[0] = nondet_xp();
  xp[1] = nondet_xp();
  yp[0] = nondet_yp();
  yp[1] = nondet_yp();
  xf[0] = nondet_xf();
  xf[1] = nondet_xf();
  yf[0] = nondet_yf();
  yf[1] = nondet_yf();
  lock_i[0][0][0] = nondet_lock_i();
  lock_i[0][0][1] = nondet_lock_i();
  lock_i[0][0][2] = nondet_lock_i();
  lock_i[0][0][3] = nondet_lock_i();
  lock_i[0][0][4] = nondet_lock_i();
  lock_i[0][0][5] = nondet_lock_i();
  lock_i[0][0][6] = nondet_lock_i();
  lock_i[0][0][7] = nondet_lock_i();
  lock_i[0][0][8] = nondet_lock_i();
  lock_i[0][0][9] = nondet_lock_i();
  lock_i[0][1][0] = nondet_lock_i();
  lock_i[0][1][1] = nondet_lock_i();
  lock_i[0][1][2] = nondet_lock_i();
  lock_i[0][1][3] = nondet_lock_i();
  lock_i[0][1][4] = nondet_lock_i();
  lock_i[0][1][5] = nondet_lock_i();
  lock_i[0][1][6] = nondet_lock_i();
  lock_i[0][1][7] = nondet_lock_i();
  lock_i[0][1][8] = nondet_lock_i();
  lock_i[0][1][9] = nondet_lock_i();
  lock_i[0][2][0] = nondet_lock_i();
  lock_i[0][2][1] = nondet_lock_i();
  lock_i[0][2][2] = nondet_lock_i();
  lock_i[0][2][3] = nondet_lock_i();
  lock_i[0][2][4] = nondet_lock_i();
  lock_i[0][2][5] = nondet_lock_i();
  lock_i[0][2][6] = nondet_lock_i();
  lock_i[0][2][7] = nondet_lock_i();
  lock_i[0][2][8] = nondet_lock_i();
  lock_i[0][2][9] = nondet_lock_i();
  lock_i[0][3][0] = nondet_lock_i();
  lock_i[0][3][1] = nondet_lock_i();
  lock_i[0][3][2] = nondet_lock_i();
  lock_i[0][3][3] = nondet_lock_i();
  lock_i[0][3][4] = nondet_lock_i();
  lock_i[0][3][5] = nondet_lock_i();
  lock_i[0][3][6] = nondet_lock_i();
  lock_i[0][3][7] = nondet_lock_i();
  lock_i[0][3][8] = nondet_lock_i();
  lock_i[0][3][9] = nondet_lock_i();
  lock_i[0][4][0] = nondet_lock_i();
  lock_i[0][4][1] = nondet_lock_i();
  lock_i[0][4][2] = nondet_lock_i();
  lock_i[0][4][3] = nondet_lock_i();
  lock_i[0][4][4] = nondet_lock_i();
  lock_i[0][4][5] = nondet_lock_i();
  lock_i[0][4][6] = nondet_lock_i();
  lock_i[0][4][7] = nondet_lock_i();
  lock_i[0][4][8] = nondet_lock_i();
  lock_i[0][4][9] = nondet_lock_i();
  lock_i[0][5][0] = nondet_lock_i();
  lock_i[0][5][1] = nondet_lock_i();
  lock_i[0][5][2] = nondet_lock_i();
  lock_i[0][5][3] = nondet_lock_i();
  lock_i[0][5][4] = nondet_lock_i();
  lock_i[0][5][5] = nondet_lock_i();
  lock_i[0][5][6] = nondet_lock_i();
  lock_i[0][5][7] = nondet_lock_i();
  lock_i[0][5][8] = nondet_lock_i();
  lock_i[0][5][9] = nondet_lock_i();
  lock_i[0][6][0] = nondet_lock_i();
  lock_i[0][6][1] = nondet_lock_i();
  lock_i[0][6][2] = nondet_lock_i();
  lock_i[0][6][3] = nondet_lock_i();
  lock_i[0][6][4] = nondet_lock_i();
  lock_i[0][6][5] = nondet_lock_i();
  lock_i[0][6][6] = nondet_lock_i();
  lock_i[0][6][7] = nondet_lock_i();
  lock_i[0][6][8] = nondet_lock_i();
  lock_i[0][6][9] = nondet_lock_i();
  lock_i[0][7][0] = nondet_lock_i();
  lock_i[0][7][1] = nondet_lock_i();
  lock_i[0][7][2] = nondet_lock_i();
  lock_i[0][7][3] = nondet_lock_i();
  lock_i[0][7][4] = nondet_lock_i();
  lock_i[0][7][5] = nondet_lock_i();
  lock_i[0][7][6] = nondet_lock_i();
  lock_i[0][7][7] = nondet_lock_i();
  lock_i[0][7][8] = nondet_lock_i();
  lock_i[0][7][9] = nondet_lock_i();
  lock_i[0][8][0] = nondet_lock_i();
  lock_i[0][8][1] = nondet_lock_i();
  lock_i[0][8][2] = nondet_lock_i();
  lock_i[0][8][3] = nondet_lock_i();
  lock_i[0][8][4] = nondet_lock_i();
  lock_i[0][8][5] = nondet_lock_i();
  lock_i[0][8][6] = nondet_lock_i();
  lock_i[0][8][7] = nondet_lock_i();
  lock_i[0][8][8] = nondet_lock_i();
  lock_i[0][8][9] = nondet_lock_i();
  lock_i[0][9][0] = nondet_lock_i();
  lock_i[0][9][1] = nondet_lock_i();
  lock_i[0][9][2] = nondet_lock_i();
  lock_i[0][9][3] = nondet_lock_i();
  lock_i[0][9][4] = nondet_lock_i();
  lock_i[0][9][5] = nondet_lock_i();
  lock_i[0][9][6] = nondet_lock_i();
  lock_i[0][9][7] = nondet_lock_i();
  lock_i[0][9][8] = nondet_lock_i();
  lock_i[0][9][9] = nondet_lock_i();
  lock_i[1][0][0] = nondet_lock_i();
  lock_i[1][0][1] = nondet_lock_i();
  lock_i[1][0][2] = nondet_lock_i();
  lock_i[1][0][3] = nondet_lock_i();
  lock_i[1][0][4] = nondet_lock_i();
  lock_i[1][0][5] = nondet_lock_i();
  lock_i[1][0][6] = nondet_lock_i();
  lock_i[1][0][7] = nondet_lock_i();
  lock_i[1][0][8] = nondet_lock_i();
  lock_i[1][0][9] = nondet_lock_i();
  lock_i[1][1][0] = nondet_lock_i();
  lock_i[1][1][1] = nondet_lock_i();
  lock_i[1][1][2] = nondet_lock_i();
  lock_i[1][1][3] = nondet_lock_i();
  lock_i[1][1][4] = nondet_lock_i();
  lock_i[1][1][5] = nondet_lock_i();
  lock_i[1][1][6] = nondet_lock_i();
  lock_i[1][1][7] = nondet_lock_i();
  lock_i[1][1][8] = nondet_lock_i();
  lock_i[1][1][9] = nondet_lock_i();
  lock_i[1][2][0] = nondet_lock_i();
  lock_i[1][2][1] = nondet_lock_i();
  lock_i[1][2][2] = nondet_lock_i();
  lock_i[1][2][3] = nondet_lock_i();
  lock_i[1][2][4] = nondet_lock_i();
  lock_i[1][2][5] = nondet_lock_i();
  lock_i[1][2][6] = nondet_lock_i();
  lock_i[1][2][7] = nondet_lock_i();
  lock_i[1][2][8] = nondet_lock_i();
  lock_i[1][2][9] = nondet_lock_i();
  lock_i[1][3][0] = nondet_lock_i();
  lock_i[1][3][1] = nondet_lock_i();
  lock_i[1][3][2] = nondet_lock_i();
  lock_i[1][3][3] = nondet_lock_i();
  lock_i[1][3][4] = nondet_lock_i();
  lock_i[1][3][5] = nondet_lock_i();
  lock_i[1][3][6] = nondet_lock_i();
  lock_i[1][3][7] = nondet_lock_i();
  lock_i[1][3][8] = nondet_lock_i();
  lock_i[1][3][9] = nondet_lock_i();
  lock_i[1][4][0] = nondet_lock_i();
  lock_i[1][4][1] = nondet_lock_i();
  lock_i[1][4][2] = nondet_lock_i();
  lock_i[1][4][3] = nondet_lock_i();
  lock_i[1][4][4] = nondet_lock_i();
  lock_i[1][4][5] = nondet_lock_i();
  lock_i[1][4][6] = nondet_lock_i();
  lock_i[1][4][7] = nondet_lock_i();
  lock_i[1][4][8] = nondet_lock_i();
  lock_i[1][4][9] = nondet_lock_i();
  lock_i[1][5][0] = nondet_lock_i();
  lock_i[1][5][1] = nondet_lock_i();
  lock_i[1][5][2] = nondet_lock_i();
  lock_i[1][5][3] = nondet_lock_i();
  lock_i[1][5][4] = nondet_lock_i();
  lock_i[1][5][5] = nondet_lock_i();
  lock_i[1][5][6] = nondet_lock_i();
  lock_i[1][5][7] = nondet_lock_i();
  lock_i[1][5][8] = nondet_lock_i();
  lock_i[1][5][9] = nondet_lock_i();
  lock_i[1][6][0] = nondet_lock_i();
  lock_i[1][6][1] = nondet_lock_i();
  lock_i[1][6][2] = nondet_lock_i();
  lock_i[1][6][3] = nondet_lock_i();
  lock_i[1][6][4] = nondet_lock_i();
  lock_i[1][6][5] = nondet_lock_i();
  lock_i[1][6][6] = nondet_lock_i();
  lock_i[1][6][7] = nondet_lock_i();
  lock_i[1][6][8] = nondet_lock_i();
  lock_i[1][6][9] = nondet_lock_i();
  lock_i[1][7][0] = nondet_lock_i();
  lock_i[1][7][1] = nondet_lock_i();
  lock_i[1][7][2] = nondet_lock_i();
  lock_i[1][7][3] = nondet_lock_i();
  lock_i[1][7][4] = nondet_lock_i();
  lock_i[1][7][5] = nondet_lock_i();
  lock_i[1][7][6] = nondet_lock_i();
  lock_i[1][7][7] = nondet_lock_i();
  lock_i[1][7][8] = nondet_lock_i();
  lock_i[1][7][9] = nondet_lock_i();
  lock_i[1][8][0] = nondet_lock_i();
  lock_i[1][8][1] = nondet_lock_i();
  lock_i[1][8][2] = nondet_lock_i();
  lock_i[1][8][3] = nondet_lock_i();
  lock_i[1][8][4] = nondet_lock_i();
  lock_i[1][8][5] = nondet_lock_i();
  lock_i[1][8][6] = nondet_lock_i();
  lock_i[1][8][7] = nondet_lock_i();
  lock_i[1][8][8] = nondet_lock_i();
  lock_i[1][8][9] = nondet_lock_i();
  lock_i[1][9][0] = nondet_lock_i();
  lock_i[1][9][1] = nondet_lock_i();
  lock_i[1][9][2] = nondet_lock_i();
  lock_i[1][9][3] = nondet_lock_i();
  lock_i[1][9][4] = nondet_lock_i();
  lock_i[1][9][5] = nondet_lock_i();
  lock_i[1][9][6] = nondet_lock_i();
  lock_i[1][9][7] = nondet_lock_i();
  lock_i[1][9][8] = nondet_lock_i();
  lock_i[1][9][9] = nondet_lock_i();
  state[0] = nondet_state();
  state[1] = nondet_state();
  x[0] = nondet_x();
  x[1] = nondet_x();
  y[0] = nondet_y();
  y[1] = nondet_y();
  xp[0] = nondet_xp();
  xp[1] = nondet_xp();
  yp[0] = nondet_yp();
  yp[1] = nondet_yp();
  xf[0] = nondet_xf();
  xf[1] = nondet_xf();
  yf[0] = nondet_yf();
  yf[1] = nondet_yf();
  lock_i[0][0][0] = nondet_lock_i();
  lock_i[0][0][1] = nondet_lock_i();
  lock_i[0][0][2] = nondet_lock_i();
  lock_i[0][0][3] = nondet_lock_i();
  lock_i[0][0][4] = nondet_lock_i();
  lock_i[0][0][5] = nondet_lock_i();
  lock_i[0][0][6] = nondet_lock_i();
  lock_i[0][0][7] = nondet_lock_i();
  lock_i[0][0][8] = nondet_lock_i();
  lock_i[0][0][9] = nondet_lock_i();
  lock_i[0][1][0] = nondet_lock_i();
  lock_i[0][1][1] = nondet_lock_i();
  lock_i[0][1][2] = nondet_lock_i();
  lock_i[0][1][3] = nondet_lock_i();
  lock_i[0][1][4] = nondet_lock_i();
  lock_i[0][1][5] = nondet_lock_i();
  lock_i[0][1][6] = nondet_lock_i();
  lock_i[0][1][7] = nondet_lock_i();
  lock_i[0][1][8] = nondet_lock_i();
  lock_i[0][1][9] = nondet_lock_i();
  lock_i[0][2][0] = nondet_lock_i();
  lock_i[0][2][1] = nondet_lock_i();
  lock_i[0][2][2] = nondet_lock_i();
  lock_i[0][2][3] = nondet_lock_i();
  lock_i[0][2][4] = nondet_lock_i();
  lock_i[0][2][5] = nondet_lock_i();
  lock_i[0][2][6] = nondet_lock_i();
  lock_i[0][2][7] = nondet_lock_i();
  lock_i[0][2][8] = nondet_lock_i();
  lock_i[0][2][9] = nondet_lock_i();
  lock_i[0][3][0] = nondet_lock_i();
  lock_i[0][3][1] = nondet_lock_i();
  lock_i[0][3][2] = nondet_lock_i();
  lock_i[0][3][3] = nondet_lock_i();
  lock_i[0][3][4] = nondet_lock_i();
  lock_i[0][3][5] = nondet_lock_i();
  lock_i[0][3][6] = nondet_lock_i();
  lock_i[0][3][7] = nondet_lock_i();
  lock_i[0][3][8] = nondet_lock_i();
  lock_i[0][3][9] = nondet_lock_i();
  lock_i[0][4][0] = nondet_lock_i();
  lock_i[0][4][1] = nondet_lock_i();
  lock_i[0][4][2] = nondet_lock_i();
  lock_i[0][4][3] = nondet_lock_i();
  lock_i[0][4][4] = nondet_lock_i();
  lock_i[0][4][5] = nondet_lock_i();
  lock_i[0][4][6] = nondet_lock_i();
  lock_i[0][4][7] = nondet_lock_i();
  lock_i[0][4][8] = nondet_lock_i();
  lock_i[0][4][9] = nondet_lock_i();
  lock_i[0][5][0] = nondet_lock_i();
  lock_i[0][5][1] = nondet_lock_i();
  lock_i[0][5][2] = nondet_lock_i();
  lock_i[0][5][3] = nondet_lock_i();
  lock_i[0][5][4] = nondet_lock_i();
  lock_i[0][5][5] = nondet_lock_i();
  lock_i[0][5][6] = nondet_lock_i();
  lock_i[0][5][7] = nondet_lock_i();
  lock_i[0][5][8] = nondet_lock_i();
  lock_i[0][5][9] = nondet_lock_i();
  lock_i[0][6][0] = nondet_lock_i();
  lock_i[0][6][1] = nondet_lock_i();
  lock_i[0][6][2] = nondet_lock_i();
  lock_i[0][6][3] = nondet_lock_i();
  lock_i[0][6][4] = nondet_lock_i();
  lock_i[0][6][5] = nondet_lock_i();
  lock_i[0][6][6] = nondet_lock_i();
  lock_i[0][6][7] = nondet_lock_i();
  lock_i[0][6][8] = nondet_lock_i();
  lock_i[0][6][9] = nondet_lock_i();
  lock_i[0][7][0] = nondet_lock_i();
  lock_i[0][7][1] = nondet_lock_i();
  lock_i[0][7][2] = nondet_lock_i();
  lock_i[0][7][3] = nondet_lock_i();
  lock_i[0][7][4] = nondet_lock_i();
  lock_i[0][7][5] = nondet_lock_i();
  lock_i[0][7][6] = nondet_lock_i();
  lock_i[0][7][7] = nondet_lock_i();
  lock_i[0][7][8] = nondet_lock_i();
  lock_i[0][7][9] = nondet_lock_i();
  lock_i[0][8][0] = nondet_lock_i();
  lock_i[0][8][1] = nondet_lock_i();
  lock_i[0][8][2] = nondet_lock_i();
  lock_i[0][8][3] = nondet_lock_i();
  lock_i[0][8][4] = nondet_lock_i();
  lock_i[0][8][5] = nondet_lock_i();
  lock_i[0][8][6] = nondet_lock_i();
  lock_i[0][8][7] = nondet_lock_i();
  lock_i[0][8][8] = nondet_lock_i();
  lock_i[0][8][9] = nondet_lock_i();
  lock_i[0][9][0] = nondet_lock_i();
  lock_i[0][9][1] = nondet_lock_i();
  lock_i[0][9][2] = nondet_lock_i();
  lock_i[0][9][3] = nondet_lock_i();
  lock_i[0][9][4] = nondet_lock_i();
  lock_i[0][9][5] = nondet_lock_i();
  lock_i[0][9][6] = nondet_lock_i();
  lock_i[0][9][7] = nondet_lock_i();
  lock_i[0][9][8] = nondet_lock_i();
  lock_i[0][9][9] = nondet_lock_i();
  lock_i[1][0][0] = nondet_lock_i();
  lock_i[1][0][1] = nondet_lock_i();
  lock_i[1][0][2] = nondet_lock_i();
  lock_i[1][0][3] = nondet_lock_i();
  lock_i[1][0][4] = nondet_lock_i();
  lock_i[1][0][5] = nondet_lock_i();
  lock_i[1][0][6] = nondet_lock_i();
  lock_i[1][0][7] = nondet_lock_i();
  lock_i[1][0][8] = nondet_lock_i();
  lock_i[1][0][9] = nondet_lock_i();
  lock_i[1][1][0] = nondet_lock_i();
  lock_i[1][1][1] = nondet_lock_i();
  lock_i[1][1][2] = nondet_lock_i();
  lock_i[1][1][3] = nondet_lock_i();
  lock_i[1][1][4] = nondet_lock_i();
  lock_i[1][1][5] = nondet_lock_i();
  lock_i[1][1][6] = nondet_lock_i();
  lock_i[1][1][7] = nondet_lock_i();
  lock_i[1][1][8] = nondet_lock_i();
  lock_i[1][1][9] = nondet_lock_i();
  lock_i[1][2][0] = nondet_lock_i();
  lock_i[1][2][1] = nondet_lock_i();
  lock_i[1][2][2] = nondet_lock_i();
  lock_i[1][2][3] = nondet_lock_i();
  lock_i[1][2][4] = nondet_lock_i();
  lock_i[1][2][5] = nondet_lock_i();
  lock_i[1][2][6] = nondet_lock_i();
  lock_i[1][2][7] = nondet_lock_i();
  lock_i[1][2][8] = nondet_lock_i();
  lock_i[1][2][9] = nondet_lock_i();
  lock_i[1][3][0] = nondet_lock_i();
  lock_i[1][3][1] = nondet_lock_i();
  lock_i[1][3][2] = nondet_lock_i();
  lock_i[1][3][3] = nondet_lock_i();
  lock_i[1][3][4] = nondet_lock_i();
  lock_i[1][3][5] = nondet_lock_i();
  lock_i[1][3][6] = nondet_lock_i();
  lock_i[1][3][7] = nondet_lock_i();
  lock_i[1][3][8] = nondet_lock_i();
  lock_i[1][3][9] = nondet_lock_i();
  lock_i[1][4][0] = nondet_lock_i();
  lock_i[1][4][1] = nondet_lock_i();
  lock_i[1][4][2] = nondet_lock_i();
  lock_i[1][4][3] = nondet_lock_i();
  lock_i[1][4][4] = nondet_lock_i();
  lock_i[1][4][5] = nondet_lock_i();
  lock_i[1][4][6] = nondet_lock_i();
  lock_i[1][4][7] = nondet_lock_i();
  lock_i[1][4][8] = nondet_lock_i();
  lock_i[1][4][9] = nondet_lock_i();
  lock_i[1][5][0] = nondet_lock_i();
  lock_i[1][5][1] = nondet_lock_i();
  lock_i[1][5][2] = nondet_lock_i();
  lock_i[1][5][3] = nondet_lock_i();
  lock_i[1][5][4] = nondet_lock_i();
  lock_i[1][5][5] = nondet_lock_i();
  lock_i[1][5][6] = nondet_lock_i();
  lock_i[1][5][7] = nondet_lock_i();
  lock_i[1][5][8] = nondet_lock_i();
  lock_i[1][5][9] = nondet_lock_i();
  lock_i[1][6][0] = nondet_lock_i();
  lock_i[1][6][1] = nondet_lock_i();
  lock_i[1][6][2] = nondet_lock_i();
  lock_i[1][6][3] = nondet_lock_i();
  lock_i[1][6][4] = nondet_lock_i();
  lock_i[1][6][5] = nondet_lock_i();
  lock_i[1][6][6] = nondet_lock_i();
  lock_i[1][6][7] = nondet_lock_i();
  lock_i[1][6][8] = nondet_lock_i();
  lock_i[1][6][9] = nondet_lock_i();
  lock_i[1][7][0] = nondet_lock_i();
  lock_i[1][7][1] = nondet_lock_i();
  lock_i[1][7][2] = nondet_lock_i();
  lock_i[1][7][3] = nondet_lock_i();
  lock_i[1][7][4] = nondet_lock_i();
  lock_i[1][7][5] = nondet_lock_i();
  lock_i[1][7][6] = nondet_lock_i();
  lock_i[1][7][7] = nondet_lock_i();
  lock_i[1][7][8] = nondet_lock_i();
  lock_i[1][7][9] = nondet_lock_i();
  lock_i[1][8][0] = nondet_lock_i();
  lock_i[1][8][1] = nondet_lock_i();
  lock_i[1][8][2] = nondet_lock_i();
  lock_i[1][8][3] = nondet_lock_i();
  lock_i[1][8][4] = nondet_lock_i();
  lock_i[1][8][5] = nondet_lock_i();
  lock_i[1][8][6] = nondet_lock_i();
  lock_i[1][8][7] = nondet_lock_i();
  lock_i[1][8][8] = nondet_lock_i();
  lock_i[1][8][9] = nondet_lock_i();
  lock_i[1][9][0] = nondet_lock_i();
  lock_i[1][9][1] = nondet_lock_i();
  lock_i[1][9][2] = nondet_lock_i();
  lock_i[1][9][3] = nondet_lock_i();
  lock_i[1][9][4] = nondet_lock_i();
  lock_i[1][9][5] = nondet_lock_i();
  lock_i[1][9][6] = nondet_lock_i();
  lock_i[1][9][7] = nondet_lock_i();
  lock_i[1][9][8] = nondet_lock_i();
  lock_i[1][9][9] = nondet_lock_i();
}

void __INIT()
{
  __CPROVER_assume(__INIT_x_0());
  __CPROVER_assume(__INIT_y_0());
  __INIT_lock_0();
  __INIT_state_0();
  __CPROVER_assume(__INIT_xf_0());
  __INIT_xp_0();
  __CPROVER_assume(__INIT_yf_0());
  __INIT_yp_0();
  __CPROVER_assume(__INIT_x_1());
  __CPROVER_assume(__INIT_y_1());
  __INIT_lock_1();
  __INIT_state_1();
  __CPROVER_assume(__INIT_xf_1());
  __INIT_xp_1();
  __CPROVER_assume(__INIT_yf_1());
  __INIT_yp_1();
  __CPROVER_assume(__SAFETY_NoCollision_fwd());
}

void __INIT_lock_0()
{
  lock_i[__id_0(0)][x[__id_0(0)]][y[__id_0(0)]] = 1;
}

void __INIT_lock_1()
{
  lock_i[__id_1(1)][x[__id_1(1)]][y[__id_1(1)]] = 1;
}

void __INIT_state_0()
{
  state[__id_0(0)] = NEXT;
}

void __INIT_state_1()
{
  state[__id_1(1)] = NEXT;
}

int __INIT_x_0()
{
  x[__id_0(0)] = nondet_x();
  return ((0)<=(x[__id_0(0)]))&&((x[__id_0(0)])<(X));
}

int __INIT_x_1()
{
  x[__id_1(1)] = nondet_x();
  return ((0)<=(x[__id_1(1)]))&&((x[__id_1(1)])<(X));
}

int __INIT_xf_0()
{
  xf[__id_0(0)] = nondet_xf();
  return ((0)<=(xf[__id_0(0)]))&&((xf[__id_0(0)])<(X));
}

int __INIT_xf_1()
{
  xf[__id_1(1)] = nondet_xf();
  return ((0)<=(xf[__id_1(1)]))&&((xf[__id_1(1)])<(X));
}

void __INIT_xp_0()
{
  xp[__id_0(0)] = x[__id_0(0)];
}

void __INIT_xp_1()
{
  xp[__id_1(1)] = x[__id_1(1)];
}

int __INIT_y_0()
{
  y[__id_0(0)] = nondet_y();
  return ((0)<=(y[__id_0(0)]))&&((y[__id_0(0)])<(Y));
}

int __INIT_y_1()
{
  y[__id_1(1)] = nondet_y();
  return ((0)<=(y[__id_1(1)]))&&((y[__id_1(1)])<(Y));
}

int __INIT_yf_0()
{
  yf[__id_0(0)] = nondet_yf();
  return ((0)<=(yf[__id_0(0)]))&&((yf[__id_0(0)])<(Y));
}

int __INIT_yf_1()
{
  yf[__id_1(1)] = nondet_yf();
  return ((0)<=(yf[__id_1(1)]))&&((yf[__id_1(1)])<(Y));
}

void __INIT_yp_0()
{
  yp[__id_0(0)] = y[__id_0(0)];
}

void __INIT_yp_1()
{
  yp[__id_1(1)] = y[__id_1(1)];
}

_Bool __SAFETY_NoCollision_bwd()
{
  {
    {
      if (((x[__id_0(0)])==(x[__id_0(1)]))&&((y[__id_0(0)])==(y[__id_0(1)])))
        return false;
    }
  }
  {
    {
      if (!(((state[__id_0(0)])>=(NEXT))&&((state[__id_0(0)])<=(MOVE))))
        return false;
      if (!(((x[__id_0(0)])>=(0))&&((x[__id_0(0)])<(X))))
        return false;
      if (!(((y[__id_0(0)])>=(0))&&((y[__id_0(0)])<(Y))))
        return false;
      if (!(((xf[__id_0(0)])>=(0))&&((xf[__id_0(0)])<(X))))
        return false;
      if (!(((yf[__id_0(0)])>=(0))&&((yf[__id_0(0)])<(Y))))
        return false;
      if (!(((xp[__id_0(0)])>=(0))&&((xp[__id_0(0)])<(X))))
        return false;
      if (!(((yp[__id_0(0)])>=(0))&&((yp[__id_0(0)])<(Y))))
        return false;
      if (!((((state[__id_0(0)])==(NEXT))||((x[__id_0(0)])!=(xp[__id_0(0)])))||((y[__id_0(0)])!=(yp[__id_0(0)]))))
        return false;
      if (!((((((state[__id_0(0)])!=(NEXT))&&((state[__id_0(0)])!=(REQUEST)))&&((state[__id_0(0)])!=(WAITING)))&&((state[__id_0(0)])!=(MOVE)))||(lock_f[__id_0(0)][x[__id_0(0)]][y[__id_0(0)]])))
        return false;
      if (!(((((state[__id_0(0)])!=(NEXT))&&((state[__id_0(0)])!=(WAITING)))&&((state[__id_0(0)])!=(MOVE)))||((lock_f[__id_0(0)][x[__id_0(0)]][y[__id_0(0)]])&&(lock_f[__id_0(0)][xp[__id_0(0)]][yp[__id_0(0)]]))))
        return false;
      if (!(((state[__id_0(0)])==(NEXT))||((((x[__id_0(0)])==((xp[__id_0(0)])-(1)))||((x[__id_0(0)])==((xp[__id_0(0)])+(1))))^(((y[__id_0(0)])==((yp[__id_0(0)])-(1)))||((y[__id_0(0)])==((yp[__id_0(0)])+(1)))))))
        return false;
    }
    {
      if (!(((state[__id_1(1)])>=(NEXT))&&((state[__id_1(1)])<=(MOVE))))
        return false;
      if (!(((x[__id_1(1)])>=(0))&&((x[__id_1(1)])<(X))))
        return false;
      if (!(((y[__id_1(1)])>=(0))&&((y[__id_1(1)])<(Y))))
        return false;
      if (!(((xf[__id_1(1)])>=(0))&&((xf[__id_1(1)])<(X))))
        return false;
      if (!(((yf[__id_1(1)])>=(0))&&((yf[__id_1(1)])<(Y))))
        return false;
      if (!(((xp[__id_1(1)])>=(0))&&((xp[__id_1(1)])<(X))))
        return false;
      if (!(((yp[__id_1(1)])>=(0))&&((yp[__id_1(1)])<(Y))))
        return false;
      if (!((((state[__id_1(1)])==(NEXT))||((x[__id_1(1)])!=(xp[__id_1(1)])))||((y[__id_1(1)])!=(yp[__id_1(1)]))))
        return false;
      if (!((((((state[__id_1(1)])!=(NEXT))&&((state[__id_1(1)])!=(REQUEST)))&&((state[__id_1(1)])!=(WAITING)))&&((state[__id_1(1)])!=(MOVE)))||(lock_f[__id_1(1)][x[__id_1(1)]][y[__id_1(1)]])))
        return false;
      if (!(((((state[__id_1(1)])!=(NEXT))&&((state[__id_1(1)])!=(WAITING)))&&((state[__id_1(1)])!=(MOVE)))||((lock_f[__id_1(1)][x[__id_1(1)]][y[__id_1(1)]])&&(lock_f[__id_1(1)][xp[__id_1(1)]][yp[__id_1(1)]]))))
        return false;
      if (!(((state[__id_1(1)])==(NEXT))||((((x[__id_1(1)])==((xp[__id_1(1)])-(1)))||((x[__id_1(1)])==((xp[__id_1(1)])+(1))))^(((y[__id_1(1)])==((yp[__id_1(1)])-(1)))||((y[__id_1(1)])==((yp[__id_1(1)])+(1)))))))
        return false;
    }
  }
  {
    {
      if (!(((((((state[__id_0(0)])!=(NEXT))&&((state[__id_0(0)])!=(MOVE)))||((state[__id_0(1)])!=(WAITING)))||((0)>=(1)))||((xp[__id_0(0)])!=(xp[__id_0(1)])))||((yp[__id_0(0)])!=(yp[__id_0(1)]))))
        return false;
      if (!((((state[__id_0(0)])!=(MOVE))||((state[__id_0(1)])!=(MOVE)))||((((((xp[__id_0(0)])!=(xp[__id_0(1)]))||((yp[__id_0(0)])!=(yp[__id_0(1)])))&&(((xp[__id_0(0)])!=(x[__id_0(1)]))||((yp[__id_0(0)])!=(y[__id_0(1)]))))&&(((x[__id_0(0)])!=(xp[__id_0(1)]))||((y[__id_0(0)])!=(yp[__id_0(1)]))))&&(((x[__id_0(0)])!=(x[__id_0(1)]))||((y[__id_0(0)])!=(y[__id_0(1)]))))))
        return false;
      if (!(((((state[__id_0(1)])!=(WAITING))||((0)>=(1)))||((x[__id_0(0)])!=(xp[__id_0(1)])))||((y[__id_0(0)])!=(yp[__id_0(1)]))))
        return false;
      if (!(((((state[__id_0(1)])!=(MOVE))||((x[__id_0(0)])!=(xp[__id_0(1)])))||((y[__id_0(0)])!=(yp[__id_0(1)])))&&((((state[__id_0(0)])!=(4))||((xp[__id_0(0)])!=(x[__id_0(1)])))||((yp[__id_0(0)])!=(y[__id_0(1)])))))
        return false;
      if (!(((x[__id_0(0)])!=(x[__id_0(1)]))||((y[__id_0(0)])!=(y[__id_0(1)]))))
        return false;
    }
  }
  return true;
}

_Bool __SAFETY_NoCollision_fwd()
{
  {
    {
      if (((x[__id_0(0)])==(x[__id_0(1)]))&&((y[__id_0(0)])==(y[__id_0(1)])))
        return false;
    }
  }
  {
    {
      if (!(((state[__id_0(0)])>=(NEXT))&&((state[__id_0(0)])<=(MOVE))))
        return false;
      if (!(((x[__id_0(0)])>=(0))&&((x[__id_0(0)])<(X))))
        return false;
      if (!(((y[__id_0(0)])>=(0))&&((y[__id_0(0)])<(Y))))
        return false;
      if (!(((xf[__id_0(0)])>=(0))&&((xf[__id_0(0)])<(X))))
        return false;
      if (!(((yf[__id_0(0)])>=(0))&&((yf[__id_0(0)])<(Y))))
        return false;
      if (!(((xp[__id_0(0)])>=(0))&&((xp[__id_0(0)])<(X))))
        return false;
      if (!(((yp[__id_0(0)])>=(0))&&((yp[__id_0(0)])<(Y))))
        return false;
      if (!((((state[__id_0(0)])==(NEXT))||((x[__id_0(0)])!=(xp[__id_0(0)])))||((y[__id_0(0)])!=(yp[__id_0(0)]))))
        return false;
      if (!((((((state[__id_0(0)])!=(NEXT))&&((state[__id_0(0)])!=(REQUEST)))&&((state[__id_0(0)])!=(WAITING)))&&((state[__id_0(0)])!=(MOVE)))||(lock_i[__id_0(0)][x[__id_0(0)]][y[__id_0(0)]])))
        return false;
      if (!(((((state[__id_0(0)])!=(NEXT))&&((state[__id_0(0)])!=(WAITING)))&&((state[__id_0(0)])!=(MOVE)))||((lock_i[__id_0(0)][x[__id_0(0)]][y[__id_0(0)]])&&(lock_i[__id_0(0)][xp[__id_0(0)]][yp[__id_0(0)]]))))
        return false;
      if (!(((state[__id_0(0)])==(NEXT))||((((x[__id_0(0)])==((xp[__id_0(0)])-(1)))||((x[__id_0(0)])==((xp[__id_0(0)])+(1))))^(((y[__id_0(0)])==((yp[__id_0(0)])-(1)))||((y[__id_0(0)])==((yp[__id_0(0)])+(1)))))))
        return false;
    }
    {
      if (!(((state[__id_1(1)])>=(NEXT))&&((state[__id_1(1)])<=(MOVE))))
        return false;
      if (!(((x[__id_1(1)])>=(0))&&((x[__id_1(1)])<(X))))
        return false;
      if (!(((y[__id_1(1)])>=(0))&&((y[__id_1(1)])<(Y))))
        return false;
      if (!(((xf[__id_1(1)])>=(0))&&((xf[__id_1(1)])<(X))))
        return false;
      if (!(((yf[__id_1(1)])>=(0))&&((yf[__id_1(1)])<(Y))))
        return false;
      if (!(((xp[__id_1(1)])>=(0))&&((xp[__id_1(1)])<(X))))
        return false;
      if (!(((yp[__id_1(1)])>=(0))&&((yp[__id_1(1)])<(Y))))
        return false;
      if (!((((state[__id_1(1)])==(NEXT))||((x[__id_1(1)])!=(xp[__id_1(1)])))||((y[__id_1(1)])!=(yp[__id_1(1)]))))
        return false;
      if (!((((((state[__id_1(1)])!=(NEXT))&&((state[__id_1(1)])!=(REQUEST)))&&((state[__id_1(1)])!=(WAITING)))&&((state[__id_1(1)])!=(MOVE)))||(lock_i[__id_1(1)][x[__id_1(1)]][y[__id_1(1)]])))
        return false;
      if (!(((((state[__id_1(1)])!=(NEXT))&&((state[__id_1(1)])!=(WAITING)))&&((state[__id_1(1)])!=(MOVE)))||((lock_i[__id_1(1)][x[__id_1(1)]][y[__id_1(1)]])&&(lock_i[__id_1(1)][xp[__id_1(1)]][yp[__id_1(1)]]))))
        return false;
      if (!(((state[__id_1(1)])==(NEXT))||((((x[__id_1(1)])==((xp[__id_1(1)])-(1)))||((x[__id_1(1)])==((xp[__id_1(1)])+(1))))^(((y[__id_1(1)])==((yp[__id_1(1)])-(1)))||((y[__id_1(1)])==((yp[__id_1(1)])+(1)))))))
        return false;
    }
  }
  {
    {
      if (!(((((((state[__id_0(0)])!=(NEXT))&&((state[__id_0(0)])!=(MOVE)))||((state[__id_0(1)])!=(WAITING)))||((0)>=(1)))||((xp[__id_0(0)])!=(xp[__id_0(1)])))||((yp[__id_0(0)])!=(yp[__id_0(1)]))))
        return false;
      if (!((((state[__id_0(0)])!=(MOVE))||((state[__id_0(1)])!=(MOVE)))||((((((xp[__id_0(0)])!=(xp[__id_0(1)]))||((yp[__id_0(0)])!=(yp[__id_0(1)])))&&(((xp[__id_0(0)])!=(x[__id_0(1)]))||((yp[__id_0(0)])!=(y[__id_0(1)]))))&&(((x[__id_0(0)])!=(xp[__id_0(1)]))||((y[__id_0(0)])!=(yp[__id_0(1)]))))&&(((x[__id_0(0)])!=(x[__id_0(1)]))||((y[__id_0(0)])!=(y[__id_0(1)]))))))
        return false;
      if (!(((((state[__id_0(1)])!=(WAITING))||((0)>=(1)))||((x[__id_0(0)])!=(xp[__id_0(1)])))||((y[__id_0(0)])!=(yp[__id_0(1)]))))
        return false;
      if (!(((((state[__id_0(1)])!=(MOVE))||((x[__id_0(0)])!=(xp[__id_0(1)])))||((y[__id_0(0)])!=(yp[__id_0(1)])))&&((((state[__id_0(0)])!=(4))||((xp[__id_0(0)])!=(x[__id_0(1)])))||((yp[__id_0(0)])!=(y[__id_0(1)])))))
        return false;
      if (!(((x[__id_0(0)])!=(x[__id_0(1)]))||((y[__id_0(0)])!=(y[__id_0(1)]))))
        return false;
    }
  }
  return true;
}

void __SAFETY_bwd()
{
  assert(__SAFETY_NoCollision_bwd());
}

void __SAFETY_fwd()
{
  assert(__SAFETY_NoCollision_fwd());
}

unsigned char __id_0(unsigned char x)
{
  return ((nodeIds[x])==(nodeIds[0]))?(0):(1);
}

unsigned char __id_1(unsigned char x)
{
  return ((nodeIds[x])==(nodeIds[1]))?(1):(0);
}

int main()
{
  nodeIds[0] = nondet_nodeIds();
  nodeIds[1] = nondet_nodeIds();
  __CPROVER_assume((nodeIds[0])!=(nodeIds[1]));
  __INIT();
  __SAFETY_fwd();
  __HAVOC();
  __ASSUME();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  round_bwd_copier();
  __SAFETY_fwd();
}

int my_sleep(int seconds);
_Bool nondet_lock_i();
unsigned char nondet_nodeIds();
unsigned char nondet_state();
unsigned char nondet_x();
unsigned char nondet_xf();
unsigned char nondet_xp();
unsigned char nondet_y();
unsigned char nondet_yf();
unsigned char nondet_yp();
void print_int(int i);
void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);
void round_bwd_copier()
{
  lock_i[0][0][0] = lock_f[0][0][0];
  lock_i[0][0][1] = lock_f[0][0][1];
  lock_i[0][0][2] = lock_f[0][0][2];
  lock_i[0][0][3] = lock_f[0][0][3];
  lock_i[0][0][4] = lock_f[0][0][4];
  lock_i[0][0][5] = lock_f[0][0][5];
  lock_i[0][0][6] = lock_f[0][0][6];
  lock_i[0][0][7] = lock_f[0][0][7];
  lock_i[0][0][8] = lock_f[0][0][8];
  lock_i[0][0][9] = lock_f[0][0][9];
  lock_i[0][1][0] = lock_f[0][1][0];
  lock_i[0][1][1] = lock_f[0][1][1];
  lock_i[0][1][2] = lock_f[0][1][2];
  lock_i[0][1][3] = lock_f[0][1][3];
  lock_i[0][1][4] = lock_f[0][1][4];
  lock_i[0][1][5] = lock_f[0][1][5];
  lock_i[0][1][6] = lock_f[0][1][6];
  lock_i[0][1][7] = lock_f[0][1][7];
  lock_i[0][1][8] = lock_f[0][1][8];
  lock_i[0][1][9] = lock_f[0][1][9];
  lock_i[0][2][0] = lock_f[0][2][0];
  lock_i[0][2][1] = lock_f[0][2][1];
  lock_i[0][2][2] = lock_f[0][2][2];
  lock_i[0][2][3] = lock_f[0][2][3];
  lock_i[0][2][4] = lock_f[0][2][4];
  lock_i[0][2][5] = lock_f[0][2][5];
  lock_i[0][2][6] = lock_f[0][2][6];
  lock_i[0][2][7] = lock_f[0][2][7];
  lock_i[0][2][8] = lock_f[0][2][8];
  lock_i[0][2][9] = lock_f[0][2][9];
  lock_i[0][3][0] = lock_f[0][3][0];
  lock_i[0][3][1] = lock_f[0][3][1];
  lock_i[0][3][2] = lock_f[0][3][2];
  lock_i[0][3][3] = lock_f[0][3][3];
  lock_i[0][3][4] = lock_f[0][3][4];
  lock_i[0][3][5] = lock_f[0][3][5];
  lock_i[0][3][6] = lock_f[0][3][6];
  lock_i[0][3][7] = lock_f[0][3][7];
  lock_i[0][3][8] = lock_f[0][3][8];
  lock_i[0][3][9] = lock_f[0][3][9];
  lock_i[0][4][0] = lock_f[0][4][0];
  lock_i[0][4][1] = lock_f[0][4][1];
  lock_i[0][4][2] = lock_f[0][4][2];
  lock_i[0][4][3] = lock_f[0][4][3];
  lock_i[0][4][4] = lock_f[0][4][4];
  lock_i[0][4][5] = lock_f[0][4][5];
  lock_i[0][4][6] = lock_f[0][4][6];
  lock_i[0][4][7] = lock_f[0][4][7];
  lock_i[0][4][8] = lock_f[0][4][8];
  lock_i[0][4][9] = lock_f[0][4][9];
  lock_i[0][5][0] = lock_f[0][5][0];
  lock_i[0][5][1] = lock_f[0][5][1];
  lock_i[0][5][2] = lock_f[0][5][2];
  lock_i[0][5][3] = lock_f[0][5][3];
  lock_i[0][5][4] = lock_f[0][5][4];
  lock_i[0][5][5] = lock_f[0][5][5];
  lock_i[0][5][6] = lock_f[0][5][6];
  lock_i[0][5][7] = lock_f[0][5][7];
  lock_i[0][5][8] = lock_f[0][5][8];
  lock_i[0][5][9] = lock_f[0][5][9];
  lock_i[0][6][0] = lock_f[0][6][0];
  lock_i[0][6][1] = lock_f[0][6][1];
  lock_i[0][6][2] = lock_f[0][6][2];
  lock_i[0][6][3] = lock_f[0][6][3];
  lock_i[0][6][4] = lock_f[0][6][4];
  lock_i[0][6][5] = lock_f[0][6][5];
  lock_i[0][6][6] = lock_f[0][6][6];
  lock_i[0][6][7] = lock_f[0][6][7];
  lock_i[0][6][8] = lock_f[0][6][8];
  lock_i[0][6][9] = lock_f[0][6][9];
  lock_i[0][7][0] = lock_f[0][7][0];
  lock_i[0][7][1] = lock_f[0][7][1];
  lock_i[0][7][2] = lock_f[0][7][2];
  lock_i[0][7][3] = lock_f[0][7][3];
  lock_i[0][7][4] = lock_f[0][7][4];
  lock_i[0][7][5] = lock_f[0][7][5];
  lock_i[0][7][6] = lock_f[0][7][6];
  lock_i[0][7][7] = lock_f[0][7][7];
  lock_i[0][7][8] = lock_f[0][7][8];
  lock_i[0][7][9] = lock_f[0][7][9];
  lock_i[0][8][0] = lock_f[0][8][0];
  lock_i[0][8][1] = lock_f[0][8][1];
  lock_i[0][8][2] = lock_f[0][8][2];
  lock_i[0][8][3] = lock_f[0][8][3];
  lock_i[0][8][4] = lock_f[0][8][4];
  lock_i[0][8][5] = lock_f[0][8][5];
  lock_i[0][8][6] = lock_f[0][8][6];
  lock_i[0][8][7] = lock_f[0][8][7];
  lock_i[0][8][8] = lock_f[0][8][8];
  lock_i[0][8][9] = lock_f[0][8][9];
  lock_i[0][9][0] = lock_f[0][9][0];
  lock_i[0][9][1] = lock_f[0][9][1];
  lock_i[0][9][2] = lock_f[0][9][2];
  lock_i[0][9][3] = lock_f[0][9][3];
  lock_i[0][9][4] = lock_f[0][9][4];
  lock_i[0][9][5] = lock_f[0][9][5];
  lock_i[0][9][6] = lock_f[0][9][6];
  lock_i[0][9][7] = lock_f[0][9][7];
  lock_i[0][9][8] = lock_f[0][9][8];
  lock_i[0][9][9] = lock_f[0][9][9];
  lock_i[1][0][0] = lock_f[1][0][0];
  lock_i[1][0][1] = lock_f[1][0][1];
  lock_i[1][0][2] = lock_f[1][0][2];
  lock_i[1][0][3] = lock_f[1][0][3];
  lock_i[1][0][4] = lock_f[1][0][4];
  lock_i[1][0][5] = lock_f[1][0][5];
  lock_i[1][0][6] = lock_f[1][0][6];
  lock_i[1][0][7] = lock_f[1][0][7];
  lock_i[1][0][8] = lock_f[1][0][8];
  lock_i[1][0][9] = lock_f[1][0][9];
  lock_i[1][1][0] = lock_f[1][1][0];
  lock_i[1][1][1] = lock_f[1][1][1];
  lock_i[1][1][2] = lock_f[1][1][2];
  lock_i[1][1][3] = lock_f[1][1][3];
  lock_i[1][1][4] = lock_f[1][1][4];
  lock_i[1][1][5] = lock_f[1][1][5];
  lock_i[1][1][6] = lock_f[1][1][6];
  lock_i[1][1][7] = lock_f[1][1][7];
  lock_i[1][1][8] = lock_f[1][1][8];
  lock_i[1][1][9] = lock_f[1][1][9];
  lock_i[1][2][0] = lock_f[1][2][0];
  lock_i[1][2][1] = lock_f[1][2][1];
  lock_i[1][2][2] = lock_f[1][2][2];
  lock_i[1][2][3] = lock_f[1][2][3];
  lock_i[1][2][4] = lock_f[1][2][4];
  lock_i[1][2][5] = lock_f[1][2][5];
  lock_i[1][2][6] = lock_f[1][2][6];
  lock_i[1][2][7] = lock_f[1][2][7];
  lock_i[1][2][8] = lock_f[1][2][8];
  lock_i[1][2][9] = lock_f[1][2][9];
  lock_i[1][3][0] = lock_f[1][3][0];
  lock_i[1][3][1] = lock_f[1][3][1];
  lock_i[1][3][2] = lock_f[1][3][2];
  lock_i[1][3][3] = lock_f[1][3][3];
  lock_i[1][3][4] = lock_f[1][3][4];
  lock_i[1][3][5] = lock_f[1][3][5];
  lock_i[1][3][6] = lock_f[1][3][6];
  lock_i[1][3][7] = lock_f[1][3][7];
  lock_i[1][3][8] = lock_f[1][3][8];
  lock_i[1][3][9] = lock_f[1][3][9];
  lock_i[1][4][0] = lock_f[1][4][0];
  lock_i[1][4][1] = lock_f[1][4][1];
  lock_i[1][4][2] = lock_f[1][4][2];
  lock_i[1][4][3] = lock_f[1][4][3];
  lock_i[1][4][4] = lock_f[1][4][4];
  lock_i[1][4][5] = lock_f[1][4][5];
  lock_i[1][4][6] = lock_f[1][4][6];
  lock_i[1][4][7] = lock_f[1][4][7];
  lock_i[1][4][8] = lock_f[1][4][8];
  lock_i[1][4][9] = lock_f[1][4][9];
  lock_i[1][5][0] = lock_f[1][5][0];
  lock_i[1][5][1] = lock_f[1][5][1];
  lock_i[1][5][2] = lock_f[1][5][2];
  lock_i[1][5][3] = lock_f[1][5][3];
  lock_i[1][5][4] = lock_f[1][5][4];
  lock_i[1][5][5] = lock_f[1][5][5];
  lock_i[1][5][6] = lock_f[1][5][6];
  lock_i[1][5][7] = lock_f[1][5][7];
  lock_i[1][5][8] = lock_f[1][5][8];
  lock_i[1][5][9] = lock_f[1][5][9];
  lock_i[1][6][0] = lock_f[1][6][0];
  lock_i[1][6][1] = lock_f[1][6][1];
  lock_i[1][6][2] = lock_f[1][6][2];
  lock_i[1][6][3] = lock_f[1][6][3];
  lock_i[1][6][4] = lock_f[1][6][4];
  lock_i[1][6][5] = lock_f[1][6][5];
  lock_i[1][6][6] = lock_f[1][6][6];
  lock_i[1][6][7] = lock_f[1][6][7];
  lock_i[1][6][8] = lock_f[1][6][8];
  lock_i[1][6][9] = lock_f[1][6][9];
  lock_i[1][7][0] = lock_f[1][7][0];
  lock_i[1][7][1] = lock_f[1][7][1];
  lock_i[1][7][2] = lock_f[1][7][2];
  lock_i[1][7][3] = lock_f[1][7][3];
  lock_i[1][7][4] = lock_f[1][7][4];
  lock_i[1][7][5] = lock_f[1][7][5];
  lock_i[1][7][6] = lock_f[1][7][6];
  lock_i[1][7][7] = lock_f[1][7][7];
  lock_i[1][7][8] = lock_f[1][7][8];
  lock_i[1][7][9] = lock_f[1][7][9];
  lock_i[1][8][0] = lock_f[1][8][0];
  lock_i[1][8][1] = lock_f[1][8][1];
  lock_i[1][8][2] = lock_f[1][8][2];
  lock_i[1][8][3] = lock_f[1][8][3];
  lock_i[1][8][4] = lock_f[1][8][4];
  lock_i[1][8][5] = lock_f[1][8][5];
  lock_i[1][8][6] = lock_f[1][8][6];
  lock_i[1][8][7] = lock_f[1][8][7];
  lock_i[1][8][8] = lock_f[1][8][8];
  lock_i[1][8][9] = lock_f[1][8][9];
  lock_i[1][9][0] = lock_f[1][9][0];
  lock_i[1][9][1] = lock_f[1][9][1];
  lock_i[1][9][2] = lock_f[1][9][2];
  lock_i[1][9][3] = lock_f[1][9][3];
  lock_i[1][9][4] = lock_f[1][9][4];
  lock_i[1][9][5] = lock_f[1][9][5];
  lock_i[1][9][6] = lock_f[1][9][6];
  lock_i[1][9][7] = lock_f[1][9][7];
  lock_i[1][9][8] = lock_f[1][9][8];
  lock_i[1][9][9] = lock_f[1][9][9];
  lock_i[0][0][0] = lock_f[0][0][0];
  lock_i[0][0][1] = lock_f[0][0][1];
  lock_i[0][0][2] = lock_f[0][0][2];
  lock_i[0][0][3] = lock_f[0][0][3];
  lock_i[0][0][4] = lock_f[0][0][4];
  lock_i[0][0][5] = lock_f[0][0][5];
  lock_i[0][0][6] = lock_f[0][0][6];
  lock_i[0][0][7] = lock_f[0][0][7];
  lock_i[0][0][8] = lock_f[0][0][8];
  lock_i[0][0][9] = lock_f[0][0][9];
  lock_i[0][1][0] = lock_f[0][1][0];
  lock_i[0][1][1] = lock_f[0][1][1];
  lock_i[0][1][2] = lock_f[0][1][2];
  lock_i[0][1][3] = lock_f[0][1][3];
  lock_i[0][1][4] = lock_f[0][1][4];
  lock_i[0][1][5] = lock_f[0][1][5];
  lock_i[0][1][6] = lock_f[0][1][6];
  lock_i[0][1][7] = lock_f[0][1][7];
  lock_i[0][1][8] = lock_f[0][1][8];
  lock_i[0][1][9] = lock_f[0][1][9];
  lock_i[0][2][0] = lock_f[0][2][0];
  lock_i[0][2][1] = lock_f[0][2][1];
  lock_i[0][2][2] = lock_f[0][2][2];
  lock_i[0][2][3] = lock_f[0][2][3];
  lock_i[0][2][4] = lock_f[0][2][4];
  lock_i[0][2][5] = lock_f[0][2][5];
  lock_i[0][2][6] = lock_f[0][2][6];
  lock_i[0][2][7] = lock_f[0][2][7];
  lock_i[0][2][8] = lock_f[0][2][8];
  lock_i[0][2][9] = lock_f[0][2][9];
  lock_i[0][3][0] = lock_f[0][3][0];
  lock_i[0][3][1] = lock_f[0][3][1];
  lock_i[0][3][2] = lock_f[0][3][2];
  lock_i[0][3][3] = lock_f[0][3][3];
  lock_i[0][3][4] = lock_f[0][3][4];
  lock_i[0][3][5] = lock_f[0][3][5];
  lock_i[0][3][6] = lock_f[0][3][6];
  lock_i[0][3][7] = lock_f[0][3][7];
  lock_i[0][3][8] = lock_f[0][3][8];
  lock_i[0][3][9] = lock_f[0][3][9];
  lock_i[0][4][0] = lock_f[0][4][0];
  lock_i[0][4][1] = lock_f[0][4][1];
  lock_i[0][4][2] = lock_f[0][4][2];
  lock_i[0][4][3] = lock_f[0][4][3];
  lock_i[0][4][4] = lock_f[0][4][4];
  lock_i[0][4][5] = lock_f[0][4][5];
  lock_i[0][4][6] = lock_f[0][4][6];
  lock_i[0][4][7] = lock_f[0][4][7];
  lock_i[0][4][8] = lock_f[0][4][8];
  lock_i[0][4][9] = lock_f[0][4][9];
  lock_i[0][5][0] = lock_f[0][5][0];
  lock_i[0][5][1] = lock_f[0][5][1];
  lock_i[0][5][2] = lock_f[0][5][2];
  lock_i[0][5][3] = lock_f[0][5][3];
  lock_i[0][5][4] = lock_f[0][5][4];
  lock_i[0][5][5] = lock_f[0][5][5];
  lock_i[0][5][6] = lock_f[0][5][6];
  lock_i[0][5][7] = lock_f[0][5][7];
  lock_i[0][5][8] = lock_f[0][5][8];
  lock_i[0][5][9] = lock_f[0][5][9];
  lock_i[0][6][0] = lock_f[0][6][0];
  lock_i[0][6][1] = lock_f[0][6][1];
  lock_i[0][6][2] = lock_f[0][6][2];
  lock_i[0][6][3] = lock_f[0][6][3];
  lock_i[0][6][4] = lock_f[0][6][4];
  lock_i[0][6][5] = lock_f[0][6][5];
  lock_i[0][6][6] = lock_f[0][6][6];
  lock_i[0][6][7] = lock_f[0][6][7];
  lock_i[0][6][8] = lock_f[0][6][8];
  lock_i[0][6][9] = lock_f[0][6][9];
  lock_i[0][7][0] = lock_f[0][7][0];
  lock_i[0][7][1] = lock_f[0][7][1];
  lock_i[0][7][2] = lock_f[0][7][2];
  lock_i[0][7][3] = lock_f[0][7][3];
  lock_i[0][7][4] = lock_f[0][7][4];
  lock_i[0][7][5] = lock_f[0][7][5];
  lock_i[0][7][6] = lock_f[0][7][6];
  lock_i[0][7][7] = lock_f[0][7][7];
  lock_i[0][7][8] = lock_f[0][7][8];
  lock_i[0][7][9] = lock_f[0][7][9];
  lock_i[0][8][0] = lock_f[0][8][0];
  lock_i[0][8][1] = lock_f[0][8][1];
  lock_i[0][8][2] = lock_f[0][8][2];
  lock_i[0][8][3] = lock_f[0][8][3];
  lock_i[0][8][4] = lock_f[0][8][4];
  lock_i[0][8][5] = lock_f[0][8][5];
  lock_i[0][8][6] = lock_f[0][8][6];
  lock_i[0][8][7] = lock_f[0][8][7];
  lock_i[0][8][8] = lock_f[0][8][8];
  lock_i[0][8][9] = lock_f[0][8][9];
  lock_i[0][9][0] = lock_f[0][9][0];
  lock_i[0][9][1] = lock_f[0][9][1];
  lock_i[0][9][2] = lock_f[0][9][2];
  lock_i[0][9][3] = lock_f[0][9][3];
  lock_i[0][9][4] = lock_f[0][9][4];
  lock_i[0][9][5] = lock_f[0][9][5];
  lock_i[0][9][6] = lock_f[0][9][6];
  lock_i[0][9][7] = lock_f[0][9][7];
  lock_i[0][9][8] = lock_f[0][9][8];
  lock_i[0][9][9] = lock_f[0][9][9];
  lock_i[1][0][0] = lock_f[1][0][0];
  lock_i[1][0][1] = lock_f[1][0][1];
  lock_i[1][0][2] = lock_f[1][0][2];
  lock_i[1][0][3] = lock_f[1][0][3];
  lock_i[1][0][4] = lock_f[1][0][4];
  lock_i[1][0][5] = lock_f[1][0][5];
  lock_i[1][0][6] = lock_f[1][0][6];
  lock_i[1][0][7] = lock_f[1][0][7];
  lock_i[1][0][8] = lock_f[1][0][8];
  lock_i[1][0][9] = lock_f[1][0][9];
  lock_i[1][1][0] = lock_f[1][1][0];
  lock_i[1][1][1] = lock_f[1][1][1];
  lock_i[1][1][2] = lock_f[1][1][2];
  lock_i[1][1][3] = lock_f[1][1][3];
  lock_i[1][1][4] = lock_f[1][1][4];
  lock_i[1][1][5] = lock_f[1][1][5];
  lock_i[1][1][6] = lock_f[1][1][6];
  lock_i[1][1][7] = lock_f[1][1][7];
  lock_i[1][1][8] = lock_f[1][1][8];
  lock_i[1][1][9] = lock_f[1][1][9];
  lock_i[1][2][0] = lock_f[1][2][0];
  lock_i[1][2][1] = lock_f[1][2][1];
  lock_i[1][2][2] = lock_f[1][2][2];
  lock_i[1][2][3] = lock_f[1][2][3];
  lock_i[1][2][4] = lock_f[1][2][4];
  lock_i[1][2][5] = lock_f[1][2][5];
  lock_i[1][2][6] = lock_f[1][2][6];
  lock_i[1][2][7] = lock_f[1][2][7];
  lock_i[1][2][8] = lock_f[1][2][8];
  lock_i[1][2][9] = lock_f[1][2][9];
  lock_i[1][3][0] = lock_f[1][3][0];
  lock_i[1][3][1] = lock_f[1][3][1];
  lock_i[1][3][2] = lock_f[1][3][2];
  lock_i[1][3][3] = lock_f[1][3][3];
  lock_i[1][3][4] = lock_f[1][3][4];
  lock_i[1][3][5] = lock_f[1][3][5];
  lock_i[1][3][6] = lock_f[1][3][6];
  lock_i[1][3][7] = lock_f[1][3][7];
  lock_i[1][3][8] = lock_f[1][3][8];
  lock_i[1][3][9] = lock_f[1][3][9];
  lock_i[1][4][0] = lock_f[1][4][0];
  lock_i[1][4][1] = lock_f[1][4][1];
  lock_i[1][4][2] = lock_f[1][4][2];
  lock_i[1][4][3] = lock_f[1][4][3];
  lock_i[1][4][4] = lock_f[1][4][4];
  lock_i[1][4][5] = lock_f[1][4][5];
  lock_i[1][4][6] = lock_f[1][4][6];
  lock_i[1][4][7] = lock_f[1][4][7];
  lock_i[1][4][8] = lock_f[1][4][8];
  lock_i[1][4][9] = lock_f[1][4][9];
  lock_i[1][5][0] = lock_f[1][5][0];
  lock_i[1][5][1] = lock_f[1][5][1];
  lock_i[1][5][2] = lock_f[1][5][2];
  lock_i[1][5][3] = lock_f[1][5][3];
  lock_i[1][5][4] = lock_f[1][5][4];
  lock_i[1][5][5] = lock_f[1][5][5];
  lock_i[1][5][6] = lock_f[1][5][6];
  lock_i[1][5][7] = lock_f[1][5][7];
  lock_i[1][5][8] = lock_f[1][5][8];
  lock_i[1][5][9] = lock_f[1][5][9];
  lock_i[1][6][0] = lock_f[1][6][0];
  lock_i[1][6][1] = lock_f[1][6][1];
  lock_i[1][6][2] = lock_f[1][6][2];
  lock_i[1][6][3] = lock_f[1][6][3];
  lock_i[1][6][4] = lock_f[1][6][4];
  lock_i[1][6][5] = lock_f[1][6][5];
  lock_i[1][6][6] = lock_f[1][6][6];
  lock_i[1][6][7] = lock_f[1][6][7];
  lock_i[1][6][8] = lock_f[1][6][8];
  lock_i[1][6][9] = lock_f[1][6][9];
  lock_i[1][7][0] = lock_f[1][7][0];
  lock_i[1][7][1] = lock_f[1][7][1];
  lock_i[1][7][2] = lock_f[1][7][2];
  lock_i[1][7][3] = lock_f[1][7][3];
  lock_i[1][7][4] = lock_f[1][7][4];
  lock_i[1][7][5] = lock_f[1][7][5];
  lock_i[1][7][6] = lock_f[1][7][6];
  lock_i[1][7][7] = lock_f[1][7][7];
  lock_i[1][7][8] = lock_f[1][7][8];
  lock_i[1][7][9] = lock_f[1][7][9];
  lock_i[1][8][0] = lock_f[1][8][0];
  lock_i[1][8][1] = lock_f[1][8][1];
  lock_i[1][8][2] = lock_f[1][8][2];
  lock_i[1][8][3] = lock_f[1][8][3];
  lock_i[1][8][4] = lock_f[1][8][4];
  lock_i[1][8][5] = lock_f[1][8][5];
  lock_i[1][8][6] = lock_f[1][8][6];
  lock_i[1][8][7] = lock_f[1][8][7];
  lock_i[1][8][8] = lock_f[1][8][8];
  lock_i[1][8][9] = lock_f[1][8][9];
  lock_i[1][9][0] = lock_f[1][9][0];
  lock_i[1][9][1] = lock_f[1][9][1];
  lock_i[1][9][2] = lock_f[1][9][2];
  lock_i[1][9][3] = lock_f[1][9][3];
  lock_i[1][9][4] = lock_f[1][9][4];
  lock_i[1][9][5] = lock_f[1][9][5];
  lock_i[1][9][6] = lock_f[1][9][6];
  lock_i[1][9][7] = lock_f[1][9][7];
  lock_i[1][9][8] = lock_f[1][9][8];
  lock_i[1][9][9] = lock_f[1][9][9];
}

void round_fwd_copier()
{
  lock_f[0][0][0] = lock_i[0][0][0];
  lock_f[0][0][1] = lock_i[0][0][1];
  lock_f[0][0][2] = lock_i[0][0][2];
  lock_f[0][0][3] = lock_i[0][0][3];
  lock_f[0][0][4] = lock_i[0][0][4];
  lock_f[0][0][5] = lock_i[0][0][5];
  lock_f[0][0][6] = lock_i[0][0][6];
  lock_f[0][0][7] = lock_i[0][0][7];
  lock_f[0][0][8] = lock_i[0][0][8];
  lock_f[0][0][9] = lock_i[0][0][9];
  lock_f[0][1][0] = lock_i[0][1][0];
  lock_f[0][1][1] = lock_i[0][1][1];
  lock_f[0][1][2] = lock_i[0][1][2];
  lock_f[0][1][3] = lock_i[0][1][3];
  lock_f[0][1][4] = lock_i[0][1][4];
  lock_f[0][1][5] = lock_i[0][1][5];
  lock_f[0][1][6] = lock_i[0][1][6];
  lock_f[0][1][7] = lock_i[0][1][7];
  lock_f[0][1][8] = lock_i[0][1][8];
  lock_f[0][1][9] = lock_i[0][1][9];
  lock_f[0][2][0] = lock_i[0][2][0];
  lock_f[0][2][1] = lock_i[0][2][1];
  lock_f[0][2][2] = lock_i[0][2][2];
  lock_f[0][2][3] = lock_i[0][2][3];
  lock_f[0][2][4] = lock_i[0][2][4];
  lock_f[0][2][5] = lock_i[0][2][5];
  lock_f[0][2][6] = lock_i[0][2][6];
  lock_f[0][2][7] = lock_i[0][2][7];
  lock_f[0][2][8] = lock_i[0][2][8];
  lock_f[0][2][9] = lock_i[0][2][9];
  lock_f[0][3][0] = lock_i[0][3][0];
  lock_f[0][3][1] = lock_i[0][3][1];
  lock_f[0][3][2] = lock_i[0][3][2];
  lock_f[0][3][3] = lock_i[0][3][3];
  lock_f[0][3][4] = lock_i[0][3][4];
  lock_f[0][3][5] = lock_i[0][3][5];
  lock_f[0][3][6] = lock_i[0][3][6];
  lock_f[0][3][7] = lock_i[0][3][7];
  lock_f[0][3][8] = lock_i[0][3][8];
  lock_f[0][3][9] = lock_i[0][3][9];
  lock_f[0][4][0] = lock_i[0][4][0];
  lock_f[0][4][1] = lock_i[0][4][1];
  lock_f[0][4][2] = lock_i[0][4][2];
  lock_f[0][4][3] = lock_i[0][4][3];
  lock_f[0][4][4] = lock_i[0][4][4];
  lock_f[0][4][5] = lock_i[0][4][5];
  lock_f[0][4][6] = lock_i[0][4][6];
  lock_f[0][4][7] = lock_i[0][4][7];
  lock_f[0][4][8] = lock_i[0][4][8];
  lock_f[0][4][9] = lock_i[0][4][9];
  lock_f[0][5][0] = lock_i[0][5][0];
  lock_f[0][5][1] = lock_i[0][5][1];
  lock_f[0][5][2] = lock_i[0][5][2];
  lock_f[0][5][3] = lock_i[0][5][3];
  lock_f[0][5][4] = lock_i[0][5][4];
  lock_f[0][5][5] = lock_i[0][5][5];
  lock_f[0][5][6] = lock_i[0][5][6];
  lock_f[0][5][7] = lock_i[0][5][7];
  lock_f[0][5][8] = lock_i[0][5][8];
  lock_f[0][5][9] = lock_i[0][5][9];
  lock_f[0][6][0] = lock_i[0][6][0];
  lock_f[0][6][1] = lock_i[0][6][1];
  lock_f[0][6][2] = lock_i[0][6][2];
  lock_f[0][6][3] = lock_i[0][6][3];
  lock_f[0][6][4] = lock_i[0][6][4];
  lock_f[0][6][5] = lock_i[0][6][5];
  lock_f[0][6][6] = lock_i[0][6][6];
  lock_f[0][6][7] = lock_i[0][6][7];
  lock_f[0][6][8] = lock_i[0][6][8];
  lock_f[0][6][9] = lock_i[0][6][9];
  lock_f[0][7][0] = lock_i[0][7][0];
  lock_f[0][7][1] = lock_i[0][7][1];
  lock_f[0][7][2] = lock_i[0][7][2];
  lock_f[0][7][3] = lock_i[0][7][3];
  lock_f[0][7][4] = lock_i[0][7][4];
  lock_f[0][7][5] = lock_i[0][7][5];
  lock_f[0][7][6] = lock_i[0][7][6];
  lock_f[0][7][7] = lock_i[0][7][7];
  lock_f[0][7][8] = lock_i[0][7][8];
  lock_f[0][7][9] = lock_i[0][7][9];
  lock_f[0][8][0] = lock_i[0][8][0];
  lock_f[0][8][1] = lock_i[0][8][1];
  lock_f[0][8][2] = lock_i[0][8][2];
  lock_f[0][8][3] = lock_i[0][8][3];
  lock_f[0][8][4] = lock_i[0][8][4];
  lock_f[0][8][5] = lock_i[0][8][5];
  lock_f[0][8][6] = lock_i[0][8][6];
  lock_f[0][8][7] = lock_i[0][8][7];
  lock_f[0][8][8] = lock_i[0][8][8];
  lock_f[0][8][9] = lock_i[0][8][9];
  lock_f[0][9][0] = lock_i[0][9][0];
  lock_f[0][9][1] = lock_i[0][9][1];
  lock_f[0][9][2] = lock_i[0][9][2];
  lock_f[0][9][3] = lock_i[0][9][3];
  lock_f[0][9][4] = lock_i[0][9][4];
  lock_f[0][9][5] = lock_i[0][9][5];
  lock_f[0][9][6] = lock_i[0][9][6];
  lock_f[0][9][7] = lock_i[0][9][7];
  lock_f[0][9][8] = lock_i[0][9][8];
  lock_f[0][9][9] = lock_i[0][9][9];
  lock_f[1][0][0] = lock_i[1][0][0];
  lock_f[1][0][1] = lock_i[1][0][1];
  lock_f[1][0][2] = lock_i[1][0][2];
  lock_f[1][0][3] = lock_i[1][0][3];
  lock_f[1][0][4] = lock_i[1][0][4];
  lock_f[1][0][5] = lock_i[1][0][5];
  lock_f[1][0][6] = lock_i[1][0][6];
  lock_f[1][0][7] = lock_i[1][0][7];
  lock_f[1][0][8] = lock_i[1][0][8];
  lock_f[1][0][9] = lock_i[1][0][9];
  lock_f[1][1][0] = lock_i[1][1][0];
  lock_f[1][1][1] = lock_i[1][1][1];
  lock_f[1][1][2] = lock_i[1][1][2];
  lock_f[1][1][3] = lock_i[1][1][3];
  lock_f[1][1][4] = lock_i[1][1][4];
  lock_f[1][1][5] = lock_i[1][1][5];
  lock_f[1][1][6] = lock_i[1][1][6];
  lock_f[1][1][7] = lock_i[1][1][7];
  lock_f[1][1][8] = lock_i[1][1][8];
  lock_f[1][1][9] = lock_i[1][1][9];
  lock_f[1][2][0] = lock_i[1][2][0];
  lock_f[1][2][1] = lock_i[1][2][1];
  lock_f[1][2][2] = lock_i[1][2][2];
  lock_f[1][2][3] = lock_i[1][2][3];
  lock_f[1][2][4] = lock_i[1][2][4];
  lock_f[1][2][5] = lock_i[1][2][5];
  lock_f[1][2][6] = lock_i[1][2][6];
  lock_f[1][2][7] = lock_i[1][2][7];
  lock_f[1][2][8] = lock_i[1][2][8];
  lock_f[1][2][9] = lock_i[1][2][9];
  lock_f[1][3][0] = lock_i[1][3][0];
  lock_f[1][3][1] = lock_i[1][3][1];
  lock_f[1][3][2] = lock_i[1][3][2];
  lock_f[1][3][3] = lock_i[1][3][3];
  lock_f[1][3][4] = lock_i[1][3][4];
  lock_f[1][3][5] = lock_i[1][3][5];
  lock_f[1][3][6] = lock_i[1][3][6];
  lock_f[1][3][7] = lock_i[1][3][7];
  lock_f[1][3][8] = lock_i[1][3][8];
  lock_f[1][3][9] = lock_i[1][3][9];
  lock_f[1][4][0] = lock_i[1][4][0];
  lock_f[1][4][1] = lock_i[1][4][1];
  lock_f[1][4][2] = lock_i[1][4][2];
  lock_f[1][4][3] = lock_i[1][4][3];
  lock_f[1][4][4] = lock_i[1][4][4];
  lock_f[1][4][5] = lock_i[1][4][5];
  lock_f[1][4][6] = lock_i[1][4][6];
  lock_f[1][4][7] = lock_i[1][4][7];
  lock_f[1][4][8] = lock_i[1][4][8];
  lock_f[1][4][9] = lock_i[1][4][9];
  lock_f[1][5][0] = lock_i[1][5][0];
  lock_f[1][5][1] = lock_i[1][5][1];
  lock_f[1][5][2] = lock_i[1][5][2];
  lock_f[1][5][3] = lock_i[1][5][3];
  lock_f[1][5][4] = lock_i[1][5][4];
  lock_f[1][5][5] = lock_i[1][5][5];
  lock_f[1][5][6] = lock_i[1][5][6];
  lock_f[1][5][7] = lock_i[1][5][7];
  lock_f[1][5][8] = lock_i[1][5][8];
  lock_f[1][5][9] = lock_i[1][5][9];
  lock_f[1][6][0] = lock_i[1][6][0];
  lock_f[1][6][1] = lock_i[1][6][1];
  lock_f[1][6][2] = lock_i[1][6][2];
  lock_f[1][6][3] = lock_i[1][6][3];
  lock_f[1][6][4] = lock_i[1][6][4];
  lock_f[1][6][5] = lock_i[1][6][5];
  lock_f[1][6][6] = lock_i[1][6][6];
  lock_f[1][6][7] = lock_i[1][6][7];
  lock_f[1][6][8] = lock_i[1][6][8];
  lock_f[1][6][9] = lock_i[1][6][9];
  lock_f[1][7][0] = lock_i[1][7][0];
  lock_f[1][7][1] = lock_i[1][7][1];
  lock_f[1][7][2] = lock_i[1][7][2];
  lock_f[1][7][3] = lock_i[1][7][3];
  lock_f[1][7][4] = lock_i[1][7][4];
  lock_f[1][7][5] = lock_i[1][7][5];
  lock_f[1][7][6] = lock_i[1][7][6];
  lock_f[1][7][7] = lock_i[1][7][7];
  lock_f[1][7][8] = lock_i[1][7][8];
  lock_f[1][7][9] = lock_i[1][7][9];
  lock_f[1][8][0] = lock_i[1][8][0];
  lock_f[1][8][1] = lock_i[1][8][1];
  lock_f[1][8][2] = lock_i[1][8][2];
  lock_f[1][8][3] = lock_i[1][8][3];
  lock_f[1][8][4] = lock_i[1][8][4];
  lock_f[1][8][5] = lock_i[1][8][5];
  lock_f[1][8][6] = lock_i[1][8][6];
  lock_f[1][8][7] = lock_i[1][8][7];
  lock_f[1][8][8] = lock_i[1][8][8];
  lock_f[1][8][9] = lock_i[1][8][9];
  lock_f[1][9][0] = lock_i[1][9][0];
  lock_f[1][9][1] = lock_i[1][9][1];
  lock_f[1][9][2] = lock_i[1][9][2];
  lock_f[1][9][3] = lock_i[1][9][3];
  lock_f[1][9][4] = lock_i[1][9][4];
  lock_f[1][9][5] = lock_i[1][9][5];
  lock_f[1][9][6] = lock_i[1][9][6];
  lock_f[1][9][7] = lock_i[1][9][7];
  lock_f[1][9][8] = lock_i[1][9][8];
  lock_f[1][9][9] = lock_i[1][9][9];
  lock_f[0][0][0] = lock_i[0][0][0];
  lock_f[0][0][1] = lock_i[0][0][1];
  lock_f[0][0][2] = lock_i[0][0][2];
  lock_f[0][0][3] = lock_i[0][0][3];
  lock_f[0][0][4] = lock_i[0][0][4];
  lock_f[0][0][5] = lock_i[0][0][5];
  lock_f[0][0][6] = lock_i[0][0][6];
  lock_f[0][0][7] = lock_i[0][0][7];
  lock_f[0][0][8] = lock_i[0][0][8];
  lock_f[0][0][9] = lock_i[0][0][9];
  lock_f[0][1][0] = lock_i[0][1][0];
  lock_f[0][1][1] = lock_i[0][1][1];
  lock_f[0][1][2] = lock_i[0][1][2];
  lock_f[0][1][3] = lock_i[0][1][3];
  lock_f[0][1][4] = lock_i[0][1][4];
  lock_f[0][1][5] = lock_i[0][1][5];
  lock_f[0][1][6] = lock_i[0][1][6];
  lock_f[0][1][7] = lock_i[0][1][7];
  lock_f[0][1][8] = lock_i[0][1][8];
  lock_f[0][1][9] = lock_i[0][1][9];
  lock_f[0][2][0] = lock_i[0][2][0];
  lock_f[0][2][1] = lock_i[0][2][1];
  lock_f[0][2][2] = lock_i[0][2][2];
  lock_f[0][2][3] = lock_i[0][2][3];
  lock_f[0][2][4] = lock_i[0][2][4];
  lock_f[0][2][5] = lock_i[0][2][5];
  lock_f[0][2][6] = lock_i[0][2][6];
  lock_f[0][2][7] = lock_i[0][2][7];
  lock_f[0][2][8] = lock_i[0][2][8];
  lock_f[0][2][9] = lock_i[0][2][9];
  lock_f[0][3][0] = lock_i[0][3][0];
  lock_f[0][3][1] = lock_i[0][3][1];
  lock_f[0][3][2] = lock_i[0][3][2];
  lock_f[0][3][3] = lock_i[0][3][3];
  lock_f[0][3][4] = lock_i[0][3][4];
  lock_f[0][3][5] = lock_i[0][3][5];
  lock_f[0][3][6] = lock_i[0][3][6];
  lock_f[0][3][7] = lock_i[0][3][7];
  lock_f[0][3][8] = lock_i[0][3][8];
  lock_f[0][3][9] = lock_i[0][3][9];
  lock_f[0][4][0] = lock_i[0][4][0];
  lock_f[0][4][1] = lock_i[0][4][1];
  lock_f[0][4][2] = lock_i[0][4][2];
  lock_f[0][4][3] = lock_i[0][4][3];
  lock_f[0][4][4] = lock_i[0][4][4];
  lock_f[0][4][5] = lock_i[0][4][5];
  lock_f[0][4][6] = lock_i[0][4][6];
  lock_f[0][4][7] = lock_i[0][4][7];
  lock_f[0][4][8] = lock_i[0][4][8];
  lock_f[0][4][9] = lock_i[0][4][9];
  lock_f[0][5][0] = lock_i[0][5][0];
  lock_f[0][5][1] = lock_i[0][5][1];
  lock_f[0][5][2] = lock_i[0][5][2];
  lock_f[0][5][3] = lock_i[0][5][3];
  lock_f[0][5][4] = lock_i[0][5][4];
  lock_f[0][5][5] = lock_i[0][5][5];
  lock_f[0][5][6] = lock_i[0][5][6];
  lock_f[0][5][7] = lock_i[0][5][7];
  lock_f[0][5][8] = lock_i[0][5][8];
  lock_f[0][5][9] = lock_i[0][5][9];
  lock_f[0][6][0] = lock_i[0][6][0];
  lock_f[0][6][1] = lock_i[0][6][1];
  lock_f[0][6][2] = lock_i[0][6][2];
  lock_f[0][6][3] = lock_i[0][6][3];
  lock_f[0][6][4] = lock_i[0][6][4];
  lock_f[0][6][5] = lock_i[0][6][5];
  lock_f[0][6][6] = lock_i[0][6][6];
  lock_f[0][6][7] = lock_i[0][6][7];
  lock_f[0][6][8] = lock_i[0][6][8];
  lock_f[0][6][9] = lock_i[0][6][9];
  lock_f[0][7][0] = lock_i[0][7][0];
  lock_f[0][7][1] = lock_i[0][7][1];
  lock_f[0][7][2] = lock_i[0][7][2];
  lock_f[0][7][3] = lock_i[0][7][3];
  lock_f[0][7][4] = lock_i[0][7][4];
  lock_f[0][7][5] = lock_i[0][7][5];
  lock_f[0][7][6] = lock_i[0][7][6];
  lock_f[0][7][7] = lock_i[0][7][7];
  lock_f[0][7][8] = lock_i[0][7][8];
  lock_f[0][7][9] = lock_i[0][7][9];
  lock_f[0][8][0] = lock_i[0][8][0];
  lock_f[0][8][1] = lock_i[0][8][1];
  lock_f[0][8][2] = lock_i[0][8][2];
  lock_f[0][8][3] = lock_i[0][8][3];
  lock_f[0][8][4] = lock_i[0][8][4];
  lock_f[0][8][5] = lock_i[0][8][5];
  lock_f[0][8][6] = lock_i[0][8][6];
  lock_f[0][8][7] = lock_i[0][8][7];
  lock_f[0][8][8] = lock_i[0][8][8];
  lock_f[0][8][9] = lock_i[0][8][9];
  lock_f[0][9][0] = lock_i[0][9][0];
  lock_f[0][9][1] = lock_i[0][9][1];
  lock_f[0][9][2] = lock_i[0][9][2];
  lock_f[0][9][3] = lock_i[0][9][3];
  lock_f[0][9][4] = lock_i[0][9][4];
  lock_f[0][9][5] = lock_i[0][9][5];
  lock_f[0][9][6] = lock_i[0][9][6];
  lock_f[0][9][7] = lock_i[0][9][7];
  lock_f[0][9][8] = lock_i[0][9][8];
  lock_f[0][9][9] = lock_i[0][9][9];
  lock_f[1][0][0] = lock_i[1][0][0];
  lock_f[1][0][1] = lock_i[1][0][1];
  lock_f[1][0][2] = lock_i[1][0][2];
  lock_f[1][0][3] = lock_i[1][0][3];
  lock_f[1][0][4] = lock_i[1][0][4];
  lock_f[1][0][5] = lock_i[1][0][5];
  lock_f[1][0][6] = lock_i[1][0][6];
  lock_f[1][0][7] = lock_i[1][0][7];
  lock_f[1][0][8] = lock_i[1][0][8];
  lock_f[1][0][9] = lock_i[1][0][9];
  lock_f[1][1][0] = lock_i[1][1][0];
  lock_f[1][1][1] = lock_i[1][1][1];
  lock_f[1][1][2] = lock_i[1][1][2];
  lock_f[1][1][3] = lock_i[1][1][3];
  lock_f[1][1][4] = lock_i[1][1][4];
  lock_f[1][1][5] = lock_i[1][1][5];
  lock_f[1][1][6] = lock_i[1][1][6];
  lock_f[1][1][7] = lock_i[1][1][7];
  lock_f[1][1][8] = lock_i[1][1][8];
  lock_f[1][1][9] = lock_i[1][1][9];
  lock_f[1][2][0] = lock_i[1][2][0];
  lock_f[1][2][1] = lock_i[1][2][1];
  lock_f[1][2][2] = lock_i[1][2][2];
  lock_f[1][2][3] = lock_i[1][2][3];
  lock_f[1][2][4] = lock_i[1][2][4];
  lock_f[1][2][5] = lock_i[1][2][5];
  lock_f[1][2][6] = lock_i[1][2][6];
  lock_f[1][2][7] = lock_i[1][2][7];
  lock_f[1][2][8] = lock_i[1][2][8];
  lock_f[1][2][9] = lock_i[1][2][9];
  lock_f[1][3][0] = lock_i[1][3][0];
  lock_f[1][3][1] = lock_i[1][3][1];
  lock_f[1][3][2] = lock_i[1][3][2];
  lock_f[1][3][3] = lock_i[1][3][3];
  lock_f[1][3][4] = lock_i[1][3][4];
  lock_f[1][3][5] = lock_i[1][3][5];
  lock_f[1][3][6] = lock_i[1][3][6];
  lock_f[1][3][7] = lock_i[1][3][7];
  lock_f[1][3][8] = lock_i[1][3][8];
  lock_f[1][3][9] = lock_i[1][3][9];
  lock_f[1][4][0] = lock_i[1][4][0];
  lock_f[1][4][1] = lock_i[1][4][1];
  lock_f[1][4][2] = lock_i[1][4][2];
  lock_f[1][4][3] = lock_i[1][4][3];
  lock_f[1][4][4] = lock_i[1][4][4];
  lock_f[1][4][5] = lock_i[1][4][5];
  lock_f[1][4][6] = lock_i[1][4][6];
  lock_f[1][4][7] = lock_i[1][4][7];
  lock_f[1][4][8] = lock_i[1][4][8];
  lock_f[1][4][9] = lock_i[1][4][9];
  lock_f[1][5][0] = lock_i[1][5][0];
  lock_f[1][5][1] = lock_i[1][5][1];
  lock_f[1][5][2] = lock_i[1][5][2];
  lock_f[1][5][3] = lock_i[1][5][3];
  lock_f[1][5][4] = lock_i[1][5][4];
  lock_f[1][5][5] = lock_i[1][5][5];
  lock_f[1][5][6] = lock_i[1][5][6];
  lock_f[1][5][7] = lock_i[1][5][7];
  lock_f[1][5][8] = lock_i[1][5][8];
  lock_f[1][5][9] = lock_i[1][5][9];
  lock_f[1][6][0] = lock_i[1][6][0];
  lock_f[1][6][1] = lock_i[1][6][1];
  lock_f[1][6][2] = lock_i[1][6][2];
  lock_f[1][6][3] = lock_i[1][6][3];
  lock_f[1][6][4] = lock_i[1][6][4];
  lock_f[1][6][5] = lock_i[1][6][5];
  lock_f[1][6][6] = lock_i[1][6][6];
  lock_f[1][6][7] = lock_i[1][6][7];
  lock_f[1][6][8] = lock_i[1][6][8];
  lock_f[1][6][9] = lock_i[1][6][9];
  lock_f[1][7][0] = lock_i[1][7][0];
  lock_f[1][7][1] = lock_i[1][7][1];
  lock_f[1][7][2] = lock_i[1][7][2];
  lock_f[1][7][3] = lock_i[1][7][3];
  lock_f[1][7][4] = lock_i[1][7][4];
  lock_f[1][7][5] = lock_i[1][7][5];
  lock_f[1][7][6] = lock_i[1][7][6];
  lock_f[1][7][7] = lock_i[1][7][7];
  lock_f[1][7][8] = lock_i[1][7][8];
  lock_f[1][7][9] = lock_i[1][7][9];
  lock_f[1][8][0] = lock_i[1][8][0];
  lock_f[1][8][1] = lock_i[1][8][1];
  lock_f[1][8][2] = lock_i[1][8][2];
  lock_f[1][8][3] = lock_i[1][8][3];
  lock_f[1][8][4] = lock_i[1][8][4];
  lock_f[1][8][5] = lock_i[1][8][5];
  lock_f[1][8][6] = lock_i[1][8][6];
  lock_f[1][8][7] = lock_i[1][8][7];
  lock_f[1][8][8] = lock_i[1][8][8];
  lock_f[1][8][9] = lock_i[1][8][9];
  lock_f[1][9][0] = lock_i[1][9][0];
  lock_f[1][9][1] = lock_i[1][9][1];
  lock_f[1][9][2] = lock_i[1][9][2];
  lock_f[1][9][3] = lock_i[1][9][3];
  lock_f[1][9][4] = lock_i[1][9][4];
  lock_f[1][9][5] = lock_i[1][9][5];
  lock_f[1][9][6] = lock_i[1][9][6];
  lock_f[1][9][7] = lock_i[1][9][7];
  lock_f[1][9][8] = lock_i[1][9][8];
  lock_f[1][9][9] = lock_i[1][9][9];
}

void uav__COLLISION_AVOIDANCE_0_fwd()
{
  print_state(X,Y,0,x[__id_0(0)],y[__id_0(0)],xf[__id_0(0)],yf[__id_0(0)]);
  if ((state[__id_0(0)])==(NEXT))
  {
    if (((x[__id_0(0)])==(xf[__id_0(0)]))&&((y[__id_0(0)])==(yf[__id_0(0)])))
      return;
    uav__NEXT_XY_0_fwd();
    state[__id_0(0)] = REQUEST;
  }
  else
    if ((state[__id_0(0)])==(REQUEST))
    {
      lock_f[__id_0(0)][xp[__id_0(0)]][yp[__id_0(0)]] = 1;
      state[__id_0(0)] = WAITING;
    }
    else
      if ((state[__id_0(0)])==(WAITING))
      {
        if ((lock_i[__id_0(1)][xp[__id_0(0)]][yp[__id_0(0)]])!=(0))
          return;
        state[__id_0(0)] = MOVE;
      }
      else
        if ((state[__id_0(0)])==(MOVE))
        {
          if (GRID_MOVE(xp[__id_0(0)],yp[__id_0(0)],1))
            return;
          lock_f[__id_0(0)][x[__id_0(0)]][y[__id_0(0)]] = 0;
          x[__id_0(0)] = xp[__id_0(0)];
          y[__id_0(0)] = yp[__id_0(0)];
          state[__id_0(0)] = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_1_fwd()
{
  print_state(X,Y,1,x[__id_1(1)],y[__id_1(1)],xf[__id_1(1)],yf[__id_1(1)]);
  if ((state[__id_1(1)])==(NEXT))
  {
    if (((x[__id_1(1)])==(xf[__id_1(1)]))&&((y[__id_1(1)])==(yf[__id_1(1)])))
      return;
    uav__NEXT_XY_1_fwd();
    state[__id_1(1)] = REQUEST;
  }
  else
    if ((state[__id_1(1)])==(REQUEST))
    {
      lock_f[__id_1(1)][xp[__id_1(1)]][yp[__id_1(1)]] = 1;
      state[__id_1(1)] = WAITING;
    }
    else
      if ((state[__id_1(1)])==(WAITING))
      {
        if (0)
          return;
        state[__id_1(1)] = MOVE;
      }
      else
        if ((state[__id_1(1)])==(MOVE))
        {
          if (GRID_MOVE(xp[__id_1(1)],yp[__id_1(1)],1))
            return;
          lock_f[__id_1(1)][x[__id_1(1)]][y[__id_1(1)]] = 0;
          x[__id_1(1)] = xp[__id_1(1)];
          y[__id_1(1)] = yp[__id_1(1)];
          state[__id_1(1)] = NEXT;
        }
}

void uav__NEXT_XY_0_fwd()
{
  xp[__id_0(0)] = x[__id_0(0)];
  yp[__id_0(0)] = y[__id_0(0)];
  if ((x[__id_0(0)])<(xf[__id_0(0)]))
    xp[__id_0(0)] = (x[__id_0(0)])+(1);
  else
    if ((x[__id_0(0)])>(xf[__id_0(0)]))
      xp[__id_0(0)] = (x[__id_0(0)])-(1);
    else
      if ((y[__id_0(0)])<(yf[__id_0(0)]))
        yp[__id_0(0)] = (y[__id_0(0)])+(1);
      else
        yp[__id_0(0)] = (y[__id_0(0)])-(1);
}

void uav__NEXT_XY_1_fwd()
{
  xp[__id_1(1)] = x[__id_1(1)];
  yp[__id_1(1)] = y[__id_1(1)];
  if ((x[__id_1(1)])<(xf[__id_1(1)]))
    xp[__id_1(1)] = (x[__id_1(1)])+(1);
  else
    if ((x[__id_1(1)])>(xf[__id_1(1)]))
      xp[__id_1(1)] = (x[__id_1(1)])-(1);
    else
      if ((y[__id_1(1)])<(yf[__id_1(1)]))
        yp[__id_1(1)] = (y[__id_1(1)])+(1);
      else
        yp[__id_1(1)] = (y[__id_1(1)])-(1);
}


//---------------------------------------------------------
//-- end of file
//---------------------------------------------------------
