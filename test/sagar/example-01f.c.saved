//-- DMPLC Version: 0.2
//-- DMPLC Command Line: dmplc --roles uav:Uav1:1:uav:Uav2:1 --cube-grid 5 -r 5 -s -rp NoCollision -o example-01.c example-01.dmpl

/************* external functions ***********/

/************* constants ***********/
#define MOVE 4
#define NEXT 1
#define REQUEST 2
#define WAITING 3
#define X 5
#define Y 5
#define Z 5
#define false 0
#define true 1

/************* global variables ***********/
int l1_0;
int l1_1;
int l2_1;
int l3_0;
_Bool lock_f_0[5][5];
_Bool lock_f_1[5][5];
_Bool lock_i_0[5][5];
_Bool lock_i_1[5][5];
unsigned char state_0;
unsigned char state_1;
unsigned char x_0;
unsigned char x_1;
unsigned char xf_0;
unsigned char xf_1;
unsigned char xp_0;
unsigned char xp_1;
unsigned char y_0;
unsigned char y_1;
unsigned char yf_0;
unsigned char yf_1;
unsigned char yp_0;
unsigned char yp_1;

/************* function declarations ***********/
void __INIT();
int __INIT_foo_assume_0();
void __INIT_foo_init_1();
void __INIT_l1_0();
void __INIT_l1_1();
void __INIT_l2_1();
void __INIT_l3_0();
void __INIT_lock_0();
void __INIT_lock_1();
void __INIT_state_0();
void __INIT_state_1();
int __INIT_x_0();
int __INIT_x_1();
int __INIT_xf_0();
int __INIT_xf_1();
void __INIT_xp_0();
void __INIT_xp_1();
int __INIT_y_0();
int __INIT_y_1();
int __INIT_yf_0();
int __INIT_yf_1();
void __INIT_yp_0();
void __INIT_yp_1();
_Bool __SAFETY_NoCollision_bwd();
_Bool __SAFETY_NoCollision_fwd();
void __SAFETY_bwd();
void __SAFETY_fwd();
int main();
extern int my_sleep(int seconds);
unsigned char nondet_x_0();
unsigned char nondet_x_1();
unsigned char nondet_xf_0();
unsigned char nondet_xf_1();
unsigned char nondet_y_0();
unsigned char nondet_y_1();
unsigned char nondet_yf_0();
unsigned char nondet_yf_1();
extern void print_int(int i);
extern void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);
void round_bwd_copier();
void round_fwd_copier();
void uav__COLLISION_AVOIDANCE_0_bwd();
void uav__COLLISION_AVOIDANCE_0_fwd();
void uav__COLLISION_AVOIDANCE_1_bwd();
void uav__COLLISION_AVOIDANCE_1_fwd();
void uav__NEXT_XY_0_bwd();
void uav__NEXT_XY_0_fwd();
void uav__NEXT_XY_1_bwd();
void uav__NEXT_XY_1_fwd();

/************* function definitions ***********/
void __INIT()
{
  __INIT_l1_0();
  __INIT_l3_0();
  __CPROVER_assume(__INIT_x_0());
  __CPROVER_assume(__INIT_foo_assume_0());
  __CPROVER_assume(__INIT_y_0());
  __INIT_lock_0();
  __INIT_state_0();
  __CPROVER_assume(__INIT_xf_0());
  __INIT_xp_0();
  __CPROVER_assume(__INIT_yf_0());
  __INIT_yp_0();
  __INIT_l2_1();
  __INIT_l1_1();
  __CPROVER_assume(__INIT_x_1());
  __INIT_foo_init_1();
  __CPROVER_assume(__INIT_y_1());
  __INIT_lock_1();
  __INIT_state_1();
  __CPROVER_assume(__INIT_xf_1());
  __INIT_xp_1();
  __CPROVER_assume(__INIT_yf_1());
  __INIT_yp_1();
  __CPROVER_assume(__SAFETY_NoCollision_fwd());
}

int __INIT_foo_assume_0()
{
  return ((l3_0)<(20))&&((l1_0)==(l1_0));
}

void __INIT_foo_init_1()
{
  l2_1 = (l1_1)+(x_1);
}

void __INIT_l1_0()
{
}

void __INIT_l1_1()
{
  l1_1 = l2_1;
}

void __INIT_l2_1()
{
}

void __INIT_l3_0()
{
}

void __INIT_lock_0()
{
  lock_i_0[x_0][y_0] = 1;
}

void __INIT_lock_1()
{
  lock_i_1[x_1][y_1] = 1;
}

void __INIT_state_0()
{
  state_0 = NEXT;
}

void __INIT_state_1()
{
  state_1 = NEXT;
}

int __INIT_x_0()
{
  x_0 = nondet_x_0();
  return ((0)<=(x_0))&&((x_0)<(X));
}

int __INIT_x_1()
{
  x_1 = nondet_x_1();
  return ((0)<=(x_1))&&((x_1)<(X));
}

int __INIT_xf_0()
{
  xf_0 = nondet_xf_0();
  return ((0)<=(xf_0))&&((xf_0)<(X));
}

int __INIT_xf_1()
{
  xf_1 = nondet_xf_1();
  return ((0)<=(xf_1))&&((xf_1)<(X));
}

void __INIT_xp_0()
{
  xp_0 = x_0;
}

void __INIT_xp_1()
{
  xp_1 = x_1;
}

int __INIT_y_0()
{
  y_0 = nondet_y_0();
  return ((0)<=(y_0))&&((y_0)<(Y));
}

int __INIT_y_1()
{
  y_1 = nondet_y_1();
  return ((0)<=(y_1))&&((y_1)<(Y));
}

int __INIT_yf_0()
{
  yf_0 = nondet_yf_0();
  return ((0)<=(yf_0))&&((yf_0)<(Y));
}

int __INIT_yf_1()
{
  yf_1 = nondet_yf_1();
  return ((0)<=(yf_1))&&((yf_1)<(Y));
}

void __INIT_yp_0()
{
  yp_0 = y_0;
}

void __INIT_yp_1()
{
  yp_1 = y_1;
}

_Bool __SAFETY_NoCollision_bwd()
{
  {
    {
      if (((x_0)==(x_1))&&((y_0)==(y_1)))
        return false;
    }
  }
  {
    {
      if (!(((state_0)>=(NEXT))&&((state_0)<=(MOVE))))
        return false;
      if (!(((x_0)>=(0))&&((x_0)<(X))))
        return false;
      if (!(((y_0)>=(0))&&((y_0)<(Y))))
        return false;
      if (!(((xf_0)>=(0))&&((xf_0)<(X))))
        return false;
      if (!(((yf_0)>=(0))&&((yf_0)<(Y))))
        return false;
      if (!(((xp_0)>=(0))&&((xp_0)<(X))))
        return false;
      if (!(((yp_0)>=(0))&&((yp_0)<(Y))))
        return false;
      if (!((((state_0)==(NEXT))||((x_0)!=(xp_0)))||((y_0)!=(yp_0))))
        return false;
      if (!((((((state_0)!=(NEXT))&&((state_0)!=(REQUEST)))&&((state_0)!=(WAITING)))&&((state_0)!=(MOVE)))||(lock_f_0[x_0][y_0])))
        return false;
      if (!(((((state_0)!=(NEXT))&&((state_0)!=(WAITING)))&&((state_0)!=(MOVE)))||((lock_f_0[x_0][y_0])&&(lock_f_0[xp_0][yp_0]))))
        return false;
      if (!(((state_0)==(NEXT))||((((x_0)==((xp_0)-(1)))||((x_0)==((xp_0)+(1))))^(((y_0)==((yp_0)-(1)))||((y_0)==((yp_0)+(1)))))))
        return false;
    }
    {
      if (!(((state_1)>=(NEXT))&&((state_1)<=(MOVE))))
        return false;
      if (!(((x_1)>=(0))&&((x_1)<(X))))
        return false;
      if (!(((y_1)>=(0))&&((y_1)<(Y))))
        return false;
      if (!(((xf_1)>=(0))&&((xf_1)<(X))))
        return false;
      if (!(((yf_1)>=(0))&&((yf_1)<(Y))))
        return false;
      if (!(((xp_1)>=(0))&&((xp_1)<(X))))
        return false;
      if (!(((yp_1)>=(0))&&((yp_1)<(Y))))
        return false;
      if (!((((state_1)==(NEXT))||((x_1)!=(xp_1)))||((y_1)!=(yp_1))))
        return false;
      if (!((((((state_1)!=(NEXT))&&((state_1)!=(REQUEST)))&&((state_1)!=(WAITING)))&&((state_1)!=(MOVE)))||(lock_f_1[x_1][y_1])))
        return false;
      if (!(((((state_1)!=(NEXT))&&((state_1)!=(WAITING)))&&((state_1)!=(MOVE)))||((lock_f_1[x_1][y_1])&&(lock_f_1[xp_1][yp_1]))))
        return false;
      if (!(((state_1)==(NEXT))||((((x_1)==((xp_1)-(1)))||((x_1)==((xp_1)+(1))))^(((y_1)==((yp_1)-(1)))||((y_1)==((yp_1)+(1)))))))
        return false;
    }
  }
  {
    {
      if (!(((((((state_0)!=(NEXT))&&((state_0)!=(MOVE)))||((state_1)!=(WAITING)))||((0)>=(1)))||((xp_0)!=(xp_1)))||((yp_0)!=(yp_1))))
        return false;
      if (!((((state_0)!=(MOVE))||((state_1)!=(MOVE)))||((((((xp_0)!=(xp_1))||((yp_0)!=(yp_1)))&&(((xp_0)!=(x_1))||((yp_0)!=(y_1))))&&(((x_0)!=(xp_1))||((y_0)!=(yp_1))))&&(((x_0)!=(x_1))||((y_0)!=(y_1))))))
        return false;
      if (!(((((state_1)!=(WAITING))||((0)>=(1)))||((x_0)!=(xp_1)))||((y_0)!=(yp_1))))
        return false;
      if (!(((((state_1)!=(MOVE))||((x_0)!=(xp_1)))||((y_0)!=(yp_1)))&&((((state_0)!=(4))||((xp_0)!=(x_1)))||((yp_0)!=(y_1)))))
        return false;
      if (!(((x_0)!=(x_1))||((y_0)!=(y_1))))
        return false;
    }
  }
  return true;
}

_Bool __SAFETY_NoCollision_fwd()
{
  {
    {
      if (((x_0)==(x_1))&&((y_0)==(y_1)))
        return false;
    }
  }
  {
    {
      if (!(((state_0)>=(NEXT))&&((state_0)<=(MOVE))))
        return false;
      if (!(((x_0)>=(0))&&((x_0)<(X))))
        return false;
      if (!(((y_0)>=(0))&&((y_0)<(Y))))
        return false;
      if (!(((xf_0)>=(0))&&((xf_0)<(X))))
        return false;
      if (!(((yf_0)>=(0))&&((yf_0)<(Y))))
        return false;
      if (!(((xp_0)>=(0))&&((xp_0)<(X))))
        return false;
      if (!(((yp_0)>=(0))&&((yp_0)<(Y))))
        return false;
      if (!((((state_0)==(NEXT))||((x_0)!=(xp_0)))||((y_0)!=(yp_0))))
        return false;
      if (!((((((state_0)!=(NEXT))&&((state_0)!=(REQUEST)))&&((state_0)!=(WAITING)))&&((state_0)!=(MOVE)))||(lock_i_0[x_0][y_0])))
        return false;
      if (!(((((state_0)!=(NEXT))&&((state_0)!=(WAITING)))&&((state_0)!=(MOVE)))||((lock_i_0[x_0][y_0])&&(lock_i_0[xp_0][yp_0]))))
        return false;
      if (!(((state_0)==(NEXT))||((((x_0)==((xp_0)-(1)))||((x_0)==((xp_0)+(1))))^(((y_0)==((yp_0)-(1)))||((y_0)==((yp_0)+(1)))))))
        return false;
    }
    {
      if (!(((state_1)>=(NEXT))&&((state_1)<=(MOVE))))
        return false;
      if (!(((x_1)>=(0))&&((x_1)<(X))))
        return false;
      if (!(((y_1)>=(0))&&((y_1)<(Y))))
        return false;
      if (!(((xf_1)>=(0))&&((xf_1)<(X))))
        return false;
      if (!(((yf_1)>=(0))&&((yf_1)<(Y))))
        return false;
      if (!(((xp_1)>=(0))&&((xp_1)<(X))))
        return false;
      if (!(((yp_1)>=(0))&&((yp_1)<(Y))))
        return false;
      if (!((((state_1)==(NEXT))||((x_1)!=(xp_1)))||((y_1)!=(yp_1))))
        return false;
      if (!((((((state_1)!=(NEXT))&&((state_1)!=(REQUEST)))&&((state_1)!=(WAITING)))&&((state_1)!=(MOVE)))||(lock_i_1[x_1][y_1])))
        return false;
      if (!(((((state_1)!=(NEXT))&&((state_1)!=(WAITING)))&&((state_1)!=(MOVE)))||((lock_i_1[x_1][y_1])&&(lock_i_1[xp_1][yp_1]))))
        return false;
      if (!(((state_1)==(NEXT))||((((x_1)==((xp_1)-(1)))||((x_1)==((xp_1)+(1))))^(((y_1)==((yp_1)-(1)))||((y_1)==((yp_1)+(1)))))))
        return false;
    }
  }
  {
    {
      if (!(((((((state_0)!=(NEXT))&&((state_0)!=(MOVE)))||((state_1)!=(WAITING)))||((0)>=(1)))||((xp_0)!=(xp_1)))||((yp_0)!=(yp_1))))
        return false;
      if (!((((state_0)!=(MOVE))||((state_1)!=(MOVE)))||((((((xp_0)!=(xp_1))||((yp_0)!=(yp_1)))&&(((xp_0)!=(x_1))||((yp_0)!=(y_1))))&&(((x_0)!=(xp_1))||((y_0)!=(yp_1))))&&(((x_0)!=(x_1))||((y_0)!=(y_1))))))
        return false;
      if (!(((((state_1)!=(WAITING))||((0)>=(1)))||((x_0)!=(xp_1)))||((y_0)!=(yp_1))))
        return false;
      if (!(((((state_1)!=(MOVE))||((x_0)!=(xp_1)))||((y_0)!=(yp_1)))&&((((state_0)!=(4))||((xp_0)!=(x_1)))||((yp_0)!=(y_1)))))
        return false;
      if (!(((x_0)!=(x_1))||((y_0)!=(y_1))))
        return false;
    }
  }
  return true;
}

void __SAFETY_bwd()
{
  assert(__SAFETY_NoCollision_bwd());
}

void __SAFETY_fwd()
{
  assert(__SAFETY_NoCollision_fwd());
}

int main()
{
  __INIT();
  __SAFETY_fwd();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  __SAFETY_bwd();
  round_bwd_copier();
  uav__COLLISION_AVOIDANCE_0_bwd();
  uav__COLLISION_AVOIDANCE_1_bwd();
  __SAFETY_fwd();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  __SAFETY_bwd();
  round_bwd_copier();
  uav__COLLISION_AVOIDANCE_0_bwd();
  uav__COLLISION_AVOIDANCE_1_bwd();
  __SAFETY_fwd();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  __SAFETY_bwd();
}

int my_sleep(int seconds);
unsigned char nondet_x_0();
unsigned char nondet_x_1();
unsigned char nondet_xf_0();
unsigned char nondet_xf_1();
unsigned char nondet_y_0();
unsigned char nondet_y_1();
unsigned char nondet_yf_0();
unsigned char nondet_yf_1();
void print_int(int i);
void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);
void round_bwd_copier()
{
  lock_i_0[0][0] = lock_f_0[0][0];
  lock_i_0[0][1] = lock_f_0[0][1];
  lock_i_0[0][2] = lock_f_0[0][2];
  lock_i_0[0][3] = lock_f_0[0][3];
  lock_i_0[0][4] = lock_f_0[0][4];
  lock_i_0[1][0] = lock_f_0[1][0];
  lock_i_0[1][1] = lock_f_0[1][1];
  lock_i_0[1][2] = lock_f_0[1][2];
  lock_i_0[1][3] = lock_f_0[1][3];
  lock_i_0[1][4] = lock_f_0[1][4];
  lock_i_0[2][0] = lock_f_0[2][0];
  lock_i_0[2][1] = lock_f_0[2][1];
  lock_i_0[2][2] = lock_f_0[2][2];
  lock_i_0[2][3] = lock_f_0[2][3];
  lock_i_0[2][4] = lock_f_0[2][4];
  lock_i_0[3][0] = lock_f_0[3][0];
  lock_i_0[3][1] = lock_f_0[3][1];
  lock_i_0[3][2] = lock_f_0[3][2];
  lock_i_0[3][3] = lock_f_0[3][3];
  lock_i_0[3][4] = lock_f_0[3][4];
  lock_i_0[4][0] = lock_f_0[4][0];
  lock_i_0[4][1] = lock_f_0[4][1];
  lock_i_0[4][2] = lock_f_0[4][2];
  lock_i_0[4][3] = lock_f_0[4][3];
  lock_i_0[4][4] = lock_f_0[4][4];
  lock_i_1[0][0] = lock_f_1[0][0];
  lock_i_1[0][1] = lock_f_1[0][1];
  lock_i_1[0][2] = lock_f_1[0][2];
  lock_i_1[0][3] = lock_f_1[0][3];
  lock_i_1[0][4] = lock_f_1[0][4];
  lock_i_1[1][0] = lock_f_1[1][0];
  lock_i_1[1][1] = lock_f_1[1][1];
  lock_i_1[1][2] = lock_f_1[1][2];
  lock_i_1[1][3] = lock_f_1[1][3];
  lock_i_1[1][4] = lock_f_1[1][4];
  lock_i_1[2][0] = lock_f_1[2][0];
  lock_i_1[2][1] = lock_f_1[2][1];
  lock_i_1[2][2] = lock_f_1[2][2];
  lock_i_1[2][3] = lock_f_1[2][3];
  lock_i_1[2][4] = lock_f_1[2][4];
  lock_i_1[3][0] = lock_f_1[3][0];
  lock_i_1[3][1] = lock_f_1[3][1];
  lock_i_1[3][2] = lock_f_1[3][2];
  lock_i_1[3][3] = lock_f_1[3][3];
  lock_i_1[3][4] = lock_f_1[3][4];
  lock_i_1[4][0] = lock_f_1[4][0];
  lock_i_1[4][1] = lock_f_1[4][1];
  lock_i_1[4][2] = lock_f_1[4][2];
  lock_i_1[4][3] = lock_f_1[4][3];
  lock_i_1[4][4] = lock_f_1[4][4];
}

void round_fwd_copier()
{
  lock_f_0[0][0] = lock_i_0[0][0];
  lock_f_0[0][1] = lock_i_0[0][1];
  lock_f_0[0][2] = lock_i_0[0][2];
  lock_f_0[0][3] = lock_i_0[0][3];
  lock_f_0[0][4] = lock_i_0[0][4];
  lock_f_0[1][0] = lock_i_0[1][0];
  lock_f_0[1][1] = lock_i_0[1][1];
  lock_f_0[1][2] = lock_i_0[1][2];
  lock_f_0[1][3] = lock_i_0[1][3];
  lock_f_0[1][4] = lock_i_0[1][4];
  lock_f_0[2][0] = lock_i_0[2][0];
  lock_f_0[2][1] = lock_i_0[2][1];
  lock_f_0[2][2] = lock_i_0[2][2];
  lock_f_0[2][3] = lock_i_0[2][3];
  lock_f_0[2][4] = lock_i_0[2][4];
  lock_f_0[3][0] = lock_i_0[3][0];
  lock_f_0[3][1] = lock_i_0[3][1];
  lock_f_0[3][2] = lock_i_0[3][2];
  lock_f_0[3][3] = lock_i_0[3][3];
  lock_f_0[3][4] = lock_i_0[3][4];
  lock_f_0[4][0] = lock_i_0[4][0];
  lock_f_0[4][1] = lock_i_0[4][1];
  lock_f_0[4][2] = lock_i_0[4][2];
  lock_f_0[4][3] = lock_i_0[4][3];
  lock_f_0[4][4] = lock_i_0[4][4];
  lock_f_1[0][0] = lock_i_1[0][0];
  lock_f_1[0][1] = lock_i_1[0][1];
  lock_f_1[0][2] = lock_i_1[0][2];
  lock_f_1[0][3] = lock_i_1[0][3];
  lock_f_1[0][4] = lock_i_1[0][4];
  lock_f_1[1][0] = lock_i_1[1][0];
  lock_f_1[1][1] = lock_i_1[1][1];
  lock_f_1[1][2] = lock_i_1[1][2];
  lock_f_1[1][3] = lock_i_1[1][3];
  lock_f_1[1][4] = lock_i_1[1][4];
  lock_f_1[2][0] = lock_i_1[2][0];
  lock_f_1[2][1] = lock_i_1[2][1];
  lock_f_1[2][2] = lock_i_1[2][2];
  lock_f_1[2][3] = lock_i_1[2][3];
  lock_f_1[2][4] = lock_i_1[2][4];
  lock_f_1[3][0] = lock_i_1[3][0];
  lock_f_1[3][1] = lock_i_1[3][1];
  lock_f_1[3][2] = lock_i_1[3][2];
  lock_f_1[3][3] = lock_i_1[3][3];
  lock_f_1[3][4] = lock_i_1[3][4];
  lock_f_1[4][0] = lock_i_1[4][0];
  lock_f_1[4][1] = lock_i_1[4][1];
  lock_f_1[4][2] = lock_i_1[4][2];
  lock_f_1[4][3] = lock_i_1[4][3];
  lock_f_1[4][4] = lock_i_1[4][4];
}

void uav__COLLISION_AVOIDANCE_0_bwd()
{
  print_state(X,Y,0,x_0,y_0,xf_0,yf_0);
  if ((state_0)==(NEXT))
  {
    if (((x_0)==(xf_0))&&((y_0)==(yf_0)))
      return;
    uav__NEXT_XY_0_bwd();
    state_0 = REQUEST;
  }
  else
    if ((state_0)==(REQUEST))
    {
      if (0)
        return;
      lock_i_0[xp_0][yp_0] = 1;
      state_0 = WAITING;
    }
    else
      if ((state_0)==(WAITING))
      {
        if ((lock_f_1[xp_0][yp_0])!=(0))
          return;
        state_0 = MOVE;
      }
      else
        if ((state_0)==(MOVE))
        {
          if (GRID_MOVE(xp_0,yp_0,1))
            return;
          lock_i_0[x_0][y_0] = 0;
          x_0 = xp_0;
          y_0 = yp_0;
          state_0 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_0_fwd()
{
  print_state(X,Y,0,x_0,y_0,xf_0,yf_0);
  if ((state_0)==(NEXT))
  {
    if (((x_0)==(xf_0))&&((y_0)==(yf_0)))
      return;
    uav__NEXT_XY_0_fwd();
    state_0 = REQUEST;
  }
  else
    if ((state_0)==(REQUEST))
    {
      if (0)
        return;
      lock_f_0[xp_0][yp_0] = 1;
      state_0 = WAITING;
    }
    else
      if ((state_0)==(WAITING))
      {
        if ((lock_i_1[xp_0][yp_0])!=(0))
          return;
        state_0 = MOVE;
      }
      else
        if ((state_0)==(MOVE))
        {
          if (GRID_MOVE(xp_0,yp_0,1))
            return;
          lock_f_0[x_0][y_0] = 0;
          x_0 = xp_0;
          y_0 = yp_0;
          state_0 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_1_bwd()
{
  print_state(X,Y,1,x_1,y_1,xf_1,yf_1);
  if ((state_1)==(NEXT))
  {
    if (((x_1)==(xf_1))&&((y_1)==(yf_1)))
      return;
    uav__NEXT_XY_1_bwd();
    state_1 = REQUEST;
  }
  else
    if ((state_1)==(REQUEST))
    {
      if ((lock_f_0[xp_1][yp_1])!=(0))
        return;
      lock_i_1[xp_1][yp_1] = 1;
      state_1 = WAITING;
    }
    else
      if ((state_1)==(WAITING))
      {
        if (0)
          return;
        state_1 = MOVE;
      }
      else
        if ((state_1)==(MOVE))
        {
          if (GRID_MOVE(xp_1,yp_1,1))
            return;
          lock_i_1[x_1][y_1] = 0;
          x_1 = xp_1;
          y_1 = yp_1;
          state_1 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_1_fwd()
{
  print_state(X,Y,1,x_1,y_1,xf_1,yf_1);
  if ((state_1)==(NEXT))
  {
    if (((x_1)==(xf_1))&&((y_1)==(yf_1)))
      return;
    uav__NEXT_XY_1_fwd();
    state_1 = REQUEST;
  }
  else
    if ((state_1)==(REQUEST))
    {
      if ((lock_i_0[xp_1][yp_1])!=(0))
        return;
      lock_f_1[xp_1][yp_1] = 1;
      state_1 = WAITING;
    }
    else
      if ((state_1)==(WAITING))
      {
        if (0)
          return;
        state_1 = MOVE;
      }
      else
        if ((state_1)==(MOVE))
        {
          if (GRID_MOVE(xp_1,yp_1,1))
            return;
          lock_f_1[x_1][y_1] = 0;
          x_1 = xp_1;
          y_1 = yp_1;
          state_1 = NEXT;
        }
}

void uav__NEXT_XY_0_bwd()
{
  {
  }
  xp_0 = x_0;
  yp_0 = y_0;
  if ((x_0)<(xf_0))
    xp_0 = (x_0)+(1);
  else
    if ((x_0)>(xf_0))
      xp_0 = (x_0)-(1);
    else
      if ((y_0)<(yf_0))
        yp_0 = (y_0)+(1);
      else
        yp_0 = (y_0)-(1);
}

void uav__NEXT_XY_0_fwd()
{
  {
  }
  xp_0 = x_0;
  yp_0 = y_0;
  if ((x_0)<(xf_0))
    xp_0 = (x_0)+(1);
  else
    if ((x_0)>(xf_0))
      xp_0 = (x_0)-(1);
    else
      if ((y_0)<(yf_0))
        yp_0 = (y_0)+(1);
      else
        yp_0 = (y_0)-(1);
}

void uav__NEXT_XY_1_bwd()
{
  l2_1 = l1_1;
  xp_1 = x_1;
  yp_1 = y_1;
  if ((x_1)<(xf_1))
    xp_1 = (x_1)+(1);
  else
    if ((x_1)>(xf_1))
      xp_1 = (x_1)-(1);
    else
      if ((y_1)<(yf_1))
        yp_1 = (y_1)+(1);
      else
        yp_1 = (y_1)-(1);
}

void uav__NEXT_XY_1_fwd()
{
  l2_1 = l1_1;
  xp_1 = x_1;
  yp_1 = y_1;
  if ((x_1)<(xf_1))
    xp_1 = (x_1)+(1);
  else
    if ((x_1)>(xf_1))
      xp_1 = (x_1)-(1);
    else
      if ((y_1)<(yf_1))
        yp_1 = (y_1)+(1);
      else
        yp_1 = (y_1)-(1);
}


//---------------------------------------------------------
//-- end of file
//---------------------------------------------------------
