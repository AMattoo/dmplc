//-- DMPLC Version: 0.2
//-- DMPLC Command Line: dmplc --cube-grid 10 --roles uav:Uav1:2:uav:Uav2:1 -r 5 -s -rp NoCollision -o test-example-01c.c test-example-01c.dmpl

/************* external functions ***********/

/************* constants ***********/
#define INITS 0
#define MOVE 4
#define NEXT 1
#define REQUEST 2
#define WAITING 3
#define X 10
#define Y 10
#define Z 10
#define false 0
#define true 1

/************* global variables ***********/
_Bool lock_f_0[10][10];
_Bool lock_f_1[10][10];
_Bool lock_f_2[10][10];
_Bool lock_i_0[10][10];
_Bool lock_i_1[10][10];
_Bool lock_i_2[10][10];
unsigned char state_0;
unsigned char state_1;
unsigned char state_2;
unsigned char x_0;
unsigned char x_1;
unsigned char x_2;
unsigned char xf_0;
unsigned char xf_1;
unsigned char xf_2;
unsigned char xp_0;
unsigned char xp_1;
unsigned char xp_2;
unsigned char y_0;
unsigned char y_1;
unsigned char y_2;
unsigned char yf_0;
unsigned char yf_1;
unsigned char yf_2;
unsigned char yp_0;
unsigned char yp_1;
unsigned char yp_2;

/************* function declarations ***********/
void __INIT();
void __INIT_lock_0();
void __INIT_lock_1();
void __INIT_lock_2();
void __INIT_state_0();
void __INIT_state_1();
void __INIT_state_2();
int __INIT_x_0();
int __INIT_x_1();
int __INIT_x_2();
int __INIT_xf_0();
int __INIT_xf_1();
int __INIT_xf_2();
void __INIT_xp_0();
void __INIT_xp_1();
void __INIT_xp_2();
int __INIT_y_0();
int __INIT_y_1();
int __INIT_y_2();
int __INIT_yf_0();
int __INIT_yf_1();
int __INIT_yf_2();
void __INIT_yp_0();
void __INIT_yp_1();
void __INIT_yp_2();
_Bool __SAFETY_NoCollision_bwd();
_Bool __SAFETY_NoCollision_fwd();
void __SAFETY_bwd();
void __SAFETY_fwd();
int main();
extern int my_sleep(int seconds);
unsigned char nondet_x();
unsigned char nondet_xf();
unsigned char nondet_y();
unsigned char nondet_yf();
extern void print_int(int i);
extern void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);
void round_bwd_copier();
void round_fwd_copier();
void uav__COLLISION_AVOIDANCE_0_bwd();
void uav__COLLISION_AVOIDANCE_0_fwd();
void uav__COLLISION_AVOIDANCE_1_bwd();
void uav__COLLISION_AVOIDANCE_1_fwd();
void uav__COLLISION_AVOIDANCE_2_bwd();
void uav__COLLISION_AVOIDANCE_2_fwd();
void uav__NEXT_XY_0_bwd();
void uav__NEXT_XY_0_fwd();
void uav__NEXT_XY_1_bwd();
void uav__NEXT_XY_1_fwd();
void uav__NEXT_XY_2_bwd();
void uav__NEXT_XY_2_fwd();

/************* function definitions ***********/
void __INIT()
{
  __CPROVER_assume(__INIT_x_0());
  __CPROVER_assume(__INIT_y_0());
  __INIT_lock_0();
  __INIT_state_0();
  __CPROVER_assume(__INIT_xf_0());
  __INIT_xp_0();
  __CPROVER_assume(__INIT_yf_0());
  __INIT_yp_0();
  __CPROVER_assume(__INIT_x_1());
  __CPROVER_assume(__INIT_y_1());
  __INIT_lock_1();
  __INIT_state_1();
  __CPROVER_assume(__INIT_xf_1());
  __INIT_xp_1();
  __CPROVER_assume(__INIT_yf_1());
  __INIT_yp_1();
  __CPROVER_assume(__INIT_x_2());
  __CPROVER_assume(__INIT_y_2());
  __INIT_lock_2();
  __INIT_state_2();
  __CPROVER_assume(__INIT_xf_2());
  __INIT_xp_2();
  __CPROVER_assume(__INIT_yf_2());
  __INIT_yp_2();
  __CPROVER_assume(__SAFETY_NoCollision_fwd());
}

void __INIT_lock_0()
{
  lock_i_0[x_0][y_0] = 1;
}

void __INIT_lock_1()
{
  lock_i_1[x_1][y_1] = 1;
}

void __INIT_lock_2()
{
  lock_i_2[x_2][y_2] = 1;
}

void __INIT_state_0()
{
  state_0 = INITS;
}

void __INIT_state_1()
{
  state_1 = INITS;
}

void __INIT_state_2()
{
  state_2 = INITS;
}

int __INIT_x_0()
{
  x_0 = nondet_x();
  return ((0)<=(x_0))&&((x_0)<(X));
}

int __INIT_x_1()
{
  x_1 = nondet_x();
  return ((0)<=(x_1))&&((x_1)<(X));
}

int __INIT_x_2()
{
  x_2 = nondet_x();
  return ((0)<=(x_2))&&((x_2)<(X));
}

int __INIT_xf_0()
{
  xf_0 = nondet_xf();
  return ((0)<=(xf_0))&&((xf_0)<(X));
}

int __INIT_xf_1()
{
  xf_1 = nondet_xf();
  return ((0)<=(xf_1))&&((xf_1)<(X));
}

int __INIT_xf_2()
{
  xf_2 = nondet_xf();
  return ((0)<=(xf_2))&&((xf_2)<(X));
}

void __INIT_xp_0()
{
  xp_0 = 10;
}

void __INIT_xp_1()
{
  xp_1 = 10;
}

void __INIT_xp_2()
{
  xp_2 = x_2;
}

int __INIT_y_0()
{
  y_0 = nondet_y();
  return ((0)<=(y_0))&&((y_0)<(Y));
}

int __INIT_y_1()
{
  y_1 = nondet_y();
  return ((0)<=(y_1))&&((y_1)<(Y));
}

int __INIT_y_2()
{
  y_2 = nondet_y();
  return ((0)<=(y_2))&&((y_2)<(Y));
}

int __INIT_yf_0()
{
  yf_0 = nondet_yf();
  return ((0)<=(yf_0))&&((yf_0)<(Y));
}

int __INIT_yf_1()
{
  yf_1 = nondet_yf();
  return ((0)<=(yf_1))&&((yf_1)<(Y));
}

int __INIT_yf_2()
{
  yf_2 = nondet_yf();
  return ((0)<=(yf_2))&&((yf_2)<(Y));
}

void __INIT_yp_0()
{
  yp_0 = y_0;
}

void __INIT_yp_1()
{
  yp_1 = y_1;
}

void __INIT_yp_2()
{
  yp_2 = y_2;
}

_Bool __SAFETY_NoCollision_bwd()
{
  {
    {
      if (((x_0)==(x_1))&&((y_0)==(y_1)))
        return false;
    }
    {
      if (((x_0)==(x_2))&&((y_0)==(y_2)))
        return false;
    }
    {
      if (((x_1)==(x_2))&&((y_1)==(y_2)))
        return false;
    }
  }
  return true;
}

_Bool __SAFETY_NoCollision_fwd()
{
  {
    {
      if (((x_0)==(x_1))&&((y_0)==(y_1)))
        return false;
    }
    {
      if (((x_0)==(x_2))&&((y_0)==(y_2)))
        return false;
    }
    {
      if (((x_1)==(x_2))&&((y_1)==(y_2)))
        return false;
    }
  }
  return true;
}

void __SAFETY_bwd()
{
  assert(__SAFETY_NoCollision_bwd());
}

void __SAFETY_fwd()
{
  assert(__SAFETY_NoCollision_fwd());
}

int main()
{
  __INIT();
  __SAFETY_fwd();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  uav__COLLISION_AVOIDANCE_2_fwd();
  __SAFETY_bwd();
  round_bwd_copier();
  uav__COLLISION_AVOIDANCE_0_bwd();
  uav__COLLISION_AVOIDANCE_1_bwd();
  uav__COLLISION_AVOIDANCE_2_bwd();
  __SAFETY_fwd();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  uav__COLLISION_AVOIDANCE_2_fwd();
  __SAFETY_bwd();
  round_bwd_copier();
  uav__COLLISION_AVOIDANCE_0_bwd();
  uav__COLLISION_AVOIDANCE_1_bwd();
  uav__COLLISION_AVOIDANCE_2_bwd();
  __SAFETY_fwd();
  round_fwd_copier();
  uav__COLLISION_AVOIDANCE_0_fwd();
  uav__COLLISION_AVOIDANCE_1_fwd();
  uav__COLLISION_AVOIDANCE_2_fwd();
  __SAFETY_bwd();
}

int my_sleep(int seconds);
unsigned char nondet_x();
unsigned char nondet_xf();
unsigned char nondet_y();
unsigned char nondet_yf();
void print_int(int i);
void print_state(int XX,int YY,int my_id,int x,int y,int xf,int yf);
void round_bwd_copier()
{
  lock_i_0[0][0] = lock_f_0[0][0];
  lock_i_0[0][1] = lock_f_0[0][1];
  lock_i_0[0][2] = lock_f_0[0][2];
  lock_i_0[0][3] = lock_f_0[0][3];
  lock_i_0[0][4] = lock_f_0[0][4];
  lock_i_0[0][5] = lock_f_0[0][5];
  lock_i_0[0][6] = lock_f_0[0][6];
  lock_i_0[0][7] = lock_f_0[0][7];
  lock_i_0[0][8] = lock_f_0[0][8];
  lock_i_0[0][9] = lock_f_0[0][9];
  lock_i_0[1][0] = lock_f_0[1][0];
  lock_i_0[1][1] = lock_f_0[1][1];
  lock_i_0[1][2] = lock_f_0[1][2];
  lock_i_0[1][3] = lock_f_0[1][3];
  lock_i_0[1][4] = lock_f_0[1][4];
  lock_i_0[1][5] = lock_f_0[1][5];
  lock_i_0[1][6] = lock_f_0[1][6];
  lock_i_0[1][7] = lock_f_0[1][7];
  lock_i_0[1][8] = lock_f_0[1][8];
  lock_i_0[1][9] = lock_f_0[1][9];
  lock_i_0[2][0] = lock_f_0[2][0];
  lock_i_0[2][1] = lock_f_0[2][1];
  lock_i_0[2][2] = lock_f_0[2][2];
  lock_i_0[2][3] = lock_f_0[2][3];
  lock_i_0[2][4] = lock_f_0[2][4];
  lock_i_0[2][5] = lock_f_0[2][5];
  lock_i_0[2][6] = lock_f_0[2][6];
  lock_i_0[2][7] = lock_f_0[2][7];
  lock_i_0[2][8] = lock_f_0[2][8];
  lock_i_0[2][9] = lock_f_0[2][9];
  lock_i_0[3][0] = lock_f_0[3][0];
  lock_i_0[3][1] = lock_f_0[3][1];
  lock_i_0[3][2] = lock_f_0[3][2];
  lock_i_0[3][3] = lock_f_0[3][3];
  lock_i_0[3][4] = lock_f_0[3][4];
  lock_i_0[3][5] = lock_f_0[3][5];
  lock_i_0[3][6] = lock_f_0[3][6];
  lock_i_0[3][7] = lock_f_0[3][7];
  lock_i_0[3][8] = lock_f_0[3][8];
  lock_i_0[3][9] = lock_f_0[3][9];
  lock_i_0[4][0] = lock_f_0[4][0];
  lock_i_0[4][1] = lock_f_0[4][1];
  lock_i_0[4][2] = lock_f_0[4][2];
  lock_i_0[4][3] = lock_f_0[4][3];
  lock_i_0[4][4] = lock_f_0[4][4];
  lock_i_0[4][5] = lock_f_0[4][5];
  lock_i_0[4][6] = lock_f_0[4][6];
  lock_i_0[4][7] = lock_f_0[4][7];
  lock_i_0[4][8] = lock_f_0[4][8];
  lock_i_0[4][9] = lock_f_0[4][9];
  lock_i_0[5][0] = lock_f_0[5][0];
  lock_i_0[5][1] = lock_f_0[5][1];
  lock_i_0[5][2] = lock_f_0[5][2];
  lock_i_0[5][3] = lock_f_0[5][3];
  lock_i_0[5][4] = lock_f_0[5][4];
  lock_i_0[5][5] = lock_f_0[5][5];
  lock_i_0[5][6] = lock_f_0[5][6];
  lock_i_0[5][7] = lock_f_0[5][7];
  lock_i_0[5][8] = lock_f_0[5][8];
  lock_i_0[5][9] = lock_f_0[5][9];
  lock_i_0[6][0] = lock_f_0[6][0];
  lock_i_0[6][1] = lock_f_0[6][1];
  lock_i_0[6][2] = lock_f_0[6][2];
  lock_i_0[6][3] = lock_f_0[6][3];
  lock_i_0[6][4] = lock_f_0[6][4];
  lock_i_0[6][5] = lock_f_0[6][5];
  lock_i_0[6][6] = lock_f_0[6][6];
  lock_i_0[6][7] = lock_f_0[6][7];
  lock_i_0[6][8] = lock_f_0[6][8];
  lock_i_0[6][9] = lock_f_0[6][9];
  lock_i_0[7][0] = lock_f_0[7][0];
  lock_i_0[7][1] = lock_f_0[7][1];
  lock_i_0[7][2] = lock_f_0[7][2];
  lock_i_0[7][3] = lock_f_0[7][3];
  lock_i_0[7][4] = lock_f_0[7][4];
  lock_i_0[7][5] = lock_f_0[7][5];
  lock_i_0[7][6] = lock_f_0[7][6];
  lock_i_0[7][7] = lock_f_0[7][7];
  lock_i_0[7][8] = lock_f_0[7][8];
  lock_i_0[7][9] = lock_f_0[7][9];
  lock_i_0[8][0] = lock_f_0[8][0];
  lock_i_0[8][1] = lock_f_0[8][1];
  lock_i_0[8][2] = lock_f_0[8][2];
  lock_i_0[8][3] = lock_f_0[8][3];
  lock_i_0[8][4] = lock_f_0[8][4];
  lock_i_0[8][5] = lock_f_0[8][5];
  lock_i_0[8][6] = lock_f_0[8][6];
  lock_i_0[8][7] = lock_f_0[8][7];
  lock_i_0[8][8] = lock_f_0[8][8];
  lock_i_0[8][9] = lock_f_0[8][9];
  lock_i_0[9][0] = lock_f_0[9][0];
  lock_i_0[9][1] = lock_f_0[9][1];
  lock_i_0[9][2] = lock_f_0[9][2];
  lock_i_0[9][3] = lock_f_0[9][3];
  lock_i_0[9][4] = lock_f_0[9][4];
  lock_i_0[9][5] = lock_f_0[9][5];
  lock_i_0[9][6] = lock_f_0[9][6];
  lock_i_0[9][7] = lock_f_0[9][7];
  lock_i_0[9][8] = lock_f_0[9][8];
  lock_i_0[9][9] = lock_f_0[9][9];
  lock_i_1[0][0] = lock_f_1[0][0];
  lock_i_1[0][1] = lock_f_1[0][1];
  lock_i_1[0][2] = lock_f_1[0][2];
  lock_i_1[0][3] = lock_f_1[0][3];
  lock_i_1[0][4] = lock_f_1[0][4];
  lock_i_1[0][5] = lock_f_1[0][5];
  lock_i_1[0][6] = lock_f_1[0][6];
  lock_i_1[0][7] = lock_f_1[0][7];
  lock_i_1[0][8] = lock_f_1[0][8];
  lock_i_1[0][9] = lock_f_1[0][9];
  lock_i_1[1][0] = lock_f_1[1][0];
  lock_i_1[1][1] = lock_f_1[1][1];
  lock_i_1[1][2] = lock_f_1[1][2];
  lock_i_1[1][3] = lock_f_1[1][3];
  lock_i_1[1][4] = lock_f_1[1][4];
  lock_i_1[1][5] = lock_f_1[1][5];
  lock_i_1[1][6] = lock_f_1[1][6];
  lock_i_1[1][7] = lock_f_1[1][7];
  lock_i_1[1][8] = lock_f_1[1][8];
  lock_i_1[1][9] = lock_f_1[1][9];
  lock_i_1[2][0] = lock_f_1[2][0];
  lock_i_1[2][1] = lock_f_1[2][1];
  lock_i_1[2][2] = lock_f_1[2][2];
  lock_i_1[2][3] = lock_f_1[2][3];
  lock_i_1[2][4] = lock_f_1[2][4];
  lock_i_1[2][5] = lock_f_1[2][5];
  lock_i_1[2][6] = lock_f_1[2][6];
  lock_i_1[2][7] = lock_f_1[2][7];
  lock_i_1[2][8] = lock_f_1[2][8];
  lock_i_1[2][9] = lock_f_1[2][9];
  lock_i_1[3][0] = lock_f_1[3][0];
  lock_i_1[3][1] = lock_f_1[3][1];
  lock_i_1[3][2] = lock_f_1[3][2];
  lock_i_1[3][3] = lock_f_1[3][3];
  lock_i_1[3][4] = lock_f_1[3][4];
  lock_i_1[3][5] = lock_f_1[3][5];
  lock_i_1[3][6] = lock_f_1[3][6];
  lock_i_1[3][7] = lock_f_1[3][7];
  lock_i_1[3][8] = lock_f_1[3][8];
  lock_i_1[3][9] = lock_f_1[3][9];
  lock_i_1[4][0] = lock_f_1[4][0];
  lock_i_1[4][1] = lock_f_1[4][1];
  lock_i_1[4][2] = lock_f_1[4][2];
  lock_i_1[4][3] = lock_f_1[4][3];
  lock_i_1[4][4] = lock_f_1[4][4];
  lock_i_1[4][5] = lock_f_1[4][5];
  lock_i_1[4][6] = lock_f_1[4][6];
  lock_i_1[4][7] = lock_f_1[4][7];
  lock_i_1[4][8] = lock_f_1[4][8];
  lock_i_1[4][9] = lock_f_1[4][9];
  lock_i_1[5][0] = lock_f_1[5][0];
  lock_i_1[5][1] = lock_f_1[5][1];
  lock_i_1[5][2] = lock_f_1[5][2];
  lock_i_1[5][3] = lock_f_1[5][3];
  lock_i_1[5][4] = lock_f_1[5][4];
  lock_i_1[5][5] = lock_f_1[5][5];
  lock_i_1[5][6] = lock_f_1[5][6];
  lock_i_1[5][7] = lock_f_1[5][7];
  lock_i_1[5][8] = lock_f_1[5][8];
  lock_i_1[5][9] = lock_f_1[5][9];
  lock_i_1[6][0] = lock_f_1[6][0];
  lock_i_1[6][1] = lock_f_1[6][1];
  lock_i_1[6][2] = lock_f_1[6][2];
  lock_i_1[6][3] = lock_f_1[6][3];
  lock_i_1[6][4] = lock_f_1[6][4];
  lock_i_1[6][5] = lock_f_1[6][5];
  lock_i_1[6][6] = lock_f_1[6][6];
  lock_i_1[6][7] = lock_f_1[6][7];
  lock_i_1[6][8] = lock_f_1[6][8];
  lock_i_1[6][9] = lock_f_1[6][9];
  lock_i_1[7][0] = lock_f_1[7][0];
  lock_i_1[7][1] = lock_f_1[7][1];
  lock_i_1[7][2] = lock_f_1[7][2];
  lock_i_1[7][3] = lock_f_1[7][3];
  lock_i_1[7][4] = lock_f_1[7][4];
  lock_i_1[7][5] = lock_f_1[7][5];
  lock_i_1[7][6] = lock_f_1[7][6];
  lock_i_1[7][7] = lock_f_1[7][7];
  lock_i_1[7][8] = lock_f_1[7][8];
  lock_i_1[7][9] = lock_f_1[7][9];
  lock_i_1[8][0] = lock_f_1[8][0];
  lock_i_1[8][1] = lock_f_1[8][1];
  lock_i_1[8][2] = lock_f_1[8][2];
  lock_i_1[8][3] = lock_f_1[8][3];
  lock_i_1[8][4] = lock_f_1[8][4];
  lock_i_1[8][5] = lock_f_1[8][5];
  lock_i_1[8][6] = lock_f_1[8][6];
  lock_i_1[8][7] = lock_f_1[8][7];
  lock_i_1[8][8] = lock_f_1[8][8];
  lock_i_1[8][9] = lock_f_1[8][9];
  lock_i_1[9][0] = lock_f_1[9][0];
  lock_i_1[9][1] = lock_f_1[9][1];
  lock_i_1[9][2] = lock_f_1[9][2];
  lock_i_1[9][3] = lock_f_1[9][3];
  lock_i_1[9][4] = lock_f_1[9][4];
  lock_i_1[9][5] = lock_f_1[9][5];
  lock_i_1[9][6] = lock_f_1[9][6];
  lock_i_1[9][7] = lock_f_1[9][7];
  lock_i_1[9][8] = lock_f_1[9][8];
  lock_i_1[9][9] = lock_f_1[9][9];
  lock_i_2[0][0] = lock_f_2[0][0];
  lock_i_2[0][1] = lock_f_2[0][1];
  lock_i_2[0][2] = lock_f_2[0][2];
  lock_i_2[0][3] = lock_f_2[0][3];
  lock_i_2[0][4] = lock_f_2[0][4];
  lock_i_2[0][5] = lock_f_2[0][5];
  lock_i_2[0][6] = lock_f_2[0][6];
  lock_i_2[0][7] = lock_f_2[0][7];
  lock_i_2[0][8] = lock_f_2[0][8];
  lock_i_2[0][9] = lock_f_2[0][9];
  lock_i_2[1][0] = lock_f_2[1][0];
  lock_i_2[1][1] = lock_f_2[1][1];
  lock_i_2[1][2] = lock_f_2[1][2];
  lock_i_2[1][3] = lock_f_2[1][3];
  lock_i_2[1][4] = lock_f_2[1][4];
  lock_i_2[1][5] = lock_f_2[1][5];
  lock_i_2[1][6] = lock_f_2[1][6];
  lock_i_2[1][7] = lock_f_2[1][7];
  lock_i_2[1][8] = lock_f_2[1][8];
  lock_i_2[1][9] = lock_f_2[1][9];
  lock_i_2[2][0] = lock_f_2[2][0];
  lock_i_2[2][1] = lock_f_2[2][1];
  lock_i_2[2][2] = lock_f_2[2][2];
  lock_i_2[2][3] = lock_f_2[2][3];
  lock_i_2[2][4] = lock_f_2[2][4];
  lock_i_2[2][5] = lock_f_2[2][5];
  lock_i_2[2][6] = lock_f_2[2][6];
  lock_i_2[2][7] = lock_f_2[2][7];
  lock_i_2[2][8] = lock_f_2[2][8];
  lock_i_2[2][9] = lock_f_2[2][9];
  lock_i_2[3][0] = lock_f_2[3][0];
  lock_i_2[3][1] = lock_f_2[3][1];
  lock_i_2[3][2] = lock_f_2[3][2];
  lock_i_2[3][3] = lock_f_2[3][3];
  lock_i_2[3][4] = lock_f_2[3][4];
  lock_i_2[3][5] = lock_f_2[3][5];
  lock_i_2[3][6] = lock_f_2[3][6];
  lock_i_2[3][7] = lock_f_2[3][7];
  lock_i_2[3][8] = lock_f_2[3][8];
  lock_i_2[3][9] = lock_f_2[3][9];
  lock_i_2[4][0] = lock_f_2[4][0];
  lock_i_2[4][1] = lock_f_2[4][1];
  lock_i_2[4][2] = lock_f_2[4][2];
  lock_i_2[4][3] = lock_f_2[4][3];
  lock_i_2[4][4] = lock_f_2[4][4];
  lock_i_2[4][5] = lock_f_2[4][5];
  lock_i_2[4][6] = lock_f_2[4][6];
  lock_i_2[4][7] = lock_f_2[4][7];
  lock_i_2[4][8] = lock_f_2[4][8];
  lock_i_2[4][9] = lock_f_2[4][9];
  lock_i_2[5][0] = lock_f_2[5][0];
  lock_i_2[5][1] = lock_f_2[5][1];
  lock_i_2[5][2] = lock_f_2[5][2];
  lock_i_2[5][3] = lock_f_2[5][3];
  lock_i_2[5][4] = lock_f_2[5][4];
  lock_i_2[5][5] = lock_f_2[5][5];
  lock_i_2[5][6] = lock_f_2[5][6];
  lock_i_2[5][7] = lock_f_2[5][7];
  lock_i_2[5][8] = lock_f_2[5][8];
  lock_i_2[5][9] = lock_f_2[5][9];
  lock_i_2[6][0] = lock_f_2[6][0];
  lock_i_2[6][1] = lock_f_2[6][1];
  lock_i_2[6][2] = lock_f_2[6][2];
  lock_i_2[6][3] = lock_f_2[6][3];
  lock_i_2[6][4] = lock_f_2[6][4];
  lock_i_2[6][5] = lock_f_2[6][5];
  lock_i_2[6][6] = lock_f_2[6][6];
  lock_i_2[6][7] = lock_f_2[6][7];
  lock_i_2[6][8] = lock_f_2[6][8];
  lock_i_2[6][9] = lock_f_2[6][9];
  lock_i_2[7][0] = lock_f_2[7][0];
  lock_i_2[7][1] = lock_f_2[7][1];
  lock_i_2[7][2] = lock_f_2[7][2];
  lock_i_2[7][3] = lock_f_2[7][3];
  lock_i_2[7][4] = lock_f_2[7][4];
  lock_i_2[7][5] = lock_f_2[7][5];
  lock_i_2[7][6] = lock_f_2[7][6];
  lock_i_2[7][7] = lock_f_2[7][7];
  lock_i_2[7][8] = lock_f_2[7][8];
  lock_i_2[7][9] = lock_f_2[7][9];
  lock_i_2[8][0] = lock_f_2[8][0];
  lock_i_2[8][1] = lock_f_2[8][1];
  lock_i_2[8][2] = lock_f_2[8][2];
  lock_i_2[8][3] = lock_f_2[8][3];
  lock_i_2[8][4] = lock_f_2[8][4];
  lock_i_2[8][5] = lock_f_2[8][5];
  lock_i_2[8][6] = lock_f_2[8][6];
  lock_i_2[8][7] = lock_f_2[8][7];
  lock_i_2[8][8] = lock_f_2[8][8];
  lock_i_2[8][9] = lock_f_2[8][9];
  lock_i_2[9][0] = lock_f_2[9][0];
  lock_i_2[9][1] = lock_f_2[9][1];
  lock_i_2[9][2] = lock_f_2[9][2];
  lock_i_2[9][3] = lock_f_2[9][3];
  lock_i_2[9][4] = lock_f_2[9][4];
  lock_i_2[9][5] = lock_f_2[9][5];
  lock_i_2[9][6] = lock_f_2[9][6];
  lock_i_2[9][7] = lock_f_2[9][7];
  lock_i_2[9][8] = lock_f_2[9][8];
  lock_i_2[9][9] = lock_f_2[9][9];
}

void round_fwd_copier()
{
  lock_f_0[0][0] = lock_i_0[0][0];
  lock_f_0[0][1] = lock_i_0[0][1];
  lock_f_0[0][2] = lock_i_0[0][2];
  lock_f_0[0][3] = lock_i_0[0][3];
  lock_f_0[0][4] = lock_i_0[0][4];
  lock_f_0[0][5] = lock_i_0[0][5];
  lock_f_0[0][6] = lock_i_0[0][6];
  lock_f_0[0][7] = lock_i_0[0][7];
  lock_f_0[0][8] = lock_i_0[0][8];
  lock_f_0[0][9] = lock_i_0[0][9];
  lock_f_0[1][0] = lock_i_0[1][0];
  lock_f_0[1][1] = lock_i_0[1][1];
  lock_f_0[1][2] = lock_i_0[1][2];
  lock_f_0[1][3] = lock_i_0[1][3];
  lock_f_0[1][4] = lock_i_0[1][4];
  lock_f_0[1][5] = lock_i_0[1][5];
  lock_f_0[1][6] = lock_i_0[1][6];
  lock_f_0[1][7] = lock_i_0[1][7];
  lock_f_0[1][8] = lock_i_0[1][8];
  lock_f_0[1][9] = lock_i_0[1][9];
  lock_f_0[2][0] = lock_i_0[2][0];
  lock_f_0[2][1] = lock_i_0[2][1];
  lock_f_0[2][2] = lock_i_0[2][2];
  lock_f_0[2][3] = lock_i_0[2][3];
  lock_f_0[2][4] = lock_i_0[2][4];
  lock_f_0[2][5] = lock_i_0[2][5];
  lock_f_0[2][6] = lock_i_0[2][6];
  lock_f_0[2][7] = lock_i_0[2][7];
  lock_f_0[2][8] = lock_i_0[2][8];
  lock_f_0[2][9] = lock_i_0[2][9];
  lock_f_0[3][0] = lock_i_0[3][0];
  lock_f_0[3][1] = lock_i_0[3][1];
  lock_f_0[3][2] = lock_i_0[3][2];
  lock_f_0[3][3] = lock_i_0[3][3];
  lock_f_0[3][4] = lock_i_0[3][4];
  lock_f_0[3][5] = lock_i_0[3][5];
  lock_f_0[3][6] = lock_i_0[3][6];
  lock_f_0[3][7] = lock_i_0[3][7];
  lock_f_0[3][8] = lock_i_0[3][8];
  lock_f_0[3][9] = lock_i_0[3][9];
  lock_f_0[4][0] = lock_i_0[4][0];
  lock_f_0[4][1] = lock_i_0[4][1];
  lock_f_0[4][2] = lock_i_0[4][2];
  lock_f_0[4][3] = lock_i_0[4][3];
  lock_f_0[4][4] = lock_i_0[4][4];
  lock_f_0[4][5] = lock_i_0[4][5];
  lock_f_0[4][6] = lock_i_0[4][6];
  lock_f_0[4][7] = lock_i_0[4][7];
  lock_f_0[4][8] = lock_i_0[4][8];
  lock_f_0[4][9] = lock_i_0[4][9];
  lock_f_0[5][0] = lock_i_0[5][0];
  lock_f_0[5][1] = lock_i_0[5][1];
  lock_f_0[5][2] = lock_i_0[5][2];
  lock_f_0[5][3] = lock_i_0[5][3];
  lock_f_0[5][4] = lock_i_0[5][4];
  lock_f_0[5][5] = lock_i_0[5][5];
  lock_f_0[5][6] = lock_i_0[5][6];
  lock_f_0[5][7] = lock_i_0[5][7];
  lock_f_0[5][8] = lock_i_0[5][8];
  lock_f_0[5][9] = lock_i_0[5][9];
  lock_f_0[6][0] = lock_i_0[6][0];
  lock_f_0[6][1] = lock_i_0[6][1];
  lock_f_0[6][2] = lock_i_0[6][2];
  lock_f_0[6][3] = lock_i_0[6][3];
  lock_f_0[6][4] = lock_i_0[6][4];
  lock_f_0[6][5] = lock_i_0[6][5];
  lock_f_0[6][6] = lock_i_0[6][6];
  lock_f_0[6][7] = lock_i_0[6][7];
  lock_f_0[6][8] = lock_i_0[6][8];
  lock_f_0[6][9] = lock_i_0[6][9];
  lock_f_0[7][0] = lock_i_0[7][0];
  lock_f_0[7][1] = lock_i_0[7][1];
  lock_f_0[7][2] = lock_i_0[7][2];
  lock_f_0[7][3] = lock_i_0[7][3];
  lock_f_0[7][4] = lock_i_0[7][4];
  lock_f_0[7][5] = lock_i_0[7][5];
  lock_f_0[7][6] = lock_i_0[7][6];
  lock_f_0[7][7] = lock_i_0[7][7];
  lock_f_0[7][8] = lock_i_0[7][8];
  lock_f_0[7][9] = lock_i_0[7][9];
  lock_f_0[8][0] = lock_i_0[8][0];
  lock_f_0[8][1] = lock_i_0[8][1];
  lock_f_0[8][2] = lock_i_0[8][2];
  lock_f_0[8][3] = lock_i_0[8][3];
  lock_f_0[8][4] = lock_i_0[8][4];
  lock_f_0[8][5] = lock_i_0[8][5];
  lock_f_0[8][6] = lock_i_0[8][6];
  lock_f_0[8][7] = lock_i_0[8][7];
  lock_f_0[8][8] = lock_i_0[8][8];
  lock_f_0[8][9] = lock_i_0[8][9];
  lock_f_0[9][0] = lock_i_0[9][0];
  lock_f_0[9][1] = lock_i_0[9][1];
  lock_f_0[9][2] = lock_i_0[9][2];
  lock_f_0[9][3] = lock_i_0[9][3];
  lock_f_0[9][4] = lock_i_0[9][4];
  lock_f_0[9][5] = lock_i_0[9][5];
  lock_f_0[9][6] = lock_i_0[9][6];
  lock_f_0[9][7] = lock_i_0[9][7];
  lock_f_0[9][8] = lock_i_0[9][8];
  lock_f_0[9][9] = lock_i_0[9][9];
  lock_f_1[0][0] = lock_i_1[0][0];
  lock_f_1[0][1] = lock_i_1[0][1];
  lock_f_1[0][2] = lock_i_1[0][2];
  lock_f_1[0][3] = lock_i_1[0][3];
  lock_f_1[0][4] = lock_i_1[0][4];
  lock_f_1[0][5] = lock_i_1[0][5];
  lock_f_1[0][6] = lock_i_1[0][6];
  lock_f_1[0][7] = lock_i_1[0][7];
  lock_f_1[0][8] = lock_i_1[0][8];
  lock_f_1[0][9] = lock_i_1[0][9];
  lock_f_1[1][0] = lock_i_1[1][0];
  lock_f_1[1][1] = lock_i_1[1][1];
  lock_f_1[1][2] = lock_i_1[1][2];
  lock_f_1[1][3] = lock_i_1[1][3];
  lock_f_1[1][4] = lock_i_1[1][4];
  lock_f_1[1][5] = lock_i_1[1][5];
  lock_f_1[1][6] = lock_i_1[1][6];
  lock_f_1[1][7] = lock_i_1[1][7];
  lock_f_1[1][8] = lock_i_1[1][8];
  lock_f_1[1][9] = lock_i_1[1][9];
  lock_f_1[2][0] = lock_i_1[2][0];
  lock_f_1[2][1] = lock_i_1[2][1];
  lock_f_1[2][2] = lock_i_1[2][2];
  lock_f_1[2][3] = lock_i_1[2][3];
  lock_f_1[2][4] = lock_i_1[2][4];
  lock_f_1[2][5] = lock_i_1[2][5];
  lock_f_1[2][6] = lock_i_1[2][6];
  lock_f_1[2][7] = lock_i_1[2][7];
  lock_f_1[2][8] = lock_i_1[2][8];
  lock_f_1[2][9] = lock_i_1[2][9];
  lock_f_1[3][0] = lock_i_1[3][0];
  lock_f_1[3][1] = lock_i_1[3][1];
  lock_f_1[3][2] = lock_i_1[3][2];
  lock_f_1[3][3] = lock_i_1[3][3];
  lock_f_1[3][4] = lock_i_1[3][4];
  lock_f_1[3][5] = lock_i_1[3][5];
  lock_f_1[3][6] = lock_i_1[3][6];
  lock_f_1[3][7] = lock_i_1[3][7];
  lock_f_1[3][8] = lock_i_1[3][8];
  lock_f_1[3][9] = lock_i_1[3][9];
  lock_f_1[4][0] = lock_i_1[4][0];
  lock_f_1[4][1] = lock_i_1[4][1];
  lock_f_1[4][2] = lock_i_1[4][2];
  lock_f_1[4][3] = lock_i_1[4][3];
  lock_f_1[4][4] = lock_i_1[4][4];
  lock_f_1[4][5] = lock_i_1[4][5];
  lock_f_1[4][6] = lock_i_1[4][6];
  lock_f_1[4][7] = lock_i_1[4][7];
  lock_f_1[4][8] = lock_i_1[4][8];
  lock_f_1[4][9] = lock_i_1[4][9];
  lock_f_1[5][0] = lock_i_1[5][0];
  lock_f_1[5][1] = lock_i_1[5][1];
  lock_f_1[5][2] = lock_i_1[5][2];
  lock_f_1[5][3] = lock_i_1[5][3];
  lock_f_1[5][4] = lock_i_1[5][4];
  lock_f_1[5][5] = lock_i_1[5][5];
  lock_f_1[5][6] = lock_i_1[5][6];
  lock_f_1[5][7] = lock_i_1[5][7];
  lock_f_1[5][8] = lock_i_1[5][8];
  lock_f_1[5][9] = lock_i_1[5][9];
  lock_f_1[6][0] = lock_i_1[6][0];
  lock_f_1[6][1] = lock_i_1[6][1];
  lock_f_1[6][2] = lock_i_1[6][2];
  lock_f_1[6][3] = lock_i_1[6][3];
  lock_f_1[6][4] = lock_i_1[6][4];
  lock_f_1[6][5] = lock_i_1[6][5];
  lock_f_1[6][6] = lock_i_1[6][6];
  lock_f_1[6][7] = lock_i_1[6][7];
  lock_f_1[6][8] = lock_i_1[6][8];
  lock_f_1[6][9] = lock_i_1[6][9];
  lock_f_1[7][0] = lock_i_1[7][0];
  lock_f_1[7][1] = lock_i_1[7][1];
  lock_f_1[7][2] = lock_i_1[7][2];
  lock_f_1[7][3] = lock_i_1[7][3];
  lock_f_1[7][4] = lock_i_1[7][4];
  lock_f_1[7][5] = lock_i_1[7][5];
  lock_f_1[7][6] = lock_i_1[7][6];
  lock_f_1[7][7] = lock_i_1[7][7];
  lock_f_1[7][8] = lock_i_1[7][8];
  lock_f_1[7][9] = lock_i_1[7][9];
  lock_f_1[8][0] = lock_i_1[8][0];
  lock_f_1[8][1] = lock_i_1[8][1];
  lock_f_1[8][2] = lock_i_1[8][2];
  lock_f_1[8][3] = lock_i_1[8][3];
  lock_f_1[8][4] = lock_i_1[8][4];
  lock_f_1[8][5] = lock_i_1[8][5];
  lock_f_1[8][6] = lock_i_1[8][6];
  lock_f_1[8][7] = lock_i_1[8][7];
  lock_f_1[8][8] = lock_i_1[8][8];
  lock_f_1[8][9] = lock_i_1[8][9];
  lock_f_1[9][0] = lock_i_1[9][0];
  lock_f_1[9][1] = lock_i_1[9][1];
  lock_f_1[9][2] = lock_i_1[9][2];
  lock_f_1[9][3] = lock_i_1[9][3];
  lock_f_1[9][4] = lock_i_1[9][4];
  lock_f_1[9][5] = lock_i_1[9][5];
  lock_f_1[9][6] = lock_i_1[9][6];
  lock_f_1[9][7] = lock_i_1[9][7];
  lock_f_1[9][8] = lock_i_1[9][8];
  lock_f_1[9][9] = lock_i_1[9][9];
  lock_f_2[0][0] = lock_i_2[0][0];
  lock_f_2[0][1] = lock_i_2[0][1];
  lock_f_2[0][2] = lock_i_2[0][2];
  lock_f_2[0][3] = lock_i_2[0][3];
  lock_f_2[0][4] = lock_i_2[0][4];
  lock_f_2[0][5] = lock_i_2[0][5];
  lock_f_2[0][6] = lock_i_2[0][6];
  lock_f_2[0][7] = lock_i_2[0][7];
  lock_f_2[0][8] = lock_i_2[0][8];
  lock_f_2[0][9] = lock_i_2[0][9];
  lock_f_2[1][0] = lock_i_2[1][0];
  lock_f_2[1][1] = lock_i_2[1][1];
  lock_f_2[1][2] = lock_i_2[1][2];
  lock_f_2[1][3] = lock_i_2[1][3];
  lock_f_2[1][4] = lock_i_2[1][4];
  lock_f_2[1][5] = lock_i_2[1][5];
  lock_f_2[1][6] = lock_i_2[1][6];
  lock_f_2[1][7] = lock_i_2[1][7];
  lock_f_2[1][8] = lock_i_2[1][8];
  lock_f_2[1][9] = lock_i_2[1][9];
  lock_f_2[2][0] = lock_i_2[2][0];
  lock_f_2[2][1] = lock_i_2[2][1];
  lock_f_2[2][2] = lock_i_2[2][2];
  lock_f_2[2][3] = lock_i_2[2][3];
  lock_f_2[2][4] = lock_i_2[2][4];
  lock_f_2[2][5] = lock_i_2[2][5];
  lock_f_2[2][6] = lock_i_2[2][6];
  lock_f_2[2][7] = lock_i_2[2][7];
  lock_f_2[2][8] = lock_i_2[2][8];
  lock_f_2[2][9] = lock_i_2[2][9];
  lock_f_2[3][0] = lock_i_2[3][0];
  lock_f_2[3][1] = lock_i_2[3][1];
  lock_f_2[3][2] = lock_i_2[3][2];
  lock_f_2[3][3] = lock_i_2[3][3];
  lock_f_2[3][4] = lock_i_2[3][4];
  lock_f_2[3][5] = lock_i_2[3][5];
  lock_f_2[3][6] = lock_i_2[3][6];
  lock_f_2[3][7] = lock_i_2[3][7];
  lock_f_2[3][8] = lock_i_2[3][8];
  lock_f_2[3][9] = lock_i_2[3][9];
  lock_f_2[4][0] = lock_i_2[4][0];
  lock_f_2[4][1] = lock_i_2[4][1];
  lock_f_2[4][2] = lock_i_2[4][2];
  lock_f_2[4][3] = lock_i_2[4][3];
  lock_f_2[4][4] = lock_i_2[4][4];
  lock_f_2[4][5] = lock_i_2[4][5];
  lock_f_2[4][6] = lock_i_2[4][6];
  lock_f_2[4][7] = lock_i_2[4][7];
  lock_f_2[4][8] = lock_i_2[4][8];
  lock_f_2[4][9] = lock_i_2[4][9];
  lock_f_2[5][0] = lock_i_2[5][0];
  lock_f_2[5][1] = lock_i_2[5][1];
  lock_f_2[5][2] = lock_i_2[5][2];
  lock_f_2[5][3] = lock_i_2[5][3];
  lock_f_2[5][4] = lock_i_2[5][4];
  lock_f_2[5][5] = lock_i_2[5][5];
  lock_f_2[5][6] = lock_i_2[5][6];
  lock_f_2[5][7] = lock_i_2[5][7];
  lock_f_2[5][8] = lock_i_2[5][8];
  lock_f_2[5][9] = lock_i_2[5][9];
  lock_f_2[6][0] = lock_i_2[6][0];
  lock_f_2[6][1] = lock_i_2[6][1];
  lock_f_2[6][2] = lock_i_2[6][2];
  lock_f_2[6][3] = lock_i_2[6][3];
  lock_f_2[6][4] = lock_i_2[6][4];
  lock_f_2[6][5] = lock_i_2[6][5];
  lock_f_2[6][6] = lock_i_2[6][6];
  lock_f_2[6][7] = lock_i_2[6][7];
  lock_f_2[6][8] = lock_i_2[6][8];
  lock_f_2[6][9] = lock_i_2[6][9];
  lock_f_2[7][0] = lock_i_2[7][0];
  lock_f_2[7][1] = lock_i_2[7][1];
  lock_f_2[7][2] = lock_i_2[7][2];
  lock_f_2[7][3] = lock_i_2[7][3];
  lock_f_2[7][4] = lock_i_2[7][4];
  lock_f_2[7][5] = lock_i_2[7][5];
  lock_f_2[7][6] = lock_i_2[7][6];
  lock_f_2[7][7] = lock_i_2[7][7];
  lock_f_2[7][8] = lock_i_2[7][8];
  lock_f_2[7][9] = lock_i_2[7][9];
  lock_f_2[8][0] = lock_i_2[8][0];
  lock_f_2[8][1] = lock_i_2[8][1];
  lock_f_2[8][2] = lock_i_2[8][2];
  lock_f_2[8][3] = lock_i_2[8][3];
  lock_f_2[8][4] = lock_i_2[8][4];
  lock_f_2[8][5] = lock_i_2[8][5];
  lock_f_2[8][6] = lock_i_2[8][6];
  lock_f_2[8][7] = lock_i_2[8][7];
  lock_f_2[8][8] = lock_i_2[8][8];
  lock_f_2[8][9] = lock_i_2[8][9];
  lock_f_2[9][0] = lock_i_2[9][0];
  lock_f_2[9][1] = lock_i_2[9][1];
  lock_f_2[9][2] = lock_i_2[9][2];
  lock_f_2[9][3] = lock_i_2[9][3];
  lock_f_2[9][4] = lock_i_2[9][4];
  lock_f_2[9][5] = lock_i_2[9][5];
  lock_f_2[9][6] = lock_i_2[9][6];
  lock_f_2[9][7] = lock_i_2[9][7];
  lock_f_2[9][8] = lock_i_2[9][8];
  lock_f_2[9][9] = lock_i_2[9][9];
}

void uav__COLLISION_AVOIDANCE_0_bwd()
{
  print_state(X,Y,0,x_0,y_0,xf_0,yf_0);
  if ((state_0)==(INITS))
  {
    lock_i_0[x_0][y_0] = 1;
    state_0 = NEXT;
  }
  if ((state_0)==(NEXT))
  {
    if (((x_0)==(xf_0))&&((y_0)==(yf_0)))
      return;
    uav__NEXT_XY_0_bwd();
    state_0 = REQUEST;
  }
  else
    if ((state_0)==(REQUEST))
    {
      if (0)
        return;
      lock_i_0[xp_0][yp_0] = 1;
      state_0 = WAITING;
    }
    else
      if ((state_0)==(WAITING))
      {
        if (((lock_f_1[xp_0][yp_0])!=(0))||((lock_f_2[xp_0][yp_0])!=(0)))
          return;
        state_0 = MOVE;
      }
      else
        if ((state_0)==(MOVE))
        {
          if (GRID_MOVE(xp_0,yp_0,1))
            return;
          lock_i_0[x_0][y_0] = 0;
          x_0 = xp_0;
          y_0 = yp_0;
          state_0 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_0_fwd()
{
  print_state(X,Y,0,x_0,y_0,xf_0,yf_0);
  if ((state_0)==(INITS))
  {
    lock_f_0[x_0][y_0] = 1;
    state_0 = NEXT;
  }
  if ((state_0)==(NEXT))
  {
    if (((x_0)==(xf_0))&&((y_0)==(yf_0)))
      return;
    uav__NEXT_XY_0_fwd();
    state_0 = REQUEST;
  }
  else
    if ((state_0)==(REQUEST))
    {
      if (0)
        return;
      lock_f_0[xp_0][yp_0] = 1;
      state_0 = WAITING;
    }
    else
      if ((state_0)==(WAITING))
      {
        if (((lock_i_1[xp_0][yp_0])!=(0))||((lock_i_2[xp_0][yp_0])!=(0)))
          return;
        state_0 = MOVE;
      }
      else
        if ((state_0)==(MOVE))
        {
          if (GRID_MOVE(xp_0,yp_0,1))
            return;
          lock_f_0[x_0][y_0] = 0;
          x_0 = xp_0;
          y_0 = yp_0;
          state_0 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_1_bwd()
{
  print_state(X,Y,1,x_1,y_1,xf_1,yf_1);
  if ((state_1)==(INITS))
  {
    lock_i_1[x_1][y_1] = 1;
    state_1 = NEXT;
  }
  if ((state_1)==(NEXT))
  {
    if (((x_1)==(xf_1))&&((y_1)==(yf_1)))
      return;
    uav__NEXT_XY_1_bwd();
    state_1 = REQUEST;
  }
  else
    if ((state_1)==(REQUEST))
    {
      if ((lock_f_0[xp_1][yp_1])!=(0))
        return;
      lock_i_1[xp_1][yp_1] = 1;
      state_1 = WAITING;
    }
    else
      if ((state_1)==(WAITING))
      {
        if ((lock_f_2[xp_1][yp_1])!=(0))
          return;
        state_1 = MOVE;
      }
      else
        if ((state_1)==(MOVE))
        {
          if (GRID_MOVE(xp_1,yp_1,1))
            return;
          lock_i_1[x_1][y_1] = 0;
          x_1 = xp_1;
          y_1 = yp_1;
          state_1 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_1_fwd()
{
  print_state(X,Y,1,x_1,y_1,xf_1,yf_1);
  if ((state_1)==(INITS))
  {
    lock_f_1[x_1][y_1] = 1;
    state_1 = NEXT;
  }
  if ((state_1)==(NEXT))
  {
    if (((x_1)==(xf_1))&&((y_1)==(yf_1)))
      return;
    uav__NEXT_XY_1_fwd();
    state_1 = REQUEST;
  }
  else
    if ((state_1)==(REQUEST))
    {
      if ((lock_i_0[xp_1][yp_1])!=(0))
        return;
      lock_f_1[xp_1][yp_1] = 1;
      state_1 = WAITING;
    }
    else
      if ((state_1)==(WAITING))
      {
        if ((lock_i_2[xp_1][yp_1])!=(0))
          return;
        state_1 = MOVE;
      }
      else
        if ((state_1)==(MOVE))
        {
          if (GRID_MOVE(xp_1,yp_1,1))
            return;
          lock_f_1[x_1][y_1] = 0;
          x_1 = xp_1;
          y_1 = yp_1;
          state_1 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_2_bwd()
{
  print_state(X,Y,2,x_2,y_2,xf_2,yf_2);
  if ((state_2)==(INITS))
  {
    lock_i_2[x_2][y_2] = 1;
    state_2 = NEXT;
  }
  if ((state_2)==(NEXT))
  {
    if (((x_2)==(xf_2))&&((y_2)==(yf_2)))
      return;
    uav__NEXT_XY_2_bwd();
    state_2 = REQUEST;
  }
  else
    if ((state_2)==(REQUEST))
    {
      if (((lock_f_0[xp_2][yp_2])!=(0))||((lock_f_1[xp_2][yp_2])!=(0)))
        return;
      lock_i_2[xp_2][yp_2] = 1;
      state_2 = WAITING;
    }
    else
      if ((state_2)==(WAITING))
      {
        if (0)
          return;
        state_2 = MOVE;
      }
      else
        if ((state_2)==(MOVE))
        {
          if (GRID_MOVE(xp_2,yp_2,1))
            return;
          lock_i_2[x_2][y_2] = 0;
          x_2 = xp_2;
          y_2 = yp_2;
          state_2 = NEXT;
        }
}

void uav__COLLISION_AVOIDANCE_2_fwd()
{
  print_state(X,Y,2,x_2,y_2,xf_2,yf_2);
  if ((state_2)==(INITS))
  {
    lock_f_2[x_2][y_2] = 1;
    state_2 = NEXT;
  }
  if ((state_2)==(NEXT))
  {
    if (((x_2)==(xf_2))&&((y_2)==(yf_2)))
      return;
    uav__NEXT_XY_2_fwd();
    state_2 = REQUEST;
  }
  else
    if ((state_2)==(REQUEST))
    {
      if (((lock_i_0[xp_2][yp_2])!=(0))||((lock_i_1[xp_2][yp_2])!=(0)))
        return;
      lock_f_2[xp_2][yp_2] = 1;
      state_2 = WAITING;
    }
    else
      if ((state_2)==(WAITING))
      {
        if (0)
          return;
        state_2 = MOVE;
      }
      else
        if ((state_2)==(MOVE))
        {
          if (GRID_MOVE(xp_2,yp_2,1))
            return;
          lock_f_2[x_2][y_2] = 0;
          x_2 = xp_2;
          y_2 = yp_2;
          state_2 = NEXT;
        }
}

void uav__NEXT_XY_0_bwd()
{
  xp_0 = x_0;
  yp_0 = y_0;
  if ((x_0)<(xf_0))
    xp_0 = (x_0)+(1);
  else
    if ((x_0)>(xf_0))
      xp_0 = (x_0)-(1);
    else
      if ((y_0)<(yf_0))
        yp_0 = (y_0)+(1);
      else
        yp_0 = (y_0)-(1);
}

void uav__NEXT_XY_0_fwd()
{
  xp_0 = x_0;
  yp_0 = y_0;
  if ((x_0)<(xf_0))
    xp_0 = (x_0)+(1);
  else
    if ((x_0)>(xf_0))
      xp_0 = (x_0)-(1);
    else
      if ((y_0)<(yf_0))
        yp_0 = (y_0)+(1);
      else
        yp_0 = (y_0)-(1);
}

void uav__NEXT_XY_1_bwd()
{
  xp_1 = x_1;
  yp_1 = y_1;
  if ((x_1)<(xf_1))
    xp_1 = (x_1)+(1);
  else
    if ((x_1)>(xf_1))
      xp_1 = (x_1)-(1);
    else
      if ((y_1)<(yf_1))
        yp_1 = (y_1)+(1);
      else
        yp_1 = (y_1)-(1);
}

void uav__NEXT_XY_1_fwd()
{
  xp_1 = x_1;
  yp_1 = y_1;
  if ((x_1)<(xf_1))
    xp_1 = (x_1)+(1);
  else
    if ((x_1)>(xf_1))
      xp_1 = (x_1)-(1);
    else
      if ((y_1)<(yf_1))
        yp_1 = (y_1)+(1);
      else
        yp_1 = (y_1)-(1);
}

void uav__NEXT_XY_2_bwd()
{
  xp_2 = x_2;
  yp_2 = y_2;
  if ((x_2)<(xf_2))
    xp_2 = (x_2)+(1);
  else
    if ((x_2)>(xf_2))
      xp_2 = (x_2)-(1);
    else
      if ((y_2)<(yf_2))
        yp_2 = (y_2)+(1);
      else
        yp_2 = (y_2)-(1);
}

void uav__NEXT_XY_2_fwd()
{
  xp_2 = x_2;
  yp_2 = y_2;
  if ((x_2)<(xf_2))
    xp_2 = (x_2)+(1);
  else
    if ((x_2)>(xf_2))
      xp_2 = (x_2)-(1);
    else
      if ((y_2)<(yf_2))
        yp_2 = (y_2)+(1);
      else
        yp_2 = (y_2)-(1);
}


//---------------------------------------------------------
//-- end of file
//---------------------------------------------------------
