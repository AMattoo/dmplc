/********************************************************************/
//-- begin target (GNU_CPP) specific thunk
/********************************************************************/

#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

/*
int GRID_MOVE(unsigned char xp,unsigned char yp,double z)
{
  return rand() < (RAND_MAX / 10 * 6);
}
*/

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int roundNum = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(roundNum == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++roundNum, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}


/********************************************************************/
//-- end target (GNU_CPP) specific thunk
/********************************************************************/

/********************************************************************/
//-- begin header files
/********************************************************************/

#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <cassert>
#include <cmath>

#include "madara/knowledge_engine/Knowledge_Base.h"
#include "madara/knowledge_engine/Knowledge_Record.h"
#include "madara/knowledge_engine/Functions.h"
#include "madara/transport/Packet_Scheduler.h"
#include "madara/threads/Threader.h"
#include "madara/filters/Generic_Filters.h"

#define _GAMS_VREP_ 1
#include "gams/controllers/Base_Controller.h"
#include "gams/algorithms/Base_Algorithm.h"
#include "gams/variables/Sensor.h"
#include "gams/platforms/Base_Platform.h"
#include "gams/platforms/vrep/VREP_Base.h"
#include "gams/variables/Self.h"
#include "gams/utility/GPS_Position.h"
#include "gams/utility/Axes.h"

#include "dmpl/Reference.hpp"
#include "dmpl/ArrayReference.hpp"
#include "dmpl/Default_Logger.hpp"

/********************************************************************/
//-- end header files
/********************************************************************/

// begin dmpl namespace
namespace dmpl
{

/********************************************************************/
//-- typedefs
/********************************************************************/
typedef   Madara::Knowledge_Record::Integer   Integer;

/********************************************************************/
//-- namespace shortcuts
/********************************************************************/
namespace engine = Madara::Knowledge_Engine;
namespace threads = Madara::Threads;
namespace containers = engine::Containers;
namespace controllers = gams::controllers;
namespace platforms = gams::platforms;
namespace variables = gams::variables;

/********************************************************************/
//-- for readability so we don't have to use full namespaces
/********************************************************************/
using containers::Reference;
using containers::ArrayReference;
using containers::CachedReference;
using containers::StorageManager::Proactive;
using Madara::knowledge_cast;

/********************************************************************/
//-- declare knowledge base
/********************************************************************/
engine::Knowledge_Base knowledge;

/********************************************************************/
//-- Needed as a workaround for non-const-correctness in Madara;
//-- Use carefully
/********************************************************************/
inline engine::Function_Arguments &__strip_const(const engine::Function_Arguments &c)
{
  return const_cast<engine::Function_Arguments &>(c);
}

/********************************************************************/
//-- Needed to construct function arguments
/********************************************************************/
inline engine::Function_Arguments &__chain_set(engine::Function_Arguments &c, int i, Madara::Knowledge_Record v)
{
  c[i] = v;
  return c;
}

/********************************************************************/
//-- default transport variables
/********************************************************************/
std::string host ("");
std::vector<std::string> platform_params;
std::string platform_name ("debug");
typedef void (*PlatformInitFn)(const std::vector<std::string> &, engine::Knowledge_Base &);
typedef std::map<std::string, PlatformInitFn> PlatformInitFns;
PlatformInitFns platform_init_fns;
const std::string default_multicast ("239.255.0.1:4150");
Madara::Transport::QoS_Transport_Settings settings;
int write_fd (-1);
ofstream expect_file;
std::string node_name ("none");
std::string role_name ("none");

/********************************************************************/
//-- Containers for commonly used global variables
/********************************************************************/
Reference<unsigned int> id(knowledge, ".id");
Reference<unsigned int>  num_processes(knowledge, ".num_processes");
engine::Knowledge_Update_Settings private_update (true);

/********************************************************************/
//-- barrier variables
/********************************************************************/
ArrayReference<unsigned int, 5> mbarrier_COLLISION_AVOIDANCE(knowledge, "mbarrier_COLLISION_AVOIDANCE");
ArrayReference<unsigned int, 5> mbarrier_COLLISION_AVOIDANCE2(knowledge, "mbarrier_COLLISION_AVOIDANCE2");

/********************************************************************/
//-- number of participating processes
/********************************************************************/
unsigned int processes (5);

/********************************************************************/
//-- Defining program-specific constants
/********************************************************************/
#define BottomY -2.25
#define LeftX -2.25
#define MOVE 4
#define NEXT 1
#define REQUEST 2
#define RightX 2.25
#define TopY 2.25
#define WAITING 3
#define X 10
#define Y 10

/********************************************************************/
//-- Begin defining variables for node uav
/********************************************************************/

// begin node_uav namespace
namespace node_uav
{

/********************************************************************/
//-- Defining global variables at node scope
/********************************************************************/
ArrayReference<_Bool, 5> init(knowledge, "init");
_Bool var_init_init (0);
ArrayReference<_Bool, 5, 10, 10> lock(knowledge, "lock");
ArrayReference<short, 5> lx(knowledge, "lx");
short var_init_lx (0);
ArrayReference<short, 5> ly(knowledge, "ly");
short var_init_ly (0);

/********************************************************************/
//-- Defining local variables at node scope
/********************************************************************/
Reference<short> state(knowledge, ".state");
short var_init_state (0);
Reference<_Bool> waypointValid(knowledge, ".waypointValid");
_Bool var_init_waypointValid (0);
Reference<short> x(knowledge, ".x");
short var_init_x (0);
Reference<short> xp(knowledge, ".xp");
short var_init_xp (0);
Reference<short> xt(knowledge, ".xt");
short var_init_xt (0);
Reference<short> y(knowledge, ".y");
short var_init_y (0);
Reference<short> yp(knowledge, ".yp");
short var_init_yp (0);
Reference<short> yt(knowledge, ".yt");
short var_init_yt (0);

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
ArrayReference<Proactive<_Bool, CachedReference<_Bool> >, 5, 10, 10> thread0_lock(knowledge, "lock");

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
CachedReference<short> thread0_state(knowledge, ".state");
CachedReference<_Bool> thread0_waypointValid(knowledge, ".waypointValid");
CachedReference<short> thread0_x(knowledge, ".x");
CachedReference<short> thread0_xp(knowledge, ".xp");
CachedReference<short> thread0_xt(knowledge, ".xt");
CachedReference<short> thread0_y(knowledge, ".y");
CachedReference<short> thread0_yp(knowledge, ".yp");
CachedReference<short> thread0_yt(knowledge, ".yt");

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Begin defining variables for role Leader
/********************************************************************/

// begin node_uav_role_Leader namespace
namespace node_uav_role_Leader
{

/********************************************************************/
//-- Defining global variables at role scope
/********************************************************************/
ArrayReference<short, 5> foo(knowledge, "foo");
short var_init_foo (0);

/********************************************************************/
//-- Defining local variables at role scope
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
ArrayReference<Proactive<short, CachedReference<short> >, 5> thread1_foo(knowledge, "foo");

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
ArrayReference<Proactive<_Bool, CachedReference<_Bool> >, 5> thread2_init(knowledge, "init");
ArrayReference<Proactive<short, CachedReference<short> >, 5> thread2_lx(knowledge, "lx");
ArrayReference<Proactive<short, CachedReference<short> >, 5> thread2_ly(knowledge, "ly");

/********************************************************************/
//-- Defining local variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
CachedReference<_Bool> thread2_waypointValid(knowledge, ".waypointValid");
CachedReference<short> thread2_xp(knowledge, ".xp");
CachedReference<short> thread2_yp(knowledge, ".yp");

} // end node_uav_role_Leader namespace

/********************************************************************/
//-- End defining variables for role Leader
/********************************************************************/

/********************************************************************/
//-- Begin defining variables for role Protector
/********************************************************************/

// begin node_uav_role_Protector namespace
namespace node_uav_role_Protector
{

/********************************************************************/
//-- Defining global variables at role scope
/********************************************************************/

/********************************************************************/
//-- Defining local variables at role scope
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread COLLISION_AVOIDANCE2
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining global variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
ArrayReference<Proactive<_Bool, CachedReference<_Bool> >, 5> thread3_init(knowledge, "init");
ArrayReference<Proactive<short, CachedReference<short> >, 5> thread3_lx(knowledge, "lx");
ArrayReference<Proactive<short, CachedReference<short> >, 5> thread3_ly(knowledge, "ly");

/********************************************************************/
//-- Defining local variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/

/********************************************************************/
//-- Defining local variables at scope of thread WAYPOINT
//-- Used to implement Read-Execute-Write semantics
/********************************************************************/
CachedReference<_Bool> thread3_waypointValid(knowledge, ".waypointValid");
CachedReference<short> thread3_xt(knowledge, ".xt");
CachedReference<short> thread3_yt(knowledge, ".yt");

} // end node_uav_role_Protector namespace

/********************************************************************/
//-- End defining variables for role Protector
/********************************************************************/

} // end node_uav namespace

/********************************************************************/
//-- End defining variables for node uav
/********************************************************************/

/********************************************************************/
//-- helper tokenizer method to handle command line arguments
/********************************************************************/
template < class ContainerT >
void tokenize(const std::string& str, ContainerT& tokens,
              const std::string& delimiters = " ", bool trimEmpty = false)
{
   std::string::size_type pos, lastPos = 0;

   typedef typename ContainerT::value_type value_type;
   typedef typename ContainerT::size_type size_type;

   while(true)
   {
      pos = str.find_first_of(delimiters, lastPos);
      if(pos == std::string::npos)
      {
         pos = str.length();

         if(pos != lastPos || !trimEmpty)
            tokens.push_back(value_type(str.data()+lastPos,
                  (size_type)pos-lastPos ));

         break;
      }
      else
      {
         if(pos != lastPos || !trimEmpty)
            tokens.push_back(value_type(str.data()+lastPos,
                  (size_type)pos-lastPos ));
      }

      lastPos = pos + 1;
   }
}

/********************************************************************/
//-- handle arguments from the command line
/********************************************************************/
void handle_arguments (int argc, char ** argv)
{
  for (int i = 1; i < argc; ++i)
  {
    std::string arg1 (argv[i]);

    if (arg1 == "-m" || arg1 == "--multicast")
    {
      if (i + 1 < argc)
      {
        settings.hosts.push_back (argv[i + 1]);
        settings.type = Madara::Transport::MULTICAST;
      }
      ++i;
    }
    else if (arg1 == "-p" || arg1 == "--platform")
    {
      if (i + 1 < argc)
      {
        tokenize(std::string(argv[i + 1]), platform_params, ":");
        platform_name = (platform_params[0]);
      }
      ++i;
    }
    else if (arg1 == "-b" || arg1 == "--broadcast")
    {
      if (i + 1 < argc)
      {
        settings.hosts.push_back (argv[i + 1]);
        settings.type = Madara::Transport::BROADCAST;
      }
      ++i;
    }
    else if (arg1 == "-u" || arg1 == "--udp")
    {
      if (i + 1 < argc)
      {
        settings.hosts.push_back (argv[i + 1]);
        settings.type = Madara::Transport::UDP;
      }
      ++i;
    }
    else if (arg1 == "-o" || arg1 == "--host")
    {
      if (i + 1 < argc)
        host = argv[i + 1];
        
      ++i;
    }
    else if (arg1 == "-d" || arg1 == "--domain")
    {
      if (i + 1 < argc)
        settings.domains = argv[i + 1];
        
      ++i;
    }
    else if (arg1 == "-i" || arg1 == "--id")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> settings.id;
      }
      ++i;
    }
    else if (arg1 == "-l" || arg1 == "--level")
    {
      if (i + 1 < argc)
      {
        int log_level = 0;
        std::stringstream buffer (argv[i + 1]);
        buffer >> log_level;
        Madara::Logger::global_logger->set_level(log_level);
      }
      ++i;
    }
    else if (arg1 == "--drop-rate")
    {
      if (i + 1 < argc)
      {
        double drop_rate;
        std::stringstream buffer (argv[i + 1]);
        buffer >> drop_rate;
        std::cerr << "drop_rate: " << drop_rate << std::endl;
        settings.update_drop_rate (drop_rate,
          Madara::Transport::PACKET_DROP_PROBABLISTIC);
      }
      ++i;
    }
    else if (arg1 == "-e" || arg1 == "--expect-log")
    {
      if (i + 1 < argc)
      {
        expect_file.open(argv[i + 1], ios::out | ios::trunc);
      }
      ++i;
    }
    else if (arg1 == "-f" || arg1 == "--logfile")
    {
      if (i + 1 < argc)
      {
        ::Madara::Logger::global_logger->clear();
        ::Madara::Logger::global_logger->add_file(argv[i + 1]);
      }
      ++i;
    }
    else if (arg1 == "-r" || arg1 == "--reduced")
    {
      settings.send_reduced_message_header = true;
    }
    else if (arg1 == "--write-fd")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> write_fd;
      }
      ++i;
    }
    else if (arg1 == "--node")
    {
      if (i + 1 < argc)
      {
        node_name = argv[i + 1];
      }
      ++i;
    }
    else if (arg1 == "--role")
    {
      if (i + 1 < argc)
      {
        role_name = argv[i + 1];
      }
      ++i;
    }

    //-- Providing init for input variables of node uav
    else if (arg1 == "--var_x")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> node_uav::var_init_x;
      }
      
      ++i;
    }
    else if (arg1 == "--var_y")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> node_uav::var_init_y;
      }
      
      ++i;
    }
    else if (arg1 == "--var_xt")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> node_uav::var_init_xt;
      }
      
      ++i;
    }
    else if (arg1 == "--var_yt")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> node_uav::var_init_yt;
      }
      
      ++i;
    }
    else
    {
      madara_log (Madara::Logger::LOG_EMERGENCY, (LM_DEBUG, 
        "\nProgram summary for %s:\n\n"\
        " [-p|--platform type]     platform for loop (vrep, dronerk)\n"\
        " [-b|--broadcast ip:port] the broadcast ip to send and listen to\n"\
        " [-d|--domain domain]     the knowledge domain to send and listen to\n"\
        " [-e|--expect-log file]   file to log variables related to 'expect' clauses\n"\
        " [-f|--logfile file]      log to a file\n"\
        " [-i|--id id]             the id of this agent (should be non-negative)\n"\
        " [-l|--level level]       the logger level (0+, higher is higher detail)\n"\
        " [-m|--multicast ip:port] the multicast ip to send and listen to\n"\
        " [-mb|--max-barrier-time time] time in seconds to barrier for other processes\n"\
        " [-o|--host hostname]     the hostname of this process (def:localhost)\n"\
        " [-r|--reduced]           use the reduced message header\n"\
        " [-u|--udp ip:port]       the udp ips to send to (first is self to bind to)\n"\
        " [--node name]            select the node name\n"\
        " [--role name]            select the role name\n"\
        " [--var_x] sets the initial value of variable x\n"\
        " [--var_y] sets the initial value of variable y\n"\
        " [--var_xt] sets the initial value of variable xt\n"\
        " [--var_yt] sets the initial value of variable yt\n"\
        , argv[0]));
      exit (0);
    }
  }
}

/********************************************************************/
//-- helper function to check validity of supplied arguments
/********************************************************************/
void check_argument_sanity()
{
  if(node_name == "uav" && role_name == "Leader") return;
  if(node_name == "uav" && role_name == "Protector") return;
  throw std::runtime_error("ERROR : illegal node and role combination : ("
                           + node_name + " , " + role_name + ")");
}

/********************************************************************/
//-- Forward declaring global functions
/********************************************************************/

/********************************************************************/
//-- Forward declaring node and role functions
/********************************************************************/
// begin node_uav namespace
namespace node_uav
{
Madara::Knowledge_Record
StartingPosition (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread0_NEXT_XY (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread1_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args, engine::Variables & vars);

/********************************************************************/
//-- Declaring functions for role Leader
/********************************************************************/

// begin node_uav_role_Leader namespace
namespace node_uav_role_Leader
{
Madara::Knowledge_Record
thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread1_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread2_WAYPOINT (engine::Function_Arguments & args, engine::Variables & vars);
} // end node_uav_role_Leader namespace


/********************************************************************/
//-- Declaring functions for role Protector
/********************************************************************/

// begin node_uav_role_Protector namespace
namespace node_uav_role_Protector
{
Madara::Knowledge_Record
thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread1_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
thread3_WAYPOINT (engine::Function_Arguments & args, engine::Variables & vars);
} // end node_uav_role_Protector namespace

} // end node_uav namespace


/********************************************************************/
//-- GAMS variables and functions
/********************************************************************/

#include "dmpl/PlatformGAMS.hpp"

/********************************************************************/
//-- Defining global functions
/********************************************************************/


/********************************************************************/
//-- Begin node uav
/********************************************************************/

// begin node_uav namespace
namespace node_uav
{
//-- @InitSim
Madara::Knowledge_Record
StartingPosition (engine::Function_Arguments & args, engine::Variables & vars)
{

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body
  {
    (void) (GRID_INIT (X, Y, LeftX, RightX, TopY, BottomY));
  }
  {
    (void) (GRID_PLACE (x, y, 0.5));
  }

  //-- Insert return statement, in case user program did not
  return Integer(0);
}

//-- @BarrierSync
//-- @PlatformController
Madara::Knowledge_Record
thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars)
{
  //-- Pull all referenced locals/globals
  thread0_x.pull();
  thread0_y.pull();
  thread0_xt.pull();
  thread0_yt.pull();
  thread0_state.pull();
  thread0_waypointValid.pull();
  thread0_xp.pull();
  thread0_yp.pull();
  thread0_lock.pull();

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body
  {
    (void) (print_state (X, Y, id, thread0_x, thread0_y, thread0_xt, thread0_yt));
  }
  if ((thread0_state == NEXT))
  {
    if (((thread0_x == thread0_xt) && (thread0_y == thread0_yt)))
    {
      return Integer(0);
    }
    if ((thread0_NEXT_XY (
           __strip_const(engine::Function_Arguments(0))
          , vars).to_integer() == 0 ? false : true))
    {
      return Integer(0);
    }
    thread0_state = REQUEST;
  }
  else
  {
    if ((thread0_state == REQUEST))
    {
      if ((id == 1 && ((thread0_lock[0][thread0_xp][thread0_yp] != Integer (0)))) || 
        (id == 2 && ((thread0_lock[0][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[1][thread0_xp][thread0_yp] != Integer (0)))) || 
        (id == 3 && ((thread0_lock[0][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[1][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[2][thread0_xp][thread0_yp] != Integer (0)))) || 
        (id == 4 && ((thread0_lock[0][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[1][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[2][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[3][thread0_xp][thread0_yp] != Integer (0)))))
      {
        return Integer(0);
      }
      thread0_lock[id][thread0_xp][thread0_yp] = Integer (1);
      thread0_state = WAITING;
    }
    else
    {
      if ((thread0_state == WAITING))
      {
        if ((id == 0 && ((thread0_lock[1][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[2][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[3][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[4][thread0_xp][thread0_yp] != Integer (0)))) || 
          (id == 1 && ((thread0_lock[2][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[3][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[4][thread0_xp][thread0_yp] != Integer (0)))) || 
          (id == 2 && ((thread0_lock[3][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[4][thread0_xp][thread0_yp] != Integer (0)))) || 
          (id == 3 && ((thread0_lock[4][thread0_xp][thread0_yp] != Integer (0)))))
        {
          return Integer(0);
        }
        thread0_state = MOVE;
      }
      else
      {
        if ((thread0_state == MOVE))
        {
          if ((GRID_MOVE (thread0_xp, thread0_yp, 0.5)))
          {
            return Integer(0);
          }
          thread0_lock[id][thread0_x][thread0_y] = Integer (0);
          thread0_x = thread0_xp;
          thread0_y = thread0_yp;
          thread0_state = NEXT;
        }
      }
    }
  }

  //-- Push all referenced locals/globals
  thread0_x.push();
  thread0_y.push();
  thread0_xt.push();
  thread0_yt.push();
  thread0_state.push();
  thread0_waypointValid.push();
  thread0_xp.push();
  thread0_yp.push();
  thread0_lock[id].push();

  //-- Insert return statement, in case user program did not
  return Integer(0);
}

Madara::Knowledge_Record
thread0_NEXT_XY (engine::Function_Arguments & args, engine::Variables & vars)
{

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body
  if ((!thread0_waypointValid))
  {
    return (Integer(Integer (1)));
  }
  if (((((thread0_xt < Integer (0)) || (thread0_xt >= X)) || (thread0_yt < Integer (0))) || (thread0_yt >= Y)))
  {
    return (Integer(Integer (1)));
  }
  thread0_xp = thread0_x;
  thread0_yp = thread0_y;
  if ((thread0_x < thread0_xt))
  {
    thread0_xp = (thread0_x + Integer (1));
  }
  else
  {
    if ((thread0_x > thread0_xt))
    {
      thread0_xp = (thread0_x - Integer (1));
    }
    else
    {
      if ((thread0_y < thread0_yt))
      {
        thread0_yp = (thread0_y + Integer (1));
      }
      else
      {
        thread0_yp = (thread0_y - Integer (1));
      }
    }
  }
  return (Integer(Integer (0)));

  //-- Insert return statement, in case user program did not
  return Integer(0);
}

//-- @BarrierSync
Madara::Knowledge_Record
thread1_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args, engine::Variables & vars)
{
  //-- Pull all referenced locals/globals

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body

  //-- Push all referenced locals/globals

  //-- Insert return statement, in case user program did not
  return Integer(0);
}


/********************************************************************/
//-- Defining functions for role Leader
/********************************************************************/

// begin node_uav_role_Leader namespace
namespace node_uav_role_Leader
{

/********************************************************************/
//-- Remodify barries variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_BARRIERS_COLLISION_AVOIDANCE (engine::Function_Arguments &,
  engine::Variables & vars)
{
  mbarrier_COLLISION_AVOIDANCE[id].mark_modified();
  return Integer (0);
}

/********************************************************************/
//-- Remodify global shared variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_GLOBALS_COLLISION_AVOIDANCE (engine::Function_Arguments & args,
  engine::Variables & vars)
{
  // Remodifying common global variables
  REMODIFY_BARRIERS_COLLISION_AVOIDANCE (args, vars);
  // Remodifying thread-specific global variables
  lock[id].mark_modified();
  return Integer (0);
}

/********************************************************************/
//-- Remodify barries variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_BARRIERS_COLLISION_AVOIDANCE2 (engine::Function_Arguments &,
  engine::Variables & vars)
{
  mbarrier_COLLISION_AVOIDANCE2[id].mark_modified();
  return Integer (0);
}

/********************************************************************/
//-- Remodify global shared variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_GLOBALS_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args,
  engine::Variables & vars)
{
  // Remodifying common global variables
  REMODIFY_BARRIERS_COLLISION_AVOIDANCE2 (args, vars);
  // Remodifying thread-specific global variables
  foo[id].mark_modified();
  return Integer (0);
}
//-- @Period 100000
Madara::Knowledge_Record
thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars)
{
  return node_uav::thread0_COLLISION_AVOIDANCE(args, vars);
}

//-- @BarrierSync
//-- @Period 100000
Madara::Knowledge_Record
thread1_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args, engine::Variables & vars)
{
  //-- Pull all referenced locals/globals
  thread1_foo.pull();

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body
  thread1_foo[id] = Integer (10);

  //-- Push all referenced locals/globals
  thread1_foo[id].push();

  //-- Insert return statement, in case user program did not
  return Integer(0);
}

//-- @Period 100000
Madara::Knowledge_Record
thread2_WAYPOINT (engine::Function_Arguments & args, engine::Variables & vars)
{
  //-- Pull all referenced locals/globals
  thread2_waypointValid.pull();
  thread2_ly.pull();
  thread2_yp.pull();
  thread2_lx.pull();
  thread2_xp.pull();
  thread2_init.pull();

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body
  thread2_waypointValid = Integer (1);
  thread2_ly[id] = thread2_yp;
  thread2_lx[id] = thread2_xp;
  thread2_init[id] = Integer (1);

  //-- Push all referenced locals/globals
  thread2_waypointValid.push();
  thread2_ly[id].push();
  thread2_yp.push();
  thread2_lx[id].push();
  thread2_xp.push();
  thread2_init[id].push();

  //-- Insert return statement, in case user program did not
  return Integer(0);
}

/********************************************************************/
//-- Begin constructors for role Leader
/********************************************************************/
void initialize_foo ()
{
}
void initialize_init ()
{
  init[id] = Integer (0);
}
void initialize_lock ()
{
  lock[id][x][y] = Integer (1);
}
void initialize_lx ()
{
  lx[id] = Integer (0);
}
void initialize_ly ()
{
  ly[id] = Integer (0);
}
void initialize_state ()
{
  state = NEXT;
}
void initialize_waypointValid ()
{
  waypointValid = Integer (0);
}
int check_init_x ()
{
  x = var_init_x;
  return (Integer(((Integer (0) <= x) && (x < X))));
}
void initialize_xp ()
{
  xp = x;
}
int check_init_xt ()
{
  xt = var_init_xt;
  return (Integer(((Integer (0) <= xt) && (xt < X))));
}
int check_init_y ()
{
  y = var_init_y;
  return (Integer(((Integer (0) <= y) && (y < Y))));
}
void initialize_yp ()
{
  yp = y;
}
int check_init_yt ()
{
  yt = var_init_yt;
  return (Integer(((Integer (0) <= yt) && (yt < Y))));
}
void constructor ()
{
  if(!check_init_x ()) throw std::runtime_error("ERROR: illegal initial value of variable x");
  if(!check_init_xt ()) throw std::runtime_error("ERROR: illegal initial value of variable xt");
  if(!check_init_y ()) throw std::runtime_error("ERROR: illegal initial value of variable y");
  if(!check_init_yt ()) throw std::runtime_error("ERROR: illegal initial value of variable yt");
  initialize_foo ();
  initialize_init ();
  initialize_lock ();
  initialize_lx ();
  initialize_ly ();
  initialize_state ();
  initialize_waypointValid ();
  initialize_xp ();
  initialize_yp ();
}

} // end node_uav_role_Leader namespace


/********************************************************************/
//-- Defining functions for role Protector
/********************************************************************/

// begin node_uav_role_Protector namespace
namespace node_uav_role_Protector
{

/********************************************************************/
//-- Remodify barries variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_BARRIERS_COLLISION_AVOIDANCE (engine::Function_Arguments &,
  engine::Variables & vars)
{
  mbarrier_COLLISION_AVOIDANCE[id].mark_modified();
  return Integer (0);
}

/********************************************************************/
//-- Remodify global shared variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_GLOBALS_COLLISION_AVOIDANCE (engine::Function_Arguments & args,
  engine::Variables & vars)
{
  // Remodifying common global variables
  REMODIFY_BARRIERS_COLLISION_AVOIDANCE (args, vars);
  // Remodifying thread-specific global variables
  lock[id].mark_modified();
  return Integer (0);
}

/********************************************************************/
//-- Remodify barries variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_BARRIERS_COLLISION_AVOIDANCE2 (engine::Function_Arguments &,
  engine::Variables & vars)
{
  mbarrier_COLLISION_AVOIDANCE2[id].mark_modified();
  return Integer (0);
}

/********************************************************************/
//-- Remodify global shared variables to force MADARA retransmit
/********************************************************************/
Madara::Knowledge_Record
REMODIFY_GLOBALS_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args,
  engine::Variables & vars)
{
  // Remodifying common global variables
  REMODIFY_BARRIERS_COLLISION_AVOIDANCE2 (args, vars);
  // Remodifying thread-specific global variables
  return Integer (0);
}
//-- @Period 100000
Madara::Knowledge_Record
thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars)
{
  return node_uav::thread0_COLLISION_AVOIDANCE(args, vars);
}

//-- @Period 100000
Madara::Knowledge_Record
thread1_COLLISION_AVOIDANCE2 (engine::Function_Arguments & args, engine::Variables & vars)
{
  return node_uav::thread1_COLLISION_AVOIDANCE2(args, vars);
}

//-- @Period 100000
Madara::Knowledge_Record
thread3_WAYPOINT (engine::Function_Arguments & args, engine::Variables & vars)
{
  //-- Pull all referenced locals/globals
  thread3_init.pull();
  thread3_waypointValid.pull();
  thread3_xt.pull();
  thread3_lx.pull();
  thread3_yt.pull();
  thread3_ly.pull();

  //-- Declare local (parameter and temporary) variables


  //-- Begin function body
  if ((thread3_init[Integer (0)] == Integer (0)))
  {
    return Integer(0);
  }
  thread3_waypointValid = Integer (1);
  if ((id == Integer (1)))
  {
    thread3_xt = (thread3_lx[Integer (0)] + Integer (1));
    thread3_yt = (thread3_ly[Integer (0)] + Integer (1));
  }
  else
  {
    if ((id == Integer (2)))
    {
      thread3_xt = (thread3_lx[Integer (0)] - Integer (1));
      thread3_yt = (thread3_ly[Integer (0)] + Integer (1));
    }
    else
    {
      if ((id == Integer (3)))
      {
        thread3_xt = (thread3_lx[Integer (0)] - Integer (1));
        thread3_yt = (thread3_ly[Integer (0)] - Integer (1));
      }
      else
      {
        if ((id == Integer (4)))
        {
          thread3_xt = (thread3_lx[Integer (0)] + Integer (1));
          thread3_yt = (thread3_ly[Integer (0)] - Integer (1));
        }
      }
    }
  }

  //-- Push all referenced locals/globals
  thread3_init[id].push();
  thread3_waypointValid.push();
  thread3_xt.push();
  thread3_lx[id].push();
  thread3_yt.push();
  thread3_ly[id].push();

  //-- Insert return statement, in case user program did not
  return Integer(0);
}

/********************************************************************/
//-- Begin constructors for role Protector
/********************************************************************/
void initialize_init ()
{
  init[id] = Integer (0);
}
void initialize_lock ()
{
  lock[id][x][y] = Integer (1);
}
void initialize_lx ()
{
  lx[id] = Integer (0);
}
void initialize_ly ()
{
  ly[id] = Integer (0);
}
void initialize_state ()
{
  state = NEXT;
}
void initialize_waypointValid ()
{
  waypointValid = Integer (0);
}
int check_init_x ()
{
  x = var_init_x;
  return (Integer(((Integer (0) <= x) && (x < X))));
}
void initialize_xp ()
{
  xp = x;
}
int check_init_xt ()
{
  xt = var_init_xt;
  return (Integer(((Integer (0) <= xt) && (xt < X))));
}
int check_init_y ()
{
  y = var_init_y;
  return (Integer(((Integer (0) <= y) && (y < Y))));
}
void initialize_yp ()
{
  yp = y;
}
int check_init_yt ()
{
  yt = var_init_yt;
  return (Integer(((Integer (0) <= yt) && (yt < Y))));
}
void constructor ()
{
  if(!check_init_x ()) throw std::runtime_error("ERROR: illegal initial value of variable x");
  if(!check_init_xt ()) throw std::runtime_error("ERROR: illegal initial value of variable xt");
  if(!check_init_y ()) throw std::runtime_error("ERROR: illegal initial value of variable y");
  if(!check_init_yt ()) throw std::runtime_error("ERROR: illegal initial value of variable yt");
  initialize_init ();
  initialize_lock ();
  initialize_lx ();
  initialize_ly ();
  initialize_state ();
  initialize_waypointValid ();
  initialize_xp ();
  initialize_yp ();
}

} // end node_uav_role_Protector namespace

} // end node_uav namespace


/********************************************************************/
//-- End node uav
/********************************************************************/


/********************************************************************/
//-- Class that encapsulates a periodic thread
/********************************************************************/

class Algo : public gams::algorithms::Base_Algorithm, protected threads::Base_Thread
{
public:
  Algo (
    unsigned period,
    const std::string &exec_func,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge = 0,
    const std::string &platform_name = "",
    variables::Sensors * sensors = 0,
    variables::Self * self = 0);
  ~Algo (void);
  virtual int analyze (void);
  virtual int plan (void);
  virtual int execute (void);
  virtual void init (engine::Knowledge_Base & context);
  virtual void init_platform ();
  virtual void run (void);
  virtual void cleanup (void);
  virtual void start (threads::Threader &threader);
protected:
  unsigned _period; //-- period in us
  controllers::Base_Controller loop;
  engine::Knowledge_Base *knowledge_;
  std::string _exec_func, _platform_name;
};

/********************************************************************/
//-- Class that encapsulates a synchronous periodic thread
/********************************************************************/

class SyncAlgo : public Algo
{
public:
  SyncAlgo (
    unsigned period,
    const std::string &exec_func,
    const std::string &thread_name,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge = 0,
    const std::string &platform_name = "",
    variables::Sensors * sensors = 0,
    variables::Self * self = 0);
  ~SyncAlgo (void);
  virtual int analyze (void);
  virtual int plan (void);
  virtual int execute (void);
  virtual void init (engine::Knowledge_Base & context);
  virtual void run (void);
  virtual void cleanup (void);
protected:
  int phase;
  std::string mbarrier;
  Madara::Knowledge_Engine::Wait_Settings wait_settings;
  engine::Compiled_Expression round_logic;
  std::map <std::string, bool>  barrier_send_list;
  std::stringstream barrier_string, barrier_data_string, barrier_sync;
  engine::Compiled_Expression barrier_logic;
  engine::Compiled_Expression barrier_data_logic;
  engine::Compiled_Expression barrier_sync_logic;
};


/********************************************************************/
//-- Begin Algo class methods
/********************************************************************/

Algo::Algo (
    unsigned period,
    const std::string &exec_func,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge,
    const std::string &platform_name,
    variables::Sensors * sensors,
    variables::Self * self) : loop(*knowledge), _platform_name(platform_name),
      Base_Algorithm (knowledge, 0, sensors, self), knowledge_(knowledge),
            _period(period), _exec_func(exec_func)
{
}

Algo::~Algo (void)
{
}

int Algo::analyze (void)
{
  return 0;
}

int Algo::plan (void)
{
  return 0;
}

void Algo::init (engine::Knowledge_Base & context)
{
  loop.init_vars (settings.id, processes);
  if(_platform_name != "") init_platform ();
  loop.init_algorithm (this);
}

void Algo::run (void)
{
  loop.run_once(); 
}

void Algo::init_platform ()
{
  loop.init_platform (_platform_name);
  platform = loop.get_platform();
}

void Algo::cleanup (void)
{
}

void Algo::start (threads::Threader &threader)
{
  std::cout << "Starting thread: " << _exec_func << " at period " << _period << " us" << std::endl;
  double hertz = 1000000.0 / _period;
  threader.run(hertz, _exec_func, this);
}

int Algo::execute (void)
{
  std::cout << "Executing thread: " << _exec_func << " at period " << _period << " us" << std::endl;
  knowledge_->evaluate (_exec_func + "()");
  return 0;
}

/********************************************************************/
//-- End Algo class methods
/********************************************************************/

/********************************************************************/
//-- Begin SyncAlgo class methods
/********************************************************************/

SyncAlgo::SyncAlgo (
    unsigned period,
    const std::string &exec_func,
    const std::string &thread_name,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge,
    const std::string &platform_name,
    variables::Sensors * sensors,
    variables::Self * self) : phase(0), mbarrier("mbarrier_" + thread_name),
      Algo (period, exec_func, knowledge, platform_name, sensors, self)
{
  wait_settings.max_wait_time = 0;
  wait_settings.poll_frequency = .1;

  round_logic = knowledge_->compile (
    knowledge_->expand_statement (_exec_func + " (); ++" + mbarrier + ".{.id}"));
}

SyncAlgo::~SyncAlgo (void)
{
}

void SyncAlgo::init (engine::Knowledge_Base & context)
{
  bool started = false;

  barrier_send_list [knowledge_->expand_statement ("" + mbarrier + ".{.id}")] = true;

  barrier_string << _exec_func << "_REMODIFY_BARRIERS () ;> ";
  barrier_data_string << _exec_func << "_REMODIFY_GLOBALS () ;> ";
  barrier_sync << "" + mbarrier + ".";
  barrier_sync << settings.id;
  barrier_sync << " = (" + mbarrier + ".";
  barrier_sync << settings.id;

  // create barrier check for all lower ids
  for (unsigned int i = 0; i < settings.id; ++i)
  {
    if (started)
    {
      barrier_string << " && ";
      barrier_data_string << " && ";
    }

    barrier_string << "" + mbarrier + ".";
    barrier_string << i;
    barrier_string << " >= " + mbarrier + ".";
    barrier_string << settings.id;
    barrier_data_string << "" + mbarrier + ".";
    barrier_data_string << i;
    barrier_data_string << " >= " + mbarrier + ".";
    barrier_data_string << settings.id;
    barrier_sync << " ; ";
    barrier_sync << "" + mbarrier + ".";
    barrier_sync << i;

    if (!started)
      started = true;
  }

  // create barrier check for all higher ids
  for (int64_t i = settings.id + 1; i < processes; ++i)
  {
    if (started)
    {
      barrier_string << " && ";
      barrier_data_string << " && ";
    }

    barrier_string << "" + mbarrier + ".";
    barrier_string << i;
    barrier_string << " >= " + mbarrier + ".";
    barrier_string << settings.id;
    barrier_data_string << "" + mbarrier + ".";
    barrier_data_string << i;
    barrier_data_string << " >= " + mbarrier + ".";
    barrier_data_string << settings.id;
    barrier_sync << " ; ";
    barrier_sync << "" + mbarrier + ".";
    barrier_sync << i;

    if (!started)
      started = true;
  }

  barrier_sync << ")";

  // Compile frequently used expressions
  std::cout << "barrier_string: " << barrier_string.str() << std::endl;
  barrier_logic = knowledge_->compile (barrier_string.str ());
  barrier_data_logic = knowledge_->compile (barrier_data_string.str ());
  barrier_sync_logic = knowledge_->compile (barrier_sync.str ());
  Algo::init(context);
}

void SyncAlgo::run (void)
{
  {
    // Pre-round barrier increment
    if(phase == 0)
    {
      wait_settings.send_list = barrier_send_list; 
      wait_settings.delay_sending_modifieds = true; 
      knowledge_->evaluate ("++" + mbarrier + ".{.id}", wait_settings); 
      phase++;
    }
    if(phase == 1)
    {
      // remodify our globals and send all updates 
      wait_settings.send_list.clear (); 
      wait_settings.delay_sending_modifieds = false; 
      // first barrier for new data from previous round 
      if(knowledge_->evaluate (barrier_data_logic, wait_settings).to_integer()) 
        phase++;
    }
    if(phase == 2)
    {
      // Send only barrier information 
      wait_settings.send_list = barrier_send_list; 
      // Execute main user logic 
      wait_settings.delay_sending_modifieds = true; 
      Algo::run(); 
      phase++;
    }
    if(phase == 3)
    {
      // second barrier for waiting on others to finish round 
      // Increment barrier and only send barrier update 
      wait_settings.send_list = barrier_send_list; 
      wait_settings.delay_sending_modifieds = false; 
      if(knowledge_->evaluate (barrier_logic, wait_settings).to_integer()) 
        phase = 0;
    }
  }
}

void SyncAlgo::cleanup (void)
{
}

int SyncAlgo::analyze (void)
{
  return 0;
}

int SyncAlgo::plan (void)
{
  return 0;
}

int SyncAlgo::execute (void)
{
  knowledge_->evaluate (round_logic, wait_settings);
  return 0;
}

/********************************************************************/
//-- End SyncAlgo class methods
/********************************************************************/
} // end dmpl namespace

using namespace dmpl;


/********************************************************************/
//-- Helper function to convert objects to strings
/********************************************************************/

template<class T> std::string to_string(const T &in)
{
  std::stringstream ss;
  ss << in;
  return ss.str();
}

/********************************************************************/
//-- Initialize VREP
/********************************************************************/

void init_vrep(const std::vector<std::string> &params, engine::Knowledge_Base &knowledge)
{
  if(params.size() >= 2 && params[1].size() > 0)
    knowledge.set(".vrep_host", params[1]);
  else
    knowledge.set(".vrep_host", "127.0.0.1");
  if(params.size() >= 3 && params[2].size() > 0)
    knowledge.set(".vrep_port", params[2]);
  else
    knowledge.set(".vrep_port", to_string(19905+settings.id));
  if(params.size() >= 4 && params[3].size() > 0)
    knowledge.set(".vrep_sw_position", params[3]);
  else
    knowledge.set(".vrep_sw_position", "40.4464255,-79.9499426");
  if(params.size() >= 5 && params[4].size() > 0)
    knowledge.set(".vrep_uav_move_speed", params[4]);
  else
    knowledge.set(".vrep_uav_move_speed", "0.4");
  knowledge.set("vrep_ready", "1");
}

/********************************************************************/
//-- The main function. This is where everything starts.
/********************************************************************/

int main (int argc, char ** argv)
{
  settings.type = Madara::Transport::MULTICAST;
  platform_init_fns["vrep"] = init_vrep;
  platform_init_fns["vrep-uav"] = init_vrep;
  platform_init_fns["vrep-heli"] = init_vrep;
  platform_init_fns["vrep-ant"] = init_vrep;
  platform_init_fns["vrep-uav-ranger"] = init_vrep;

  //-- handle any command line arguments and check their sanity
  handle_arguments (argc, argv);
  check_argument_sanity ();

  if (settings.hosts.size () == 0)
  {
    //-- setup default transport as multicast
    settings.hosts.push_back (default_multicast);
    settings.add_receive_filter (Madara::Filters::log_aggregate);
    settings.add_send_filter (Madara::Filters::log_aggregate);
  }

  settings.queue_length = 1000000;

  settings.set_deadline(1);

  //-- configure the knowledge base with the transport settings
  knowledge.attach_transport(host, settings);

  //-- Initialize commonly used local variables
  id = settings.id;
  num_processes = processes;
  if(id < 0 || id >= processes) {
    std::cerr << "ERROR: Invalid node id: " << settings.id 
              << "  valid range: [0, " << processes - 1 << "]" << std::endl;
    exit(1);
  }

  /******************************************************************/
  //-- Invoking constructors
  /******************************************************************/
  if(node_name == "uav" && role_name == "Leader") node_uav::node_uav_role_Leader::constructor ();
  if(node_name == "uav" && role_name == "Protector") node_uav::node_uav_role_Protector::constructor ();

  //-- Defining thread functions for MADARA
  knowledge.define_function ("node_uav_role_Leader_COLLISION_AVOIDANCE_REMODIFY_BARRIERS",
                              node_uav::node_uav_role_Leader::REMODIFY_BARRIERS_COLLISION_AVOIDANCE);
  knowledge.define_function ("node_uav_role_Leader_COLLISION_AVOIDANCE_REMODIFY_GLOBALS",
                              node_uav::node_uav_role_Leader::REMODIFY_GLOBALS_COLLISION_AVOIDANCE);
  knowledge.define_function ("node_uav_role_Leader_COLLISION_AVOIDANCE",
                              node_uav::node_uav_role_Leader::thread0_COLLISION_AVOIDANCE);
  knowledge.define_function ("node_uav_role_Leader_COLLISION_AVOIDANCE2_REMODIFY_BARRIERS",
                              node_uav::node_uav_role_Leader::REMODIFY_BARRIERS_COLLISION_AVOIDANCE2);
  knowledge.define_function ("node_uav_role_Leader_COLLISION_AVOIDANCE2_REMODIFY_GLOBALS",
                              node_uav::node_uav_role_Leader::REMODIFY_GLOBALS_COLLISION_AVOIDANCE2);
  knowledge.define_function ("node_uav_role_Leader_COLLISION_AVOIDANCE2",
                              node_uav::node_uav_role_Leader::thread1_COLLISION_AVOIDANCE2);
  knowledge.define_function ("node_uav_role_Leader_WAYPOINT",
                              node_uav::node_uav_role_Leader::thread2_WAYPOINT);
  knowledge.define_function ("node_uav_role_Protector_COLLISION_AVOIDANCE_REMODIFY_BARRIERS",
                              node_uav::node_uav_role_Protector::REMODIFY_BARRIERS_COLLISION_AVOIDANCE);
  knowledge.define_function ("node_uav_role_Protector_COLLISION_AVOIDANCE_REMODIFY_GLOBALS",
                              node_uav::node_uav_role_Protector::REMODIFY_GLOBALS_COLLISION_AVOIDANCE);
  knowledge.define_function ("node_uav_role_Protector_COLLISION_AVOIDANCE",
                              node_uav::node_uav_role_Protector::thread0_COLLISION_AVOIDANCE);
  knowledge.define_function ("node_uav_role_Protector_COLLISION_AVOIDANCE2_REMODIFY_BARRIERS",
                              node_uav::node_uav_role_Protector::REMODIFY_BARRIERS_COLLISION_AVOIDANCE2);
  knowledge.define_function ("node_uav_role_Protector_COLLISION_AVOIDANCE2_REMODIFY_GLOBALS",
                              node_uav::node_uav_role_Protector::REMODIFY_GLOBALS_COLLISION_AVOIDANCE2);
  knowledge.define_function ("node_uav_role_Protector_COLLISION_AVOIDANCE2",
                              node_uav::node_uav_role_Protector::thread1_COLLISION_AVOIDANCE2);
  knowledge.define_function ("node_uav_role_Protector_WAYPOINT",
                              node_uav::node_uav_role_Protector::thread3_WAYPOINT);


  //-- Initializing platform
  PlatformInitFns::iterator init_fn = platform_init_fns.find(platform_name);
  if(init_fn != platform_init_fns.end())
    init_fn->second(platform_params, knowledge);

  //-- Initializing simulation
  if(node_name == "uav" && role_name == "Leader") {
    knowledge.define_function ("initialize_platform", node_uav::StartingPosition);
  }
  if(node_name == "uav" && role_name == "Protector") {
    knowledge.define_function ("initialize_platform", node_uav::StartingPosition);
  }
  knowledge.evaluate("initialize_platform ()");

  //-- Creating algorithms
  std::vector<Algo *> algos;
  Algo *algo;
  if(node_name == "uav" && role_name == "Leader") {
    algo = new SyncAlgo(100000, "node_uav_role_Leader_COLLISION_AVOIDANCE", "COLLISION_AVOIDANCE", &knowledge, platform_name);
    algos.push_back(algo);
    algo = new SyncAlgo(100000, "node_uav_role_Leader_COLLISION_AVOIDANCE2", "COLLISION_AVOIDANCE2", &knowledge);
    algos.push_back(algo);
    algo = new Algo(100000, "node_uav_role_Leader_WAYPOINT", &knowledge);
    algos.push_back(algo);
  }
  if(node_name == "uav" && role_name == "Protector") {
    algo = new SyncAlgo(100000, "node_uav_role_Protector_COLLISION_AVOIDANCE", "COLLISION_AVOIDANCE", &knowledge, platform_name);
    algos.push_back(algo);
    algo = new SyncAlgo(100000, "node_uav_role_Protector_COLLISION_AVOIDANCE2", "COLLISION_AVOIDANCE2", &knowledge);
    algos.push_back(algo);
    algo = new Algo(100000, "node_uav_role_Protector_WAYPOINT", &knowledge);
    algos.push_back(algo);
  }

  //-- start threads and simulation
  threads::Threader threader(knowledge);
  for(int i = 0; i < algos.size(); i++)
    algos[i]->start(threader);
  knowledge.set("begin_sim", "1");

  //-- wait for all threads to terminate
  threader.wait();
  return 0;
}

/********************************************************************/
//-- End of generated code
/********************************************************************/
