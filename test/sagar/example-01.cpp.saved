#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <assert.h>
#include <math.h>

#include "madara/knowledge_engine/Knowledge_Base.h"
#include "madara/knowledge_engine/Knowledge_Record.h"
#include "madara/knowledge_engine/Functions.h"
#include "madara/transport/Packet_Scheduler.h"
#include "madara/threads/Threader.h"
#include "madara/filters/Generic_Filters.h"

#define _GAMS_VREP_ 1
#include "gams/controllers/Base_Controller.h"
#include "gams/algorithms/Base_Algorithm.h"
#include "gams/variables/Sensor.h"
#include "gams/platforms/Base_Platform.h"
#include "gams/platforms/vrep/VREP_Base.h"
#include "gams/variables/Self.h"
#include "gams/utility/GPS_Position.h"
#include "gams/utility/Axes.h"

#include "dmpl/Reference.hpp"
#include "dmpl/ArrayReference.hpp"
#include "dmpl/Default_Logger.hpp"
#include <stdlib.h>
#include "madara/utility/Utility.h"

// begin dmpl namespace
namespace dmpl
{
// typedefs
typedef   Madara::Knowledge_Record::Integer   Integer;

// namespace shortcuts
namespace engine = Madara::Knowledge_Engine;
namespace threads = Madara::Threads;

namespace containers = engine::Containers;

namespace controllers = gams::controllers;

namespace platforms = gams::platforms;

namespace variables = gams::variables;

using containers::Reference;

using containers::ArrayReference;

using containers::CachedReference;

using containers::StorageManager::Proactive;

using Madara::knowledge_cast;


engine::Knowledge_Base knowledge;

// Needed as a workaround for non-const-correctness in Madara; use carefully
inline engine::Function_Arguments &__strip_const(const engine::Function_Arguments &c)
{
  return const_cast<engine::Function_Arguments &>(c);
}

inline engine::Function_Arguments &__chain_set(engine::Function_Arguments &c, int i, Madara::Knowledge_Record v)
{
  c[i] = v;
  return c;
}

// default transport variables
std::string host ("");
std::vector<std::string> platform_params;
std::string platform_name ("debug");
typedef void (*PlatformInitFn)(const std::vector<std::string> &, engine::Knowledge_Base &);
typedef std::map<std::string, PlatformInitFn> PlatformInitFns;
PlatformInitFns platform_init_fns;
const std::string default_multicast ("239.255.0.1:4150");
Madara::Transport::QoS_Transport_Settings settings;
int write_fd (-1);
ofstream expect_file;

// Containers for commonly used variables
// Global variables
Reference<unsigned int> id(knowledge, ".id");
Reference<unsigned int>  num_processes(knowledge, ".num_processes");
ArrayReference<unsigned int, 3> mbarrier_COLLISION_AVOIDANCE(knowledge, "mbarrier_COLLISION_AVOIDANCE");
double max_barrier_time (-1);
engine::Knowledge_Update_Settings private_update (true);

// number of participating processes
unsigned int processes (3);

// Defining program-specific constants
#define BottomY -2.25
#define INITS 0
#define LeftX -2.25
#define MOVE 4
#define NEXT 1
#define REQUEST 2
#define RightX 2.25
#define TopY 2.25
#define WAITING 3
#define X 10
#define Y 10

// Defining program-specific global variables
ArrayReference<_Bool, 3, 10, 10> lock(knowledge, "lock");


// Defining program-specific local variables
Reference<short> state(knowledge, ".state");
short var_init_state (0);

Reference<short> x(knowledge, ".x");
short var_init_x (0);

Reference<short> xf(knowledge, ".xf");
short var_init_xf (0);

Reference<short> xp(knowledge, ".xp");
short var_init_xp (0);

Reference<short> y(knowledge, ".y");
short var_init_y (0);

Reference<short> yf(knowledge, ".yf");
short var_init_yf (0);

Reference<short> yp(knowledge, ".yp");
short var_init_yp (0);

// Defining thread-specific global variables
ArrayReference<Proactive<_Bool, CachedReference<_Bool> >, 3, 10, 10> thread0_lock(knowledge, "lock");
// Defining thread-specific local variables
CachedReference<short> thread0_state(knowledge, ".state");
CachedReference<short> thread0_x(knowledge, ".x");
CachedReference<short> thread0_xf(knowledge, ".xf");
CachedReference<short> thread0_xp(knowledge, ".xp");
CachedReference<short> thread0_y(knowledge, ".y");
CachedReference<short> thread0_yf(knowledge, ".yf");
CachedReference<short> thread0_yp(knowledge, ".yp");

// target (GNU_CPP) specific thunk

#define GNU_WIN

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}



template < class ContainerT >
void tokenize(const std::string& str, ContainerT& tokens,
              const std::string& delimiters = " ", bool trimEmpty = false)
{
   std::string::size_type pos, lastPos = 0;

   typedef typename ContainerT::value_type value_type;
   typedef typename ContainerT::size_type size_type;

   while(true)
   {
      pos = str.find_first_of(delimiters, lastPos);
      if(pos == std::string::npos)
      {
         pos = str.length();

         if(pos != lastPos || !trimEmpty)
            tokens.push_back(value_type(str.data()+lastPos,
                  (size_type)pos-lastPos ));

         break;
      }
      else
      {
         if(pos != lastPos || !trimEmpty)
            tokens.push_back(value_type(str.data()+lastPos,
                  (size_type)pos-lastPos ));
      }

      lastPos = pos + 1;
   }
}

// handle arguments from the command line
void handle_arguments (int argc, char ** argv)
{
  for (int i = 1; i < argc; ++i)
  {
    std::string arg1 (argv[i]);

    if (arg1 == "-m" || arg1 == "--multicast")
    {
      if (i + 1 < argc)
      {
        settings.hosts.push_back (argv[i + 1]);
        settings.type = Madara::Transport::MULTICAST;
      }
      ++i;
    }
    else if (arg1 == "-p" || arg1 == "--platform")
    {
      if (i + 1 < argc)
      {
        tokenize(std::string(argv[i + 1]), platform_params, ":");
        platform_name = (platform_params[0]);
      }
      ++i;
    }
    else if (arg1 == "-b" || arg1 == "--broadcast")
    {
      if (i + 1 < argc)
      {
        settings.hosts.push_back (argv[i + 1]);
        settings.type = Madara::Transport::BROADCAST;
      }
      ++i;
    }
    else if (arg1 == "-u" || arg1 == "--udp")
    {
      if (i + 1 < argc)
      {
        settings.hosts.push_back (argv[i + 1]);
        settings.type = Madara::Transport::UDP;
      }
      ++i;
    }
    else if (arg1 == "-o" || arg1 == "--host")
    {
      if (i + 1 < argc)
        host = argv[i + 1];
        
      ++i;
    }
    else if (arg1 == "-mb" || arg1 == "--max-barrier-time")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> max_barrier_time;
      }
      
      ++i;
    }
    else if (arg1 == "-d" || arg1 == "--domain")
    {
      if (i + 1 < argc)
        settings.domains = argv[i + 1];
        
      ++i;
    }
    else if (arg1 == "-i" || arg1 == "--id")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> settings.id;
      }
      
      ++i;
    }
    else if (arg1 == "-l" || arg1 == "--level")
    {
      if (i + 1 < argc)
      {
        int log_level = 0;
        std::stringstream buffer (argv[i + 1]);
        buffer >> log_level;
        Madara::Logger::global_logger->set_level(log_level);
      }
      
      ++i;
    }
    else if (arg1 == "--drop-rate")
    {
      if (i + 1 < argc)
      {
        double drop_rate;
        std::stringstream buffer (argv[i + 1]);
        buffer >> drop_rate;
        std::cerr << "drop_rate: " << drop_rate << std::endl;
        settings.update_drop_rate (drop_rate,
          Madara::Transport::PACKET_DROP_PROBABLISTIC);
      }
      
      ++i;
    }
    else if (arg1 == "-e" || arg1 == "--expect-log")
    {
      if (i + 1 < argc)
      {
        expect_file.open(argv[i + 1], ios::out | ios::trunc);
      }
      
      ++i;
    }
    else if (arg1 == "-f" || arg1 == "--logfile")
    {
      if (i + 1 < argc)
      {
        ::Madara::Logger::global_logger->clear();
        ::Madara::Logger::global_logger->add_file(argv[i + 1]);
      }
      
      ++i;
    }
    else if (arg1 == "-r" || arg1 == "--reduced")
    {
      settings.send_reduced_message_header = true;
    }
    else if (arg1 == "--write-fd")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> write_fd;
      }
      
      ++i;
    }

    // Providing init for global variables

    // Providing init for local variables
    else if (arg1 == "--var_state")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_state;
      }
      
      ++i;
    }
    else if (arg1 == "--var_x")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_x;
      }
      
      ++i;
    }
    else if (arg1 == "--var_xf")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_xf;
      }
      
      ++i;
    }
    else if (arg1 == "--var_xp")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_xp;
      }
      
      ++i;
    }
    else if (arg1 == "--var_y")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_y;
      }
      
      ++i;
    }
    else if (arg1 == "--var_yf")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_yf;
      }
      
      ++i;
    }
    else if (arg1 == "--var_yp")
    {
      if (i + 1 < argc)
      {
        std::stringstream buffer (argv[i + 1]);
        buffer >> var_init_yp;
      }
      
      ++i;
    }
    else
    {
      madara_log (Madara::Logger::LOG_EMERGENCY, (LM_DEBUG, 
        "\nProgram summary for %s:\n\n"\
        " [-p|--platform type]     platform for loop (vrep, dronerk)\n"\
        " [-b|--broadcast ip:port] the broadcast ip to send and listen to\n"\
        " [-d|--domain domain]     the knowledge domain to send and listen to\n"\
        " [-e|--expect-log file]   file to log variables related to 'expect' clauses\n"\
        " [-f|--logfile file]      log to a file\n"\
        " [-i|--id id]             the id of this agent (should be non-negative)\n"\
        " [-l|--level level]       the logger level (0+, higher is higher detail)\n"\
        " [-m|--multicast ip:port] the multicast ip to send and listen to\n"\
        " [-mb|--max-barrier-time time] time in seconds to barrier for other processes\n"\
        " [-o|--host hostname]     the hostname of this process (def:localhost)\n"\
        " [-r|--reduced]           use the reduced message header\n"\
        " [-u|--udp ip:port]       the udp ips to send to (first is self to bind to)\n"\
        " [--var_state] sets the initial value of a generated variable\n"\
        " [--var_x] sets the initial value of a generated variable\n"\
        " [--var_xf] sets the initial value of a generated variable\n"\
        " [--var_xp] sets the initial value of a generated variable\n"\
        " [--var_y] sets the initial value of a generated variable\n"\
        " [--var_yf] sets the initial value of a generated variable\n"\
        " [--var_yp] sets the initial value of a generated variable\n"\
        , argv[0]));
      exit (0);
    }
  }
}

// Forward declaring global functions


// Forward declaring node functions

Madara::Knowledge_Record
uav_thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars);
Madara::Knowledge_Record
uav_thread0_NEXT_XY (engine::Function_Arguments & args, engine::Variables & vars);

gams::platforms::Base_Platform *platform = NULL;
int grid_x = 0, grid_y = 0;
double grid_leftX = NAN, grid_rightX = NAN, grid_topY = NAN, grid_bottomY = NAN, grid_cellX = NAN, grid_cellY = NAN;
void GRID_INIT(int x, int y, double leftX, double rightX, double topY, double bottomY)
{
  grid_x = x;
  grid_y = y;
  grid_leftX = leftX;
  grid_rightX = rightX;
  grid_topY = topY;
  grid_bottomY = bottomY;
  grid_cellX = (grid_rightX - grid_leftX) / (grid_x-1);
  grid_cellY = (grid_bottomY - grid_topY) / (grid_y-1);
}

void GRID_PLACE(int x, int y, double alt = 0.0)
{
  knowledge.set(".initial_x", grid_leftX + x * grid_cellX);
  knowledge.set(".initial_y", grid_topY + y * grid_cellY);
  knowledge.set(".initial_alt", alt);
}

int GRID_MOVE(int x, int y, double alt = NAN, double epsilon = 0.1)
{
  int ret = platform->move(gams::utility::Position(grid_leftX + x * grid_cellX, grid_topY + y * grid_cellY, alt), epsilon);
  return ret != 2;
}

double GET_X()
{
  return 0;
}

double GET_Y()
{
  return 0;
}

double GET_LAT()
{
  if(platform == NULL) return NAN;
  gams::utility::Position *pos = platform->get_position();
  double lat = pos->x;
  delete pos;
  return lat;
}

double GET_LNG()
{
  if(platform == NULL) return NAN;
  gams::utility::Position *pos = platform->get_position();
  double lng = pos->y;
  delete pos;
  return lng;
}

int ROTATE(double angle)
{
  std::cout << "Rotate: " << angle << std::endl;
  int ret = platform->rotate(gams::utility::Axes(0, 0, angle));
  std::cout << "Rotate ret: " << ret << std::endl;
  return ret != 2;
}

Madara::Knowledge_Record
REMODIFY_BARRIERS (engine::Function_Arguments &,
  engine::Variables & vars)
{
  mbarrier_COLLISION_AVOIDANCE[id].mark_modified();

  return Integer (0);
}

Madara::Knowledge_Record
REMODIFY_GLOBALS (engine::Function_Arguments & args,
  engine::Variables & vars)
{
  // Remodifying common global variables
  REMODIFY_BARRIERS(args, vars);
  // Remodifying program-specific global variables
  lock[id].mark_modified();
  return Integer (0);
}

// Defining global functions

// Defining node functions

// @BarrierSync
// @Period 100000
// @PlatformController
Madara::Knowledge_Record
uav_thread0_COLLISION_AVOIDANCE (engine::Function_Arguments & args, engine::Variables & vars)
{
  // Pull all referenced locals/globals
  thread0_x.pull();
  thread0_y.pull();
  thread0_xf.pull();
  thread0_yf.pull();
  thread0_state.pull();
  thread0_xp.pull();
  thread0_yp.pull();
  thread0_lock[id].pull();
  // Declare local variables

  {
    (void) (print_state (X, Y, id, thread0_x, thread0_y, thread0_xf, thread0_yf));
  }
  if ((thread0_state == INITS))
  {
    thread0_lock[id][thread0_x][thread0_y] = Integer (1);
    thread0_state = NEXT;
  }
  if ((thread0_state == NEXT))
  {
    if (((thread0_x == thread0_xf) && (thread0_y == thread0_yf)))
    {
      return Integer(0);
    }
    {
      (void) (uav_thread0_NEXT_XY (
           __strip_const(engine::Function_Arguments(0))
          , vars));
    }
    thread0_state = REQUEST;
  }
  else
  {
    if ((thread0_state == REQUEST))
    {
      if ((id == 1 && ((thread0_lock[0][thread0_xp][thread0_yp] != Integer (0)))) || 
        (id == 2 && ((thread0_lock[0][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[1][thread0_xp][thread0_yp] != Integer (0)))))
      {
        return Integer(0);
      }
      thread0_lock[id][thread0_xp][thread0_yp] = Integer (1);
      thread0_state = WAITING;
    }
    else
    {
      if ((thread0_state == WAITING))
      {
        if ((id == 0 && ((thread0_lock[1][thread0_xp][thread0_yp] != Integer (0)) || (thread0_lock[2][thread0_xp][thread0_yp] != Integer (0)))) || 
          (id == 1 && ((thread0_lock[2][thread0_xp][thread0_yp] != Integer (0)))))
        {
          return Integer(0);
        }
        thread0_state = MOVE;
      }
      else
      {
        if ((thread0_state == MOVE))
        {
          if ((GRID_MOVE (thread0_xp, thread0_yp, 0.5)))
          {
            return Integer(0);
          }
          thread0_lock[id][thread0_x][thread0_y] = Integer (0);
          thread0_x = thread0_xp;
          thread0_y = thread0_yp;
          thread0_state = NEXT;
        }
      }
    }
  }
  // Push all referenced locals/globals
  thread0_x.push();
  thread0_y.push();
  thread0_xf.push();
  thread0_yf.push();
  thread0_state.push();
  thread0_xp.push();
  thread0_yp.push();
  thread0_lock[id].push();

  // Insert return statement, in case user program did not
  return Integer(0);
}

Madara::Knowledge_Record
uav_thread0_NEXT_XY (engine::Function_Arguments & args, engine::Variables & vars)
{
  // Declare local variables

  thread0_xp = thread0_x;
  thread0_yp = thread0_y;
  if ((thread0_x < thread0_xf))
  {
    thread0_xp = (thread0_x + Integer (1));
  }
  else
  {
    if ((thread0_x > thread0_xf))
    {
      thread0_xp = (thread0_x - Integer (1));
    }
    else
    {
      if ((thread0_y < thread0_yf))
      {
        thread0_yp = (thread0_y + Integer (1));
      }
      else
      {
        thread0_yp = (thread0_y - Integer (1));
      }
    }
  }

  // Insert return statement, in case user program did not
  return Integer(0);
}


class Algo : public gams::algorithms::Base_Algorithm, protected threads::Base_Thread
{
public:
  Algo (
    unsigned period,
    const std::string &exec_func,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge = 0,
    const std::string &platform_name = "",
    variables::Sensors * sensors = 0,
    variables::Self * self = 0);
  ~Algo (void);
  virtual int analyze (void);
  virtual int plan (void);
  virtual int execute (void);
  virtual void init (engine::Knowledge_Base & context);
  virtual void init_platform ();
  virtual void run (void);
  virtual void cleanup (void);
  virtual void start (threads::Threader &threader);
protected:
  unsigned _period; //-- period in us
  controllers::Base_Controller loop;
  engine::Knowledge_Base *knowledge_;
  std::string _exec_func, _platform_name;
};

class SyncAlgo : public Algo
{
public:
  SyncAlgo (
    unsigned period,
    const std::string &exec_func,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge = 0,
    const std::string &platform_name = "",
    variables::Sensors * sensors = 0,
    variables::Self * self = 0);
  ~SyncAlgo (void);
  virtual int analyze (void);
  virtual int plan (void);
  virtual int execute (void);
  virtual void init (engine::Knowledge_Base & context);
  virtual void run (void);
  virtual void cleanup (void);
protected:
  int phase;
  std::string mbarrier;
  Madara::Knowledge_Engine::Wait_Settings wait_settings;
  engine::Compiled_Expression round_logic;
  std::map <std::string, bool>  barrier_send_list;
  std::stringstream barrier_string, barrier_data_string, barrier_sync;
  engine::Compiled_Expression barrier_logic;
  engine::Compiled_Expression barrier_data_logic;
  engine::Compiled_Expression barrier_sync_logic;
};

Algo::Algo (
    unsigned period,
    const std::string &exec_func,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge,
    const std::string &platform_name,
    variables::Sensors * sensors,
    variables::Self * self) : loop(*knowledge), _platform_name(platform_name),
      Base_Algorithm (knowledge, 0, sensors, self), knowledge_(knowledge),
            _period(period), _exec_func(exec_func)
{
}

Algo::~Algo (void)
{
}

int Algo::analyze (void)
{
  return 0;
}

int Algo::plan (void)
{
  return 0;
}

void Algo::init (engine::Knowledge_Base & context)
{
  loop.init_vars (settings.id, processes);
  if(_platform_name != "") init_platform ();
  loop.init_algorithm (this);
}

void Algo::run (void)
{
  loop.run_once(); 
}

void Algo::init_platform ()
{
  loop.init_platform (_platform_name);
  platform = loop.get_platform();
}

void Algo::cleanup (void)
{
}

void Algo::start (threads::Threader &threader)
{
  std::cout << "Starting thread: " << _exec_func << " at period " << _period << " us" << std::endl;
  double hertz = 1000000.0 / _period;
  threader.run(hertz, _exec_func, this);
}

int Algo::execute (void)
{
  knowledge_->evaluate (_exec_func + "()");
  return 0;
}

SyncAlgo::SyncAlgo (
    unsigned period,
    const std::string &exec_func,
    Madara::Knowledge_Engine::Knowledge_Base * knowledge,
    const std::string &platform_name,
    variables::Sensors * sensors,
    variables::Self * self) : phase(0), mbarrier("mbarrier_" + exec_func),
      Algo (period, exec_func, knowledge, platform_name, sensors, self)
{
  wait_settings.max_wait_time = 0;
  wait_settings.poll_frequency = .1;

  round_logic = knowledge_->compile (
    knowledge_->expand_statement (_exec_func + " (); ++" + mbarrier + ".{.id}"));
}

SyncAlgo::~SyncAlgo (void)
{
}

void SyncAlgo::init (engine::Knowledge_Base & context)
{
  bool started = false;

  barrier_send_list [knowledge_->expand_statement ("" + mbarrier + ".{.id}")] = true;

  barrier_string << "REMODIFY_BARRIERS () ;> ";
  barrier_data_string << "REMODIFY_GLOBALS () ;> ";
  barrier_sync << "" + mbarrier + ".";
  barrier_sync << settings.id;
  barrier_sync << " = (" + mbarrier + ".";
  barrier_sync << settings.id;

  // create barrier check for all lower ids
  for (unsigned int i = 0; i < settings.id; ++i)
  {
    if (started)
    {
      barrier_string << " && ";
      barrier_data_string << " && ";
    }

    barrier_string << "" + mbarrier + ".";
    barrier_string << i;
    barrier_string << " >= " + mbarrier + ".";
    barrier_string << settings.id;
    barrier_data_string << "" + mbarrier + ".";
    barrier_data_string << i;
    barrier_data_string << " >= " + mbarrier + ".";
    barrier_data_string << settings.id;
    barrier_sync << " ; ";
    barrier_sync << "" + mbarrier + ".";
    barrier_sync << i;

    if (!started)
      started = true;
  }

  // create barrier check for all higher ids
  for (int64_t i = settings.id + 1; i < processes; ++i)
  {
    if (started)
    {
      barrier_string << " && ";
      barrier_data_string << " && ";
    }

    barrier_string << "" + mbarrier + ".";
    barrier_string << i;
    barrier_string << " >= " + mbarrier + ".";
    barrier_string << settings.id;
    barrier_data_string << "" + mbarrier + ".";
    barrier_data_string << i;
    barrier_data_string << " >= " + mbarrier + ".";
    barrier_data_string << settings.id;
    barrier_sync << " ; ";
    barrier_sync << "" + mbarrier + ".";
    barrier_sync << i;

    if (!started)
      started = true;
  }

  barrier_sync << ")";

  // Compile frequently used expressions
  std::cout << "barrier_string: " << barrier_string.str() << std::endl;
  barrier_logic = knowledge_->compile (barrier_string.str ());
  barrier_data_logic = knowledge_->compile (barrier_data_string.str ());
  barrier_sync_logic = knowledge_->compile (barrier_sync.str ());
  Algo::init(context);
}

void SyncAlgo::run (void)
{
  {
    // Pre-round barrier increment
    if(phase == 0)
    {
      wait_settings.send_list = barrier_send_list; 
      wait_settings.delay_sending_modifieds = true; 
      knowledge_->evaluate ("++" + mbarrier + ".{.id}", wait_settings); 
      phase++;
    }
    if(phase == 1)
    {
      // remodify our globals and send all updates 
      wait_settings.send_list.clear (); 
      wait_settings.delay_sending_modifieds = false; 
      // first barrier for new data from previous round 
      if(knowledge_->evaluate (barrier_data_logic, wait_settings).to_integer()) 
        phase++;
    }
    if(phase == 2)
    {
      // Send only barrier information 
      wait_settings.send_list = barrier_send_list; 
      // Execute main user logic 
      wait_settings.delay_sending_modifieds = true; 
      Algo::run(); 
      phase++;
    }
    if(phase == 3)
    {
      // second barrier for waiting on others to finish round 
      // Increment barrier and only send barrier update 
      wait_settings.send_list = barrier_send_list; 
      wait_settings.delay_sending_modifieds = false; 
      if(knowledge_->evaluate (barrier_logic, wait_settings).to_integer()) 
        phase = 0;
    }
  }
}

void SyncAlgo::cleanup (void)
{
}

int SyncAlgo::analyze (void)
{
  return 0;
}

int SyncAlgo::plan (void)
{
  return 0;
}

int SyncAlgo::execute (void)
{
  knowledge_->evaluate (round_logic, wait_settings);
  return 0;
}

} // end dmpl namespace

using namespace dmpl;
template<class T> std::string to_string(const T &in)
{
  std::stringstream ss;
  ss << in;
  return ss.str();
}

void init_vrep(const std::vector<std::string> &params, engine::Knowledge_Base &knowledge)
{
  if(params.size() >= 2 && params[1].size() > 0)
    knowledge.set(".vrep_host", params[1]);
  else
    knowledge.set(".vrep_host", "127.0.0.1");
  if(params.size() >= 3 && params[2].size() > 0)
    knowledge.set(".vrep_port", params[2]);
  else
    knowledge.set(".vrep_port", to_string(19905+settings.id));
  if(params.size() >= 4 && params[3].size() > 0)
    knowledge.set(".vrep_sw_position", params[3]);
  else
    knowledge.set(".vrep_sw_position", "40.4464255,-79.9499426");
  if(params.size() >= 5 && params[4].size() > 0)
    knowledge.set(".vrep_uav_move_speed", params[4]);
  else
    knowledge.set(".vrep_uav_move_speed", "0.4");
  knowledge.set("vrep_ready", "1");
}

int main (int argc, char ** argv)
{
  settings.type = Madara::Transport::MULTICAST;
  platform_init_fns["vrep"] = init_vrep;
  platform_init_fns["vrep-uav"] = init_vrep;
  platform_init_fns["vrep-heli"] = init_vrep;
  platform_init_fns["vrep-ant"] = init_vrep;
  platform_init_fns["vrep-uav-ranger"] = init_vrep;

  // handle any command line arguments
  handle_arguments (argc, argv);

  if (settings.hosts.size () == 0)
  {
    // setup default transport as multicast
    settings.hosts.push_back (default_multicast);
    settings.add_receive_filter (Madara::Filters::log_aggregate);
    settings.add_send_filter (Madara::Filters::log_aggregate);
  }

  settings.queue_length = 1000000;

  settings.set_deadline(1);

  // configure the knowledge base with the transport settings
  knowledge.attach_transport(host, settings);

  // NODE: uav
  // Binding common variables

  // Binding program-specific global variables


  // Binding program-specific local variables
  state = var_init_state;

  x = var_init_x;

  xf = var_init_xf;

  xp = var_init_xp;

  y = var_init_y;

  yf = var_init_yf;

  yp = var_init_yp;


  // Defining common functions

  knowledge.define_function ("REMODIFY_BARRIERS", REMODIFY_BARRIERS);

  knowledge.define_function ("REMODIFY_GLOBALS", REMODIFY_GLOBALS);

  // Defining thread functions for MADARA

  knowledge.define_function ("COLLISION_AVOIDANCE", uav_thread0_COLLISION_AVOIDANCE);

  // Initialize commonly used local variables
  id = settings.id;
  num_processes = processes;
  if(id < 0 || id >= processes) {
    std::cerr << "Invalid node id: " << settings.id << "  valid range: [0, " << processes - 1 << "]" << std::endl;
    exit(1);
  }
  PlatformInitFns::iterator init_fn = platform_init_fns.find(platform_name);
  if(init_fn != platform_init_fns.end())
    init_fn->second(platform_params, knowledge);
  knowledge.evaluate("StartingPosition()");
  threads::Threader threader(knowledge);
  std::vector<Algo *> algos;
  Algo *algo;

  algo = new SyncAlgo(100000, "COLLISION_AVOIDANCE", &knowledge, platform_name);
  algos.push_back(algo);

  for(int i = 0; i < algos.size(); i++)
    algos[i]->start(threader);
  knowledge.set("begin_sim", "1");
  threader.wait();
  return 0;
}
