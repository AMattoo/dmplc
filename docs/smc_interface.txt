== Execute a Simulation ==

Will provide a script, run as follows:

dmpl-sim.sh example.mission output.csv

example.mission defines source files, and mission parameters (see examples
in tutorial directory).  Script will compile DMPL into executable controller,
run V-REP, and terminate based on mission time passed

Output of script will go to specified output file (overwriting if present).
If "-", output goes to stdout (TODO).
Example CSV:

===BEGIN===
Frame,Time,Node,Variable,Value
1,0,0,x,2
1,0,0,y,2
1,0,1,x,2
1,0,1,y,3
2,100,0,x,3
2,100,0,y,2
2,100,1,x,3
2,100,1,y,3
===END===

Options:
-p INT | --period INT : override default observer period; in microseconds (TODO)


== Analyze Results ==

dmpl-analyze.sh [-p Predicate] example.mission output.csv
dmpl-analyze.sh [-p Predicate] example.mission input.csv output.csv

Source files same as above. Input and output files can be "-" for stdin/stdout (TODO) 

(TODO) With -p Predicate option, output is simply a list of variables needed to analyze
the Predicate; for example:

===BEGIN===
Node,Variable
0,x
0,y
1,x
1,y
===END===

input.csv should be of the following form:

===BEGIN===
Time,Node,Variable,Value
0,0,x,2
0,0,y,2
0,1,x,2
0,1,y,3
100,0,x,3
100,0,y,2
100,1,x,3
100,1,y,3
===END===

I.e., same as output of dmpl-sim.sh

(TODO) If both -p and input.csv are given, output will be a list of variables needed to
complete analysis of that predicate (same format as with just -p)

If just input.csv is given (no -p), output will be of this form:

===BEGIN===
Time,Node,Name,Result
1,0,InBounds,0
1,1,InBounds,0
2,0,InBounds,1
2,1,InBounds,1
3,0,InBounds,1
3,1,InBounds,1
AtEnd,OMNI,Coverage,1
AtEnd,Alive,InsufficientDataError
AtEnd,Alive,InsufficientDataError
===END===

In this example, Coverage is an "omnipotent" predicate; it is evaluated by
cross-referencing data from all nodes. InBounds are each specific to a given
node (depend only on a single node position)

The Alive predicate in this example does not have enough data from the input
file for those nodes. If it were omnipotent, it would have OMNI as the Node.
