/**
 * Copyright (c) 2015 Carnegie Mellon University. All Rights Reserved.

 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:

 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following acknowledgments
 * and disclaimers.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.

 * 3. The names "Carnegie Mellon University," "SEI" and/or "Software
 * Engineering Institute" shall not be used to endorse or promote
 * products derived from this software without prior written
 * permission. For written permission, please contact
 * permission@sei.cmu.edu.

 * 4. Products derived from this software may not be called "SEI" nor
 * may "SEI" appear in their names without prior written permission of
 * permission@sei.cmu.edu.

 * 5. Redistributions of any form whatsoever must retain the following
 * acknowledgment:

 * This material is based upon work funded and supported by the
 * Department of Defense under Contract No. FA8721-05-C-0003 with
 * Carnegie Mellon University for the operation of the Software
 * Engineering Institute, a federally funded research and development
 * center.

 * Any opinions, findings and conclusions or recommendations expressed
 * in this material are those of the author(s) and do not necessarily
 * reflect the views of the United States Department of Defense.

 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE
 * ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
 * BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT
 * LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE
 * MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH
 * RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
 * INFRINGEMENT.

 * This material has been approved for public release and unlimited
 * distribution.

 * DM-0002494
**/

//-- an example with 5 nodes -- a leader in the middle and four
//-- protectors surrounding it. the leader moves from an initial to a
//-- target coordinate, going from one waypoint to the next following
//-- a path planning strategy. the protectors try to follow the
//-- leader's movement and keep it surrounded. each node has two
//-- threads -- a synchronous thread responsible for moving to the
//-- next waypoint avoiding collisions, and an asynchronous thread
//-- that determines the next waypoint for the node.

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int my_sleep (int seconds)
{
  madara::utility::sleep (seconds);
  return 0;
}

int roundNum = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(roundNum == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++roundNum, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//states of each node
const NEXT = 1;
const MOVE_MDL = 2;
const LOCK = 3;
const MOVE = 4;


extern void INIT_CONTROLLER(unsigned char x,unsigned char y);
extern int my_sleep(int seconds);
extern void print_state(int XX,int YY,int my_id, int x, int y, int xf, int yf);
extern void print_int(int i);

node uav
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  global bool lock [X][Y] = {
    lock[x][y] = 1;
  };
  
  global unsigned char lx = 0,ly = 0; //leader's destination coordinates
  global bool init = 0; //leader's destination has been initialized

  //private variables -- local to the node.
  //preserved across rounds
  local unsigned char state = NEXT; //the state

  //current coordinates
  local unsigned char input x ~ (0 <= x && x < X), input y ~ (0 <= y && y < Y);
  local unsigned char xp = x, yp = y; //next coordinates
  //final coordinates
  local unsigned char input xt ~ (0 <= xt && xt < X), input yt ~ (0 <= yt && yt < Y);
  
  local bool waypointValid = 0; //xt, yt are valid

  pure int expProp1Func() { return x < 5; }
  pure int expProp2Func() { return y < 5; }
  
  expect expProp1 : at_end => expProp1Func;
  expect expProp2 : at_end => expProp2Func;

  pure int coverage()
  {
    return x + y < 8;
    //return (GET_LAT() - GET_LNG()@0) > 0.9;
  }

  expect expProp3 : at_least 0.5 => coverage;
  
  bool NEXT_XY () {
    if(!waypointValid) return 1;
    if(xt < 0 || xt >= X || yt < 0 || yt >= Y) return 1;

    xp = x; yp = y;
    if(x < xt) xp = x + 1;
    else if(x > xt) xp = x - 1;
    else if(y < yt) yp = y + 1;
    else yp = y - 1;
    return 0;
  }

  @Period(100000);
  @Criticality(4);
  @WCExecTimeNominal(15000);
  @WCExecTimeOverload(30000);
  @BarrierSync;
  @PlatformController;
  thread COLLISION_AVOIDANCE {
    print_state(X,Y,id,x,y,xt,yt);
    //my_sleep(1);
    if(state == NEXT) {
      //compute next point on route
      if(x == xt && y == yt) return;
      if(NEXT_XY()) return;
      state = MOVE_MDL;
    }
    if(state == MOVE_MDL) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE((x+xp)/2,(y+yp)/2,1)) return;
      lock[x][y] = 0; 
      state = LOCK;
    }
    if(state == LOCK) {
      if(lock[xp][yp] != 0) return;
      lock[xp][yp] = 1;
      state = MOVE;
    }
    if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,1)) return;
      x = xp; y = yp;
      state = NEXT;
    }
  }

  role Leader {
    //-- leader-specific waypoint thread
    @Period(100000);
    @Criticality(3);
    @WCExecTimeNominal(10000);
    @WCExecTimeOverload(20000);
    thread WAYPOINT {
      waypointValid = 1;
      ly = yp;
      lx = xp;
      init = 1;
    }
  
    //-- inherit the collision avoidance thread
    thread COLLISION_AVOIDANCE;
  }

  //-- generic follower
  role Follower {
    //-- follower's offset wrt the leader
    local char input ox;
    local char input oy;
    
    //-- follower-specific waypoint thread
    @Period(100000);
    @Criticality(3);
    @WCExecTimeNominal(10000);
    @WCExecTimeOverload(20000);
    thread WAYPOINT {
      if(init@Leader == 0) return;
      waypointValid = 1;
      xt = lx@Leader + ox;
      yt = ly@Leader + oy;
    }

    //-- inherit the collision avoidance thread
    thread COLLISION_AVOIDANCE;
  }
  
  @InitSim;
  void StartingPosition ()
  {
    GRID_INIT();
    GRID_PLACE(x, y, 1);
  }
}


