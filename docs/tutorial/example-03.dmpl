/**
 * Copyright (c) 2015 Carnegie Mellon University. All Rights Reserved.

 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:

 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following acknowledgments
 * and disclaimers.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.

 * 3. The names "Carnegie Mellon University," "SEI" and/or "Software
 * Engineering Institute" shall not be used to endorse or promote
 * products derived from this software without prior written
 * permission. For written permission, please contact
 * permission@sei.cmu.edu.

 * 4. Products derived from this software may not be called "SEI" nor
 * may "SEI" appear in their names without prior written permission of
 * permission@sei.cmu.edu.

 * 5. Redistributions of any form whatsoever must retain the following
 * acknowledgment:

 * This material is based upon work funded and supported by the
 * Department of Defense under Contract No. FA8721-05-C-0003 with
 * Carnegie Mellon University for the operation of the Software
 * Engineering Institute, a federally funded research and development
 * center.

 * Any opinions, findings and conclusions or recommendations expressed
 * in this material are those of the author(s) and do not necessarily
 * reflect the views of the United States Department of Defense.

 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE
 * ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
 * BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT
 * LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE
 * MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH
 * RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
 * INFRINGEMENT.

 * This material has been approved for public release and unlimited
 * distribution.

 * DM-0002494
**/

//-- 9 nodes, loose formation.

target GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//number of X and Y coordinates
const X = 10;
const Y = 10;

//states of each node
const INITS = 0;
const NEXT = 1;
const REQUEST = 2;
const WAITING = 3;
const MOVE = 4;

const TopY = -2.25;
const LeftX = -2.25;
const BottomY = 2.25;
const RightX = 2.25;

extern void GRID_INIT(int XX,int YY,double leftX,double rightX,double topY,double bottomY);
extern void GRID_PLACE(unsigned char x,unsigned char y, double z);
extern int GRID_MOVE(unsigned char xp,unsigned char yp, double z);
extern int my_sleep(int seconds);
extern void print_state(int XX,int YY,int id, int x, int y, int xf, int yf);
extern void print_int(int i);


node uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  global bool lock [X][Y];
  global unsigned char lx,ly; //leader's destination coordinates
  global bool init; //node is initialized

  //private variables -- local to the node.
  //preserved across rounds
  local unsigned char state; //the state
  local unsigned char x,y; //current coordinates
  local unsigned char xp,yp; //next coordinates
  local unsigned char xt,yt; //current target coordinates
  local bool waypointValid; //xt, yt are valid
  
  bool NEXT_XY () {
    if(!waypointValid)
      return 1;
    xp = x; yp = y;
    if(x < xt) xp = x + 1;
    else if(x > xt) xp = x - 1;
    else if(y < yt) yp = y + 1;
    else yp = y - 1;
  }

  thread WAYPOINT() {
    if(id != 0 && init@0 == 0) {
      waypointValid = 0;
      return;
    } else {
      waypointValid = 1;
    }
    if(id == 0) {
      ly = yp;
      lx = xp;
    } else if(id == 1) {
      xt = lx@0 + 2;
      yt = ly@0 + 2;
    } else if(id == 2) {
      xt = lx@0;
      yt = ly@0 + 2;
    } else if(id == 3) {
      xt = lx@0 - 2;
      yt = ly@0 + 2;
    } else if(id == 4) {
      xt = lx@0 - 2;
      yt = ly@0;
    } else if(id == 5) {
      xt = lx@0 - 2;
      yt = ly@0 - 2;
    } else if(id == 6) {
      xt = lx@0;
      yt = ly@0 - 2;
    } else if(id == 7) {
      xt = lx@0 + 2;
      yt = ly@0 - 2;
    } else if(id == 8) {
      xt = lx@0 + 2;
      yt = ly@0;
    }
  }

  @BarrierSync
  @PlatformController
  thread COLLISION_AVOIDANCE () {
    print_state(X,Y,id,x,y,xt,yt);
    //my_sleep(1);
    if(state == INITS) {
      lock[x][y] = 1;
      if(id == 0) {
        lx = x;
        ly = y;
      }
      init = 1;
      state = NEXT;
    } if(state == NEXT) {
      //compute next point on route
      if(x == xt && y == yt) return;
      if(NEXT_XY()) return;
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp]@idp != 0)) return;
      lock[xp][yp] = 1;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp]@idp != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,0.5)) return;
      lock[x][y] = 0; 
      x = xp; y = yp;
      state = NEXT;
    }
  }

  @InitSim
  void StartingPosition ()
  {
    GRID_INIT(X, Y, LeftX, RightX, TopY, BottomY);
    GRID_PLACE(x, y, 0.5);
  }
}

//initial state
@INIT
void NodeInit () 
{
  FORALL_NODE(id) {
    state@id = INITS;
    ND(x@id); ND(y@id);
    ASSUME(0 <= x@id && x@id < X && 0 <= y@id && y@id < Y);
    ND(xt@id); ND(yt@id);
    ASSUME(0 <= xt@id && xt@id < X && 0 <= yt@id && yt@id < Y);
    waypointValid@id = 1;
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x@id1 != x@id2 || y@id1 != y@id2);
  }
}

//the safety property checked at the beginning of each round
@SAFETY
void NoCollisions ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x@id1 != x@id2 || y@id1 != y@id2);
  }
}
