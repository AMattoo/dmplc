/**
 * Copyright (c) 2015 Carnegie Mellon University. All Rights Reserved.

 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:

 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following acknowledgments
 * and disclaimers.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.

 * 3. The names "Carnegie Mellon University," "SEI" and/or "Software
 * Engineering Institute" shall not be used to endorse or promote
 * products derived from this software without prior written
 * permission. For written permission, please contact
 * permission@sei.cmu.edu.

 * 4. Products derived from this software may not be called "SEI" nor
 * may "SEI" appear in their names without prior written permission of
 * permission@sei.cmu.edu.

 * 5. Redistributions of any form whatsoever must retain the following
 * acknowledgment:

 * This material is based upon work funded and supported by the
 * Department of Defense under Contract No. FA8721-05-C-0003 with
 * Carnegie Mellon University for the operation of the Software
 * Engineering Institute, a federally funded research and development
 * center.

 * Any opinions, findings and conclusions or recommendations expressed
 * in this material are those of the author(s) and do not necessarily
 * reflect the views of the United States Department of Defense.

 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE
 * ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
 * BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT
 * LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE
 * MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH
 * RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
 * INFRINGEMENT.

 * This material has been approved for public release and unlimited
 * distribution.

 * DM-0002494
**/

//-- this is a generic example demonstrating a set of nine space tiles
//-- starting from an initial position, moving to a final position,
//-- and then bonding together via magnets to form a
//-- structure. initial positions are randomized but selected to
//-- minimize deadlocks. still each node can change direction midway
//-- if blocked.

target GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//number of X and Y coordinates
const X = 20;
const Y = 20;

//states of each node
const NEXT = 1;
const REQUEST = 2;
const WAITING = 3;
const MOVE = 4;

const TopY = 2.25;
const LeftX = -2.25;
const BottomY = -2.25;
const RightX = 2.25;

extern int my_sleep(int seconds);
extern void print_state(int XX,int YY,int my_id, int x, int y, int xf, int yf);
extern void print_int(int i);
extern void MAG_ON();
extern int GRID_MOVE(unsigned char xp,unsigned char yp, double z);

node uav
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  global bool lock [X][Y] = {
    lock[x][y] = 1;
  };
  
  global unsigned char lx = 0,ly = 0; //leader's destination coordinates
  global bool init = 0; //leader's destination has been initialized

  //private variables -- local to the node.
  //preserved across rounds
  local unsigned char state = NEXT; //the state

  //current coordinates
  local unsigned char input x ~ (0 <= x && x < X), input y ~ (0 <= y && y < Y);
  local unsigned char xwp = x, ywp = y; //next waypoint
  local unsigned char xp = x, yp = y; //next coordinates
  //final coordinates
  local unsigned char input xf ~ (0 <= xf && xf < X), input yf ~ (0 <= yf && yf < Y);
  
  //-- saves the next waypoint in (xp,yp)
  void NEXT_XY () {
    if(id == 3 || id == 5) {
      xp = x; yp = y;
      if(x < xwp) xp = x + 1;
      else if(x > xwp) xp = x - 1;
      else if(y < ywp) yp = y + 1;
      else yp = y - 1;
    } else {
      xp = x; yp = y;
      if(y < ywp) yp = y + 1;
      else if(y > ywp) yp = y - 1;
      else if(x < xwp) xp = x + 1;
      else xp = x - 1;
    }
  }

  //-- return the current quadrant
  int GET_QUADRANT()
  {
    int qx,qy;
    if(x <= 6) qx = 0;
    else if(x <= 12) qx = 1;
    else qx = 2;
    if(y <= 6) qy = 0;
    else if(y <= 12) qy = 1;
    else qy = 2;
    return qx * 3 + qy;
  }
  
  //-- update the next waypoint
  void UPDATE_WP()
  {
    int quad;

    //-- if we are the center tile, head to the final destination
    if (id == 4) { xwp = xf; ywp = yf; return; }
    
    //-- get the current quadrant
    quad = GET_QUADRANT();

    //-- if already in the right quadrant, or the center quadrant,
    //-- head to the final destination
    if (quad == id || quad == 4) { xwp = xf; ywp = yf; return; }

    //-- head to the correct quadrant, moving clockwise
    if(quad == 0) { xwp = 7; ywp = y; return; }
    if(quad == 1) { xwp = x; ywp = 6; return; }
    if(quad == 2) { xwp = x; ywp = 12; return; }
    if(quad == 3) { xwp = 13; ywp = y; return; }
    if(quad == 5) { xwp = 6; ywp = y; return; }
    if(quad == 6) { xwp = x; ywp = 7; return; }
    if(quad == 7) { xwp = x; ywp = 13; return; }
    if(quad == 8) { xwp = 12; ywp = y; return; }
  }
}

node uav
{
  @Period(100000);
  @BarrierSync;
  @PlatformController;
  thread COLLISION_AVOIDANCE {
    print_state(X,Y,id,x,y,xf,yf);
    //my_sleep(1);
    if (state == NEXT) {
      //compute next point on route
      if(x == xf && y == yf) {
        MAG_ON();
        return;
      }
      if(x == xwp && y == ywp) {
        UPDATE_WP();
      }
      NEXT_XY();
      state = REQUEST;
    } else if (state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp]@idp != 0)) return;
      lock[xp][yp] = 1;
      state = WAITING;
    } else if (state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp]@idp != 0)) return;
      state = MOVE;
    } else if (state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,0.5)) return;
      lock[x][y] = 0; 
      x = xp; y = yp;
      state = NEXT;
    }
  }

  role Tile
  {
    thread COLLISION_AVOIDANCE;
  }
  
  @InitSim;
  void StartingPosition ()
  {
    GRID_INIT(X, Y, LeftX, RightX, TopY, BottomY);
    GRID_PLACE(x, y, 0.5);
  }

  //the safety property checked at the beginning of each round
  pure bool NoCollisions ()
  {
    //-- the main property
    FORALL_DISTINCT_NODE_PAIR (id1,id2) {
      if(x@id1 == x@id2 && y@id1 == y@id2) return false;
    }
    
    //-- supporting invariants for inductiveness

    FORALL_NODE(idp) {
      /** state has to be between 0 and 4, (x,y), (xf,yf), and (xp,yp)
          have to be between 0 and X-1,Y-1 */
      if(!(state@idp >= NEXT && state@idp <= MOVE)) return false;
      if(!(x@idp >= 0 && x@idp < X)) return false;
      if(!(y@idp >= 0 && y@idp < Y)) return false;
      if(!(xf@idp >= 0 && xf@idp < X)) return false;
      if(!(yf@idp >= 0 && yf@idp < Y)) return false;
      if(!(xp@idp >= 0 && xp@idp < X)) return false;
      if(!(yp@idp >= 0 && yp@idp < Y)) return false;
      /** if we are in not in NEXT, then xp,yp != x,y */
      if(!(state@idp == NEXT || x@idp != xp@idp || y@idp != yp@idp)) return false;
      /** if we are in NEXT, REQUEST, WAITING or MOVE, we have lock on
          x,y */
      if(!((state@idp != NEXT && state@idp != REQUEST && state@idp != WAITING && state@idp != MOVE) ||
           lock[x@idp][y@idp]@idp)) return false;
      /** if we are in NEXT, WAITING or MOVE, then we have lock on x,y
          and xp,yp */
      if(!((state@idp != NEXT && state@idp != WAITING && state@idp != MOVE) ||
           (lock[x@idp][y@idp]@idp && lock[xp@idp][yp@idp]@idp))) return false;
      /** if we are not in NEXT, then x,y and xp,yp are
          adjacent */
      if(!(state@idp == NEXT || (((x@idp == xp@idp - 1) || (x@idp == xp@idp + 1)) ^ ((y@idp == yp@idp - 1) || (y@idp == yp@idp + 1))))) return false;
    }
  
    //-- the rest are supporting invariants. you only need them for
    //-- plain induction. you can skip them (by uncommenting the
    //-- following return statement) out if you are doing K-induction
    //-- with K>=3.
    //return true;
      
    FORALL_DISTINCT_NODE_PAIR (id1,id2) {
      /** if node1 is in MOVE/NEXT and has lower id than node2 which is
          WAITING then they have different xp,yp */
      if(!((state@id1 != NEXT && state@id1 != MOVE) || state@id2 != WAITING || id1 >= id2 || xp@id1 != xp@id2 || yp@id1 != yp@id2)) return false;
      /** if two distinct nodes are in MOVE, they have different
          (xp,yp) */
      if(!(state@id1 != MOVE || state@id2 != MOVE ||                        
           ((xp@id1 != xp@id2 || yp@id1 != yp@id2) &&             
            (xp@id1 != x@id2 || yp@id1 != y@id2) &&               
            (x@id1 != xp@id2 || y@id1 != yp@id2) &&               
            (x@id1 != x@id2 || y@id1 != y@id2)))) return false;
      /** if node2 in WAITING, and node1 has lower id than node 2, then
          node1.(x,y) != node2.(xp,yp) */
      if(!(state@id2 != WAITING || id1 >= id2 || x@id1 != xp@id2 || y@id1 != yp@id2)) return false;
      /** if node2 in MOVE, then node1.(x,y) != node2.(xp,yp) */
      if(!((state@id2 != MOVE || x@id1 != xp@id2 || y@id1 != yp@id2) && (state@id1 != 4 || xp@id1 != x@id2 || yp@id1 != y@id2))) return false;
      /** two distinct nodes have different (x,y) */
      if(!(x@id1 != x@id2 || y@id1 != y@id2)) return false;
    }
    
    return true;
  }

  //-- guaranteed properties
  require NoCollision => NoCollisions;
}

