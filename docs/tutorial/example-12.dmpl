/**
 * Copyright (c) 2015 Carnegie Mellon University. All Rights Reserved.

 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:

 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following acknowledgments
 * and disclaimers.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.

 * 3. The names "Carnegie Mellon University," "SEI" and/or "Software
 * Engineering Institute" shall not be used to endorse or promote
 * products derived from this software without prior written
 * permission. For written permission, please contact
 * permission@sei.cmu.edu.

 * 4. Products derived from this software may not be called "SEI" nor
 * may "SEI" appear in their names without prior written permission of
 * permission@sei.cmu.edu.

 * 5. Redistributions of any form whatsoever must retain the following
 * acknowledgment:

 * This material is based upon work funded and supported by the
 * Department of Defense under Contract No. FA8721-05-C-0003 with
 * Carnegie Mellon University for the operation of the Software
 * Engineering Institute, a federally funded research and development
 * center.

 * Any opinions, findings and conclusions or recommendations expressed
 * in this material are those of the author(s) and do not necessarily
 * reflect the views of the United States Department of Defense.

 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE
 * ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
 * BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT
 * LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE
 * MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH
 * RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
 * INFRINGEMENT.

 * This material has been approved for public release and unlimited
 * distribution.

 * DM-0002494
**/

//-- this is a generic example demonstrating the synchronous collision
//-- avoidance algorithm

target GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int my_sleep (int seconds)
{
  madara::utility::sleep (seconds);
  return 0;
}

int roundNum = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(roundNum == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++roundNum, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

extern int my_sleep(int seconds);
extern void print_state(int XX,int YY,int my_id, int x, int y, int xf, int yf);
extern void print_int(int i);

//-- states of the UAV
const REST = 1;
const MOVE = 2;

node uav
{
  //-- current coordinates
  global unsigned char input x ~ (0 <= x && x < X), input y ~ (0 <= y && y < Y);

  //-- next coordinates
  local unsigned char xp = x, yp = y; 

  //-- final coordinates
  local unsigned char xf = 0, yf = 0;

  //-- state of the node
  local unsigned char state = REST;
  
  //-- saves the next waypoint in (xp,yp)
  void NEXT_XY () {
    xp = x; yp = y;
    if(x < xf) xp = x + 1;
    else if(x > xf) xp = x - 1;
    else if(y < yf) yp = y + 1;
    else yp = y - 1;
  }
}

node uav
{
  role Evader {
    //-- variable to indicate mission completion
    global bool missionOver = 0;

    //-- safety location -- extreme corner of the quadrant in which
    //-- evader is initially located
    local unsigned char safety_x = (x < 5) ? 0 : 9;
    local unsigned char safety_y = (y < 5) ? 0 : 9;
    
    @Period(100000);
    @PlatformController;
    thread EVADE {
      if(x == safety_x && y == safety_y) {
        PRINT("EVADER SUCCESS!!\n");
        EXIT(id);
      }
      if(state == REST) {
        xf = safety_x;
        yf = safety_y;
        NEXT_XY();
        state = MOVE;
      }
      if(state == MOVE) {
        if(GRID_MOVE(xp,yp,1)) return;
        x = xp; y = yp;
        state = REST;
      }
    }
  }

  role Pursuer {
    @Period(100000);
    @PlatformController;
    thread PURSUE {
      if((x - x@Evader) * (x - x@Evader) + (y - y@Evader) * (y - y@Evader) <= 9) {
        PRINT("PURSUER SUCCESS!!\n");
        EXIT(id);
      }
      if(state == REST) {
        xf = x@Evader;
        yf = y@Evader;
        NEXT_XY();
        state = MOVE;
      }
      if(state == MOVE) {
        if(GRID_MOVE(xp,yp,1)) return;
        x = xp; y = yp;
        state = REST;
      }
    }
  }

  @InitSim;
  void StartingPosition ()
  {
    GRID_INIT();
    GRID_PLACE(x, y, 1);
  }
}
