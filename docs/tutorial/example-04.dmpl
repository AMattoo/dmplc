/**
 * Copyright (c) 2015 Carnegie Mellon University. All Rights Reserved.

 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:

 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following acknowledgments
 * and disclaimers.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.

 * 3. The names "Carnegie Mellon University," "SEI" and/or "Software
 * Engineering Institute" shall not be used to endorse or promote
 * products derived from this software without prior written
 * permission. For written permission, please contact
 * permission@sei.cmu.edu.

 * 4. Products derived from this software may not be called "SEI" nor
 * may "SEI" appear in their names without prior written permission of
 * permission@sei.cmu.edu.

 * 5. Redistributions of any form whatsoever must retain the following
 * acknowledgment:

 * This material is based upon work funded and supported by the
 * Department of Defense under Contract No. FA8721-05-C-0003 with
 * Carnegie Mellon University for the operation of the Software
 * Engineering Institute, a federally funded research and development
 * center.

 * Any opinions, findings and conclusions or recommendations expressed
 * in this material are those of the author(s) and do not necessarily
 * reflect the views of the United States Department of Defense.

 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE
 * ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
 * BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT
 * LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE
 * MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH
 * RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
 * INFRINGEMENT.

 * This material has been approved for public release and unlimited
 * distribution.

 * DM-0002494
**/

//-- 9 nodes, tight formation. aggressive collision avoidance
//-- dependent on relative velocity of nodes.

target GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int roundNum = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf, int xp, int yp, int d, int s)
{
  if(roundNum == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 10;++i) printf("\n");
  
  printf("round = %d : id = %d   dir = %d   state = %d\n", ++roundNum, id, d, s);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else if(j == xp && i == yp) printf("+|");
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//states of each node
const NEXT = 1;
const REQUEST = 2;
const WAITING = 3;
const MOVE = 4;

const STILL = 0;
const UP = 1;
const DOWN = 2;
const LEFT = 4;
const RIGHT = 8;
const ALL = 15;

extern int my_sleep(int seconds);
extern void print_state(int _X,int _Y,int _id, int x, int y, int xf, int yf, int xp, int yp, int d, int s);
extern void print_int(int i);

node uav
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  global unsigned char lock [X][Y] = {
    lock[x][y] = ALL;
  };
  
  global unsigned char lx = 0,ly = 0; //leader's destination coordinates
  global bool init = 0; //leader's destination has been initialized

  //private variables -- local to the node.
  //preserved across rounds
  local unsigned char state = NEXT; //the state

  //current coordinates
  local unsigned char input x ~ (0 <= x && x < X), input y ~ (0 <= y && y < Y);
  local unsigned char xp = x, yp = y; //next coordinates
  //final coordinates
  local unsigned char input xt ~ (0 <= xt && xt < X), input yt ~ (0 <= yt && yt < Y);
  
  local unsigned char dir = STILL;
  local bool waypointValid = 0; //xt, yt are valid

  bool NEXT_XY () {
    if(!waypointValid) return 1;
    if(xt < 0 || xt >= X || yt < 0 || yt >= Y) return 1;

    xp = x; yp = y;
    if(x < xt) {
      xp = x + 1;
      dir = RIGHT;
    } else if(x > xt) {
      xp = x - 1;
      dir = LEFT;
    } else if(y < yt) {
      yp = y + 1;
      dir = DOWN;
    } else {
      yp = y - 1;
      dir = UP;
    }
    return 0;
  }

  @BarrierSync;
  @PlatformController;
  thread COLLISION_AVOIDANCE {
    print_state(X,Y,id,x,y,xt,yt,xp,yp,dir,state);
    //my_sleep(1);
    if(state == NEXT) {
      //compute next point on route
      lock[x][y] = ALL;
      if(x == xt && y == yt) {
        dir = STILL;
        return;
      }
      if(NEXT_XY()) return;
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(dir == STILL || EXISTS_LOWER(idp, (lock[xp][yp]@idp & dir) != 0))
        return;
      lock[xp][yp] = ALL;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(dir == STILL || EXISTS_HIGHER(idp, (lock[xp][yp]@idp & dir) != 0))
        return;
      lock[x][y] = ALL & ~dir;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,1)) return;
      lock[x][y] = 0; 
      x = xp; y = yp;
      dir = STILL;
      state = NEXT;
    }
  }

  role Leader {
    //-- leader-specific waypoint thread
    @Period(200000);
    override thread WAYPOINT {
      waypointValid = 1;
      ly = yp;
      lx = xp;
      init = 1;
    }
  
    //-- inherit the collision avoidance thread
    thread COLLISION_AVOIDANCE;
  }

  role Protector {
    //-- follower-specific waypoint thread
    @Period(200000);
    override thread WAYPOINT {
      if(init@0 == 0) return;
      waypointValid = 1;
      
      if(id == 1) {
        xt = lx@0 + 1;
        yt = ly@0 + 1;
      } else if(id == 2) {
        xt = lx@0;
        yt = ly@0 + 1;
      } else if(id == 3) {
        xt = lx@0 - 1;
        yt = ly@0 + 1;
      } else if(id == 4) {
        xt = lx@0 - 1;
        yt = ly@0;
      } else if(id == 5) {
        xt = lx@0 - 1;
        yt = ly@0 - 1;
      } else if(id == 6) {
        xt = lx@0;
        yt = ly@0 - 1;
      } else if(id == 7) {
        xt = lx@0 + 1;
        yt = ly@0 - 1;
      } else if(id == 8) {
        xt = lx@0 + 1;
        yt = ly@0;
      }
    }

    //-- inherit the collision avoidance thread
    thread COLLISION_AVOIDANCE;
  }

  @InitSim;
  void StartingPosition ()
  {
    GRID_INIT();
    GRID_PLACE(x, y, 1);
  }

  //the safety property checked at the beginning of each round
  pure bool NoCollisions ()
  {
    //-- the main property
    FORALL_DISTINCT_NODE_PAIR (id1,id2) {
      if(x@id1 == x@id2 && y@id1 == y@id2) return false;
    }
    return true;
  }

  //-- guaranteed properties
  require NoCollision => NoCollisions;
}
