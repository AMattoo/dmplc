//-- an example with 5 nodes -- a leader in the middle and four
//-- protectors surrounding it. the leader moves from an initial to a
//-- target coordinate, going from one waypoint to the next following
//-- a path planning strategy. the protectors try to follow the
//-- leader's movement and keep it surrounded. each node has two
//-- threads -- a synchronous thread responsible for moving to the
//-- next waypoint avoiding collisions, and an asynchronous thread
//-- that determines the next waypoint for the node.

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int GRID_MOVE(unsigned char x,unsigned char y,unsigned char xp,unsigned char yp,double z)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//number of X and Y coordinates
const X = 20;
const Y = 20;

//states of each node
const INITS = 0;
const NEXT = 1;
const REQUEST = 2;
const WAITING = 3;
const MOVE = 4;

const TopY = 13;
const LeftX = -12.5;
const BottomY = -6;
const RightX = 6.5;

extern void INIT_CONTROLLER(unsigned char x,unsigned char y);
extern void GRID_INIT(int XX,int YY,double LeftX,double RightX,double TopY,double BottomY);
extern void GRID_PLACE(unsigned char x,unsigned char y, double z);
extern int GRID_MOVE(unsigned char x,unsigned char y, unsigned char xp,unsigned char yp, double z);
extern int my_sleep(int seconds);
extern void print_state(int XX,int YY,int id, int x, int y, int xf, int yf);
extern void print_int(int i);
extern double GET_LAT();
extern double GET_LNG();

node uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  global bool lock [X][Y];
  global unsigned char lx,ly; //leader's destination coordinates
  global bool init; //node is initialized

  //private variables -- local to the node.
  //preserved across rounds
  local unsigned char state; //the state
  local unsigned char x,y; //current coordinates
  local unsigned char xp,yp; //next coordinates
  local unsigned char xt,yt; //current target coordinates
  local bool waypointValid; //xt, yt are valid

  expect (x < 5);
  expect YLT5(y < 5);

  double coverage()
  {
    return GET_LAT() - GET_LNG()@0;
  }

  //@AT_LEAST(0.5)
  expect COVERAGE(coverage() > 0.9);
  
  bool NEXT_XY () {
    if(!waypointValid)
      return 1;
    xp = x; yp = y;
    if(x < xt) xp = x + 1;
    else if(x > xt) xp = x - 1;
    else if(y < yt) yp = y + 1;
    else yp = y - 1;
    return 0;
  }

  thread WAYPOINT() {
    if(id != 0 && init@0 == 0) {
      waypointValid = 0;
      return;
    } else {
      waypointValid = 1;
    }
    if(id == 0) {
      ly = yp;
      lx = xp;
    } if(id == 1) {
      xt = lx@0 + 1;
      yt = ly@0 + 1;
    } else if(id == 2) {
      xt = lx@0 - 1;
      yt = ly@0 + 1;
    } else if(id == 3) {
      xt = lx@0 - 1;
      yt = ly@0 - 1;
    } else if(id == 4) {
      xt = lx@0 + 1;
      yt = ly@0 - 1;
    }
  }

  @BarrierSync
  @PlatformController
  thread COLLISION_AVOIDANCE () {
    print_state(X,Y,id,x,y,xt,yt);
    //my_sleep(1);
    if(state == INITS) {
      lock[x][y] = 1;
      lock[xp][yp] = 1;
      if(id == 0) {
        lx = x;
        ly = y;
      }
      init = 1;
      state = NEXT;
    } if(state == NEXT) {
      //compute next point on route
      if(x == xt && y == yt) return;
      if(NEXT_XY()) return;
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp]@idp != 0)) return;
      lock[xp][yp] = 1;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp]@idp != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(x,y,xp,yp,0.5)) return;
      lock[x][y] = 0; 
      x = xp; y = yp;
      state = NEXT;
    }
  }

  @InitSim
  void StartingPosition ()
  {
    GRID_INIT(X, Y, LeftX, RightX, TopY, BottomY);
    GRID_PLACE(x, y, 0.5);
  }
}

//initial state
@INIT
void NodeInit () 
{
  FORALL_NODE(id) {
    state@id = INITS;
    ND(x@id); ND(y@id);
    ASSUME(0 <= x@id && x@id < X && 0 <= y@id && y@id < Y);
    ND(xt@id); ND(yt@id);
    ASSUME(0 <= xt@id && xt@id < X && 0 <= yt@id && yt@id < Y);
    waypointValid@id = 1;
    INIT_CONTROLLER(x@id,y@id)@id;
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x@id1 != x@id2 || y@id1 != y@id2);
  }
}

//the safety property checked at the beginning of each round
@SAFETY
void NoCollisions ()
{
  bool allIn,noneIn;

  FORALL_NODE(id) {
    /** state has to be between 0 and 4, (x,y), (xf,yf), and (xp,yp)
        have to be between 0 and X-1,Y-1 */
    ASSERT(state@id >= 0 && state@id <= 4);
    ASSERT(x@id >= 0 && x@id < X);
    ASSERT(y@id >= 0 && y@id < Y);
    ASSERT(xt@id >= 0 && xt@id < X);
    ASSERT(yt@id >= 0 && yt@id < Y);
    ASSERT(xp@id >= 0 && xp@id < X);
    ASSERT(yp@id >= 0 && yp@id < Y);
    /** if we are in not in INITS or NEXT, then xp,yp != x,y */
    ASSERT(state@id == INITS || state@id == NEXT || x@id != xp@id || y@id != yp@id);
    /** if we are in NEXT, REQUEST, WAITING or MOVE, we have lock on
        x,y */
    ASSERT((state@id != NEXT && state@id != REQUEST && state@id != WAITING && state@id != MOVE) ||
           lock[x@id][y@id]@id);
    /** if we are in NEXT, WAITING or MOVE, then we have lock on x,y
        and xp,yp */
    ASSERT((state@id != NEXT && state@id != WAITING && state@id != MOVE) ||
           (lock[x@id][y@id]@id && lock[xp@id][yp@id]@id));
    /** if we are not in INITS or NEXT, then x,y and xp,yp are
        adjacent */
    ASSERT(state@id == INITS || state@id == NEXT || (((x@id == xp@id - 1) || (x@id == xp@id + 1)) ^ ((y@id == yp@id - 1) || (y@id == yp@id + 1))));
    /** this is AC1 */
    /** controller always moves between adjacent cells*/
    ASSERT(cstate@id != CMOVE || (((cx@id == cxp@id - 1) || (cx@id == cxp@id + 1)) ^ ((cy@id == cyp@id - 1) || (cy@id == cyp@id + 1))));
    /** if controller is in MOVE, then node must also be in move, and
        if node and controller are both in MOVE, then their (x,y) and
        (xp,yp) agree */
    ASSERT((cstate@id != CMOVE || state@id == MOVE) &&                     
           (state@id != MOVE || cstate@id != CMOVE ||                    
            (x@id == cx@id && y@id == cy@id && xp@id == cxp@id && yp@id == cyp@id)));
    /** (x,y) of node and controller match */
    ASSERT(x@id == cx@id && y@id == cy@id);
  }
  
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    /** this is AC2 */
    /** if node 1 and node 2 are in MOVE, then node1.(x,y) and
        node1.(xp,yp) are distinct from node.(x,y) and
        node2.(xp,yp) */
    ASSERT(cstate@id1 != CMOVE || cstate@id2 != CMOVE ||                  
           ((cx@id1 != cx@id2 || cy@id1 != cy@id2) &&               
            (cx@id1 != cxp@id2 || cy@id1 != cyp@id2) &&               
            (cxp@id1 != cx@id2 || cyp@id1 != cy@id2) &&               
            (cxp@id1 != cxp@id2 || cyp@id1 != cyp@id2)));

    /** this is AC3 */
    /** if node 1 is in HOVER and node 2 is in MOVE, then node1.(x,y)
        is distinct from node2.(x,y) and node2.(xp,yp) */
    ASSERT((cstate@id1 != CHOVER || cstate@id2 != CMOVE || 
                           ((cx@id1 != cx@id2 || cy@id1 != cy@id2) && 
                            (cx@id1 != cxp@id2 || cy@id1 != cyp@id2))) &&
           (cstate@id2 != CHOVER || cstate@id1 != CMOVE || 
                           ((cx@id2 != cx@id1 || cy@id2 != cy@id1) && 
                            (cx@id2 != cxp@id1 || cy@id2 != cyp@id1))));

    /** this is AC4 */
    /** if two distinct controllers are in HOVER, they have different
        (x,y) */
    ASSERT(cstate@id1 != CHOVER || cstate@id2 != CHOVER || cx@id1 != cx@id2 || cy@id1 != cy@id2);
  }

  //-- the rest are supporting invariants. you only need them for
  //-- plain induction. you can skip them (by uncommenting the
  //-- following return statement) out if you are doing K-induction
  //-- with K>=3.
  //return;
    
  /** either all nodes are in INITS or none is */
  allIn = 1; noneIn = 1;
  FORALL_NODE(id) {
    if(state@id == INITS) { noneIn = 0; }
    if(state@id != INITS) { allIn = 0; }
  }
  ASSERT(allIn || noneIn);
  
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    /** if node1 is in MOVE/NEXT and has lower id than node2 which is
        WAITING then they have different xp,yp */
    ASSERT((state@id1 != NEXT && state@id1 != MOVE) || state@id2 != WAITING || id1 >= id2 || xp@id1 != xp@id2 || yp@id1 != yp@id2);
    /** if two distinct nodes are in MOVE, they have different
        (xp,yp) */
    ASSERT(state@id1 != MOVE || state@id2 != MOVE ||                        
           ((xp@id1 != xp@id2 || yp@id1 != yp@id2) &&             
            (xp@id1 != x@id2 || yp@id1 != y@id2) &&               
            (x@id1 != xp@id2 || y@id1 != yp@id2) &&               
            (x@id1 != x@id2 || y@id1 != y@id2)));
    /** if node2 in WAITING, and node1 has lower id than node 2, then
        node1.(x,y) != node2.(xp,yp) */
    ASSERT(state@id2 != WAITING || id1 >= id2 || x@id1 != xp@id2 || y@id1 != yp@id2);
    /** if node2 in MOVE, then node1.(x,y) != node2.(xp,yp) */
    ASSERT((state@id2 != MOVE || x@id1 != xp@id2 || y@id1 != yp@id2) && (state@id1 != 4 || xp@id1 != x@id2 || yp@id1 != y@id2));
    /** two distinct nodes have different (x,y) */
    ASSERT(x@id1 != x@id2 || y@id1 != y@id2);
  }
}
