//-- an example with 5 nodes -- a leader in the middle and four
//-- protectors surrounding it. the leader moves from an initial to a
//-- target coordinate, going from one waypoint to the next following
//-- a path planning strategy. the protectors try to follow the
//-- leader's movement and keep it surrounded. each node has two
//-- threads -- a synchronous thread responsible for moving to the
//-- next waypoint avoiding collisions, and an asynchronous thread
//-- that determines the next waypoint for the node.

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include "madara/utility/Utility.h"

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//number of X and Y coordinates
CONST X = 20;
CONST Y = 20;

//states of each node
CONST INITS = 0;
CONST NEXT = 1;
CONST REQUEST = 2;
CONST WAITING = 3;
CONST MOVE = 4;

CONST TopY = 13;
CONST LeftX = -12.5;
CONST BottomY = -6;
CONST RightX = 6.5;

EXTERN void GRID_INIT(int _X,int _Y,double _LeftX,double _RightX,double _TopY,double _BottomY);
EXTERN void GRID_PLACE(unsigned char x,unsigned char y, double z);
EXTERN int GRID_MOVE(unsigned char x,unsigned char y, double z);
EXTERN int my_sleep(int seconds);
EXTERN void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf);
EXTERN void print_int(int i);
EXTERN double GET_LAT();
EXTERN double GET_LNG();

NODE uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  GLOBAL _Bool lock [X][Y];
  GLOBAL unsigned char lx,ly; //leader's destination coordinates
  GLOBAL _Bool init; //node is initialized

  //private variables -- local to the node.
  //preserved across rounds
  LOCAL unsigned char state; //the state
  LOCAL unsigned char x,y; //current coordinates
  LOCAL unsigned char xp,yp; //next coordinates
  LOCAL unsigned char xt,yt; //current target coordinates
  LOCAL _Bool waypointValid; //xt, yt are valid

  expect (x < 5);
  expect YLT5(y < 5);

  double coverage()
  {
    return GET_LAT() - GET_LNG()@0;
  }

  //@AT_LEAST(0.5)
  expect COVERAGE(coverage() > 0.9);
  
  _Bool NEXT_XY () {
    if(!waypointValid)
      return 1;
    xp = x; yp = y;
    if(x < xt) xp = x + 1;
    else if(x > xt) xp = x - 1;
    else if(y < yt) yp = y + 1;
    else yp = y - 1;
    return 0;
  }

//  @HERTZ(10)
//  @CRITICALITY(1)
//  @WCET_NOMINAL(10000)
//  @WCET_OVERLOAD(20000)
  void WAYPOINT() {
    if(id != 0 && init@0 == 0) {
      waypointValid = 0;
      return;
    } else {
      waypointValid = 1;
    }
    if(id == 0) {
      ly = yp;
      lx = xp;
    } if(id == 1) {
      xt = lx@0 + 1;
      yt = ly@0 + 1;
    } else if(id == 2) {
      xt = lx@0 - 1;
      yt = ly@0 + 1;
    } else if(id == 3) {
      xt = lx@0 - 1;
      yt = ly@0 - 1;
    } else if(id == 4) {
      xt = lx@0 + 1;
      yt = ly@0 - 1;
    }
  }

  //@HERTZ(10)
  //@CRITICALITY(2)
  //@WCET_NOMINAL(15000)
  //@WCET_OVERLOAD(30000)
  //@BARRIER_SYNC
  @PLATFORM_CONTROLLER
  void ROUND () {
    print_state(X,Y,id,x,y,xt,yt);
    //my_sleep(1);
    if(state == INITS) {
      lock[x][y] = 1;
      if(id == 0) {
        lx = x;
        ly = y;
      }
      init = 1;
      state = NEXT;
    } if(state == NEXT) {
      //compute next point on route
      if(x == xt && y == yt) return;
      if(NEXT_XY()) return;
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp]@idp != 0)) return;
      lock[xp][yp] = 1;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp]@idp != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,0.5)) return;
      lock[x][y] = 0; 
      x = xp; y = yp;
      state = NEXT;
    }
  }

  @INIT_SIM
  void StartingPosition ()
  {
    GRID_INIT(X, Y, LeftX, RightX, TopY, BottomY);
    GRID_PLACE(x, y, 0.5);
  }
}

//initial state
@INIT
void NodeInit () 
{
  FORALL_NODE(id) {
    state@id = INITS;
    ND(x@id); ND(y@id);
    ASSUME(0 <= x@id && x@id < X && 0 <= y@id && y@id < Y);
    ND(xt@id); ND(yt@id);
    ASSUME(0 <= xt@id && xt@id < X && 0 <= yt@id && yt@id < Y);
    waypointValid@id = 1;
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x@id1 != x@id2 || y@id1 != y@id2);
  }
}

//the safety property checked at the beginning of each round
@SAFETY
void NoCollisions ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x@id1 != x@id2 || y@id1 != y@id2);
  }
}
