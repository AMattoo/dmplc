//-- an example with 5 nodes -- a leader in the middle and four
//-- protectors surrounding it. the leader moves from an initial to a
//-- target coordinate, going from one waypoint to the next following
//-- a path planning strategy. the protectors try to follow the
//-- leader's movement and keep it surrounded. each node has three
//-- threads -- a synchronous thread responsible for moving to the
//-- next waypoint avoiding collisions, an asynchronous thread that
//-- determines the next waypoint for the node, and an asynchronous
//-- adaptation manager thread that switched formation between tight
//-- and loose. the timing characteristics for various thread
//-- (periods, WCETs etc.) are specified in a separate DMPL file.

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include <sys/resource.h>
#include "madara/utility/Utility.h"
#include "adaptation_manager.h"
  
int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

//-- return the current wall time since epoch
double wall_time()
{
  struct timeval tv;
  gettimeofday(&tv, NULL);
  return tv.tv_sec + 0.000001 * tv.tv_usec;
}
 
int round = 0;
int xi,yi;

void print_int(int i)
{
  printf("%i\n", i);
}

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}
%%}

//number of X and Y coordinates
CONST X = 20;
CONST Y = 20;

//states of each node
CONST INITS = 0;
CONST NEXT = 1;
CONST REQUEST = 2;
CONST WAITING = 3;
CONST MOVE = 4;

CONST TopY = 13;
CONST LeftX = -12.5;
CONST BottomY = -6;
CONST RightX = 6.5;

//EXTERN int MOVE_TO(unsigned char x,unsigned char y);
EXTERN int my_sleep(int seconds);
EXTERN void print_state(int XX,int YY,int id, int x, int y, int xf, int yf);
EXTERN void print_int(int i);
EXTERN double wall_time();

//-- the external function implementing the adaptation
//-- manager. returns 0 for loose formation and 1 for tight formation.
EXTERN int adaptation_manager
(
 int current_formation, //-- 0 loose, 1 tight
 int changing, //-- whether in process of changing to other formation
 double change_progress, //-- progress in changing to other formation (remaining time)
 //-- next n hazards (for the next n segments in the path)
 double hazard1,
 double hazard2,
 double hazard3,
 double hazard4,
 double hazard5,
 //-- variance of the next n hazards predictions
 double variance1,
 double variance2,
 double variance3,
 double variance4,
 double variance5,
 double loose_speed, //-- speed of loose formation
 double tight_speed, //-- speed of tight formation
 double segment_length, //-- length of a segment in the path
 int remaining_segments, //-- number of segments remaining in the path
 double remaining_flight_time //-- how much flight time the formation has left
 );

NODE uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  GLOBAL _Bool lock [X][Y];
  GLOBAL unsigned char lx,ly; //leader's destination coordinates
  GLOBAL _Bool init; //node is initialized

  //-- these variables are used to interact with the adaptation
  //-- manager
  GLOBAL _Bool formation; //0 = loose, 1 = tight
  GLOBAL _Bool changing; //are we chaning formation now?
  GLOBAL double remaining_time; //how much time left to complete formation change 
  LOCAL double hazards[X][Y]; //map from cells to hazards
  LOCAL double variances[X][Y]; //map from cells to variances in hazard predictions
  //-- next 5 waypoints
  LOCAL unsigned char next_wp_x[5]; 
  LOCAL unsigned char next_wp_y[5]; 
  //-- speeds in loose and tight formations
  LOCAL double loose_speed;
  LOCAL double tight_speed;
  //-- segment length and remaining segments
  LOCAL double seg_len;
  LOCAL unsigned char remaining_segs;
  //-- total mission time, and mission start time
  LOCAL double total_time;
  LOCAL double start_time;

  //-- we use counters for the number of formation changes by each
  //-- node. when the leader initiates a formation change, it
  //-- increments its counter. it waits for the other counters to
  //-- catch up detect that the formation change has completed.
  GLOBAL _Bool num_changes;
  
  //private variables -- local to the node.
  //preserved across rounds
  LOCAL unsigned char state; //the state
  LOCAL unsigned char x,y; //current coordinates
  LOCAL unsigned char xp,yp; //next coordinates
  LOCAL unsigned char xt,yt; //current target coordinates
  LOCAL _Bool waypointValid; //xt, yt are valid
  
  expect (x < 5);
  expect YLT5(y < 5);

  //-- return the next waypoint value
  _Bool NEXT_XY ()
  {
    if(!waypointValid)
      return 1;
    xp = x; yp = y;
    if(x < xt) xp = x + 1;
    else if(x > xt) xp = x - 1;
    else if(y < yt) yp = y + 1;
    else yp = y - 1;
    return 0;
  }

  //-- only return the next waypoint X value given the current waypoint
  unsigned char NEXT_X (unsigned char curr_x, unsigned char curr_y)
  {
    if(curr_x < xt) return curr_x + 1;
    if(curr_x > xt) return curr_x - 1;
    return curr_x;
  }

  //-- only return the next waypoint Y value given the current waypoint
  unsigned char NEXT_Y (unsigned char curr_x, unsigned char curr_y)
  {
    if(curr_y < yt) return curr_y + 1;
    if(curr_y > yt) return curr_y - 1;
    return curr_y;
  }

  //-- manhattan distance between (x,y) and (xt,yt)
  unsigned char REMAINING_SEGMENTS()
  {
    unsigned char res;
    res = 0;
    if(x < xt) res = res + (xt - x);
    else if(x > xt) res = res + (x - xt);
    if(y < yt) res = res + (yt - y);
    else if(y > yt) res = res + (y - yt);
    return res;
  }

  //-- the task that invokes the adaptation manager. this task only
  //-- does something meaningful for the leader node (i.e., id =
  //-- 0). otherwise it is a NOP.
  void ADAPTATION_MANAGER()
  {
    _Bool last_formation;    

    //-- not leader or uninitialized
    if(id != 0 || init@0 == 0) return;

    //-- check if formation change is still happening
    if(EXISTS_LOWER(idp,num_changes@idp != num_changes@id) ||
       EXISTS_HIGHER(idp,num_changes@idp != num_changes@id)) {
      changing@id = 1;
    } else {
      changing@id = 0;
    }
    
    //-- call the external adapatation manager
    last_formation = formation@0;
    formation@0 = adaptation_manager(formation@id,changing@id,remaining_time@id,
                                     //--XXX: this is broken: hazards[1][1],
                                     1, 2, 3, 2, 1,
                                     //--XXX: this is broken: variances[1][1],
                                     0.1, 0.3, 0.4, 0.7, 0.3,
                                     loose_speed, tight_speed,
                                     seg_len, remaining_segs,
                                     total_time - (wall_time() - start_time));

    //-- update the flag to indicate if a change formation is
    //-- triggered, and increment number of formation changes.
    if(!changing@id && last_formation != formation@0) {
      changing@id = 1;
      num_changes@id = 1 - num_changes@id;
    }
  }

  //-- the task that computes the next waypoint.
  void WAYPOINT()
  {
    if(id != 0 && init@0 == 0) {
      waypointValid = 0;
      return;
    } else {
      waypointValid = 1;
    }

    //-- note that while a formation change is happening, there will
    //-- be no change in xp and yp for the leader.
    if(id == 0) {
      ly@0 = yp;
      lx@0 = xp;
      return;
    }

    //-- loose formation
    if(formation@0 == 0) {
      if(id == 1) {
        xt = lx@0 + 2;
        yt = ly@0 + 2;
      } else if(id == 2) {
        xt = lx@0 - 2;
        yt = ly@0 + 2;
      } else if(id == 3) {
        xt = lx@0 - 2;
        yt = ly@0 - 2;
      } else if(id == 4) {
        xt = lx@0 + 2;
        yt = ly@0 - 2;
      }
      return;
    }

    //-- tight formation
    if(id == 1) {
      xt = lx@0 + 1;
      yt = ly@0 + 1;
    } else if(id == 2) {
      xt = lx@0 - 1;
      yt = ly@0 + 1;
    } else if(id == 3) {
      xt = lx@0 - 1;
      yt = ly@0 - 1;
    } else if(id == 4) {
      xt = lx@0 + 1;
      yt = ly@0 - 1;
    }
  }

  //-- the task that moves the node to its next waypoint while
  //-- avoiding collisions.
  @BARRIER_SYNC
  @PLATFORM_CONTROLLER
  void COLLISION_AVOIDANCE ()
  {
    unsigned char i,j;

    print_state(X,Y,id,x,y,xt,yt);
    //my_sleep(1);
    if(state == INITS) {
      //-- initialize
      lock[x][y]@id = 1;
      num_changes@id = 0;
      
      if(id == 0) {
        lx@id = x;
        ly@id = y;
        formation@id = 0;
        changing@id = 0;
        remaining_time@id = 0.0;

        //-- initialize hazards and variances arrays
        for(i = 0;i < X;) {
          for(j = 0;j < Y;) {
            //-- we start with a simple hazard mapping
            if(x < y) hazards[i][j] = 0.1;
            else hazards[i][j] = 0.9;
            //-- variances are fixed and low
            variances[i][j] = 0.01;
            j = j+1;
          }
          i = i+1; //XXX: this should be part of the for loop header
        }

        //-- also initialize next_wp_x and next_wp_y.
        next_wp_x[0] = x;
        next_wp_y[0] = y;
        for(i = 1;i < 5;) {        
          next_wp_x[i] = NEXT_X(next_wp_x[i - 1],next_wp_y[i - 1]);
          next_wp_y[i] = NEXT_Y(next_wp_x[i - 1],next_wp_y[i - 1]);
          i = i+1;
        }

        //-- we set default values of some system parameters
        //-- here. they will likely be initialized from the command
        //-- line.
        loose_speed = 10.0;
        tight_speed = 5.0;
        seg_len = 50.0;
        total_time = 100.0;
        
        remaining_segs = REMAINING_SEGMENTS();
        start_time = wall_time();
        
        init@id = 1;
      }

      state = NEXT;
    } if(state == NEXT) {
      //compute next point on route
      if(x == xt && y == yt) return;
      //-- the leader does not move if formation change is going on
      if(id == 0 && changing@id) return;
      //-- get the next waypoint
      if(NEXT_XY()) return;
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp]@idp != 0)) return;
      lock[xp][yp]@id = 1;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp]@idp != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(GRID_MOVE(xp,yp,0.5)) return;
      lock[x][y]@id = 0; 
      x = xp; y = yp;
      //-- if i am not the leader and a formation change was
      //-- happening, and i have reached the end-point, then formation
      //-- change is complete.
      if(id != 0 && num_changes@id != num_changes@0 && x == xt && y == yt) {
        num_changes@id = 1 - num_changes@id;
      }
      state = NEXT;
    }
  }

  @INIT_SIM
  void StartingPosition ()
  {
    GRID_INIT(X, Y, LeftX, RightX, TopY, BottomY);
    GRID_PLACE(x, y, 0.5);
  }
}

//initial state
@INIT
void NodeInit () 
{
  FORALL_NODE(id) {
    state@id = INITS;
    ND(x@id); ND(y@id);
    ASSUME(0 <= x@id && x@id < X && 0 <= y@id && y@id < Y);
    ND(xt@id); ND(yt@id);
    ASSUME(0 <= xt@id && xt@id < X && 0 <= yt@id && yt@id < Y);
    waypointValid@id = 1;
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x@id1 != x@id2 || y@id1 != y@id2);
  }
}

//the safety property checked at the beginning of each round
@SAFETY
void NoCollisions ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x@id1 != x@id2 || y@id1 != y@id2);
  }
}

/*********************************************************************/
//-- end of file
/*********************************************************************/
