/*
 * generated by Xtext
 */
package edu.cmu.sei.annex.dmpl.serializer;

import com.google.inject.Inject;
import edu.cmu.sei.annex.dmpl.services.DmplGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DmplSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DmplGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AttributableNodeOrProcedure_NODEKeyword_0_1_1_or_NodeKeyword_0_1_0;
	protected AbstractElementAlias match_AttributableNodeOrProcedure_SemicolonKeyword_0_3_0_or___LeftCurlyBracketKeyword_0_3_1_0_RightCurlyBracketKeyword_0_3_1_2__;
	protected AbstractElementAlias match_ProgramElementNoTarget_CONSTKeyword_2_1_1_or_ConstKeyword_2_1_0;
	protected AbstractElementAlias match_ProgramElement_TARGETKeyword_0_1_1_or_TargetKeyword_0_1_0;
	protected AbstractElementAlias match_Stmt_FORALL_DISTINCT_NODE_PAIRKeyword_9_1_1_or_Forall_distinct_node_pairKeyword_9_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DmplGrammarAccess) access;
		match_AttributableNodeOrProcedure_NODEKeyword_0_1_1_or_NodeKeyword_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAttributableNodeOrProcedureAccess().getNODEKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getAttributableNodeOrProcedureAccess().getNodeKeyword_0_1_0()));
		match_AttributableNodeOrProcedure_SemicolonKeyword_0_3_0_or___LeftCurlyBracketKeyword_0_3_1_0_RightCurlyBracketKeyword_0_3_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAttributableNodeOrProcedureAccess().getLeftCurlyBracketKeyword_0_3_1_0()), new TokenAlias(false, false, grammarAccess.getAttributableNodeOrProcedureAccess().getRightCurlyBracketKeyword_0_3_1_2())), new TokenAlias(false, false, grammarAccess.getAttributableNodeOrProcedureAccess().getSemicolonKeyword_0_3_0()));
		match_ProgramElementNoTarget_CONSTKeyword_2_1_1_or_ConstKeyword_2_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getProgramElementNoTargetAccess().getCONSTKeyword_2_1_1()), new TokenAlias(false, false, grammarAccess.getProgramElementNoTargetAccess().getConstKeyword_2_1_0()));
		match_ProgramElement_TARGETKeyword_0_1_1_or_TargetKeyword_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getProgramElementAccess().getTARGETKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getProgramElementAccess().getTargetKeyword_0_1_0()));
		match_Stmt_FORALL_DISTINCT_NODE_PAIRKeyword_9_1_1_or_Forall_distinct_node_pairKeyword_9_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStmtAccess().getFORALL_DISTINCT_NODE_PAIRKeyword_9_1_1()), new TokenAlias(false, false, grammarAccess.getStmtAccess().getForall_distinct_node_pairKeyword_9_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_AttributableNodeOrProcedure_NODEKeyword_0_1_1_or_NodeKeyword_0_1_0.equals(syntax))
				emit_AttributableNodeOrProcedure_NODEKeyword_0_1_1_or_NodeKeyword_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_AttributableNodeOrProcedure_SemicolonKeyword_0_3_0_or___LeftCurlyBracketKeyword_0_3_1_0_RightCurlyBracketKeyword_0_3_1_2__.equals(syntax))
				emit_AttributableNodeOrProcedure_SemicolonKeyword_0_3_0_or___LeftCurlyBracketKeyword_0_3_1_0_RightCurlyBracketKeyword_0_3_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ProgramElementNoTarget_CONSTKeyword_2_1_1_or_ConstKeyword_2_1_0.equals(syntax))
				emit_ProgramElementNoTarget_CONSTKeyword_2_1_1_or_ConstKeyword_2_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ProgramElement_TARGETKeyword_0_1_1_or_TargetKeyword_0_1_0.equals(syntax))
				emit_ProgramElement_TARGETKeyword_0_1_1_or_TargetKeyword_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Stmt_FORALL_DISTINCT_NODE_PAIRKeyword_9_1_1_or_Forall_distinct_node_pairKeyword_9_1_0.equals(syntax))
				emit_Stmt_FORALL_DISTINCT_NODE_PAIRKeyword_9_1_1_or_Forall_distinct_node_pairKeyword_9_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'node' | 'NODE'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=TIDENTIFIER
	 */
	protected void emit_AttributableNodeOrProcedure_NODEKeyword_0_1_1_or_NodeKeyword_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     name=TIDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_AttributableNodeOrProcedure_SemicolonKeyword_0_3_0_or___LeftCurlyBracketKeyword_0_3_1_0_RightCurlyBracketKeyword_0_3_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'const' | 'CONST'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=TIDENTIFIER
	 */
	protected void emit_ProgramElementNoTarget_CONSTKeyword_2_1_1_or_ConstKeyword_2_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'target' | 'TARGET'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) names+=TIDENTIFIER
	 */
	protected void emit_ProgramElement_TARGETKeyword_0_1_1_or_TargetKeyword_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'forall_distinct_node_pair' | 'FORALL_DISTINCT_NODE_PAIR'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' node1=TIDENTIFIER
	 */
	protected void emit_Stmt_FORALL_DISTINCT_NODE_PAIRKeyword_9_1_1_or_Forall_distinct_node_pairKeyword_9_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
