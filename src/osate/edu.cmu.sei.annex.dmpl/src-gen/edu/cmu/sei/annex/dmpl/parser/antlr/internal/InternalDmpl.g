/*
 * generated by Xtext
 */
grammar InternalDmpl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.cmu.sei.annex.dmpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.cmu.sei.annex.dmpl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.cmu.sei.annex.dmpl.services.DmplGrammarAccess;

}

@parser::members {

 	private DmplGrammarAccess grammarAccess;
 	
    public InternalDmplParser(TokenStream input, DmplGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected DmplGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProgramAccess().getProgramAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getProgramElementsProgramElementParserRuleCall_1_0()); 
	    }
		lv_programElements_1_0=ruleProgramElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"programElements",
        		lv_programElements_1_0, 
        		"ProgramElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleDmplSubclause
entryRuleDmplSubclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDmplSubclauseRule()); }
	 iv_ruleDmplSubclause=ruleDmplSubclause 
	 { $current=$iv_ruleDmplSubclause.current; } 
	 EOF 
;

// Rule DmplSubclause
ruleDmplSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDmplSubclauseAccess().getDmplSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDmplSubclauseAccess().getProgramProgramParserRuleCall_1_0()); 
	    }
		lv_program_1_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDmplSubclauseRule());
	        }
       		set(
       			$current, 
       			"program",
        		lv_program_1_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProgramElement
entryRuleProgramElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramElementRule()); }
	 iv_ruleProgramElement=ruleProgramElement 
	 { $current=$iv_ruleProgramElement.current; } 
	 EOF 
;

// Rule ProgramElement
ruleProgramElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramElementAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgramElementAccess().getProcedureParserRuleCall_1()); 
    }
    this_Procedure_1=ruleProcedure
    { 
        $current = $this_Procedure_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstKeyword_0_0());
    }

    |	otherlv_1='CONST' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantAccess().getCONSTKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getValueNumberConstParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleNumberConst		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"NumberConst");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleNumberConst
entryRuleNumberConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberConstRule()); }
	 iv_ruleNumberConst=ruleNumberConst 
	 { $current=$iv_ruleNumberConst.current; } 
	 EOF 
;

// Rule NumberConst
ruleNumberConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberConstAccess().getIntConstParserRuleCall_0()); 
    }
    this_IntConst_0=ruleIntConst
    { 
        $current = $this_IntConst_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberConstAccess().getDoubleConstParserRuleCall_1()); 
    }
    this_DoubleConst_1=ruleDoubleConst
    { 
        $current = $this_DoubleConst_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntConst
entryRuleIntConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstRule()); }
	 iv_ruleIntConst=ruleIntConst 
	 { $current=$iv_ruleIntConst.current; } 
	 EOF 
;

// Rule IntConst
ruleIntConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntConstAccess().getSignSignParserRuleCall_0_0()); 
	    }
		lv_sign_0_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntConstRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_0_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntConstAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleDoubleConst
entryRuleDoubleConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleConstRule()); }
	 iv_ruleDoubleConst=ruleDoubleConst 
	 { $current=$iv_ruleDoubleConst.current; } 
	 EOF 
;

// Rule DoubleConst
ruleDoubleConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleConstAccess().getSignSignParserRuleCall_0_0()); 
	    }
		lv_sign_0_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleConstRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_0_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleConstAccess().getValueDoubleParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleConstRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVarInit
entryRuleVarInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarInitRule()); }
	 iv_ruleVarInit=ruleVarInit 
	 { $current=$iv_ruleVarInit.current; } 
	 EOF 
;

// Rule VarInit
ruleVarInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitAccess().getVarInitItemsVarAsgnParserRuleCall_1_0()); 
	    }
		lv_varInitItems_1_0=ruleVarAsgn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitRule());
	        }
       		add(
       			$current, 
       			"varInitItems",
        		lv_varInitItems_1_0, 
        		"VarAsgn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarInitAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitAccess().getVarInitItemsVarAsgnParserRuleCall_2_1_0()); 
	    }
		lv_varInitItems_3_0=ruleVarAsgn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitRule());
	        }
       		add(
       			$current, 
       			"varInitItems",
        		lv_varInitItems_3_0, 
        		"VarAsgn");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVarAsgn
entryRuleVarAsgn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarAsgnRule()); }
	 iv_ruleVarAsgn=ruleVarAsgn 
	 { $current=$iv_ruleVarAsgn.current; } 
	 EOF 
;

// Rule VarAsgn
ruleVarAsgn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_input_0_0=	'input' 
    {
        newLeafNode(lv_input_0_0, grammarAccess.getVarAsgnAccess().getInputInputKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAsgnRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_0_1_0()); 
	    }
		lv_var_1_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarAsgnAccess().getExprVarAsgnAction_1_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_1_1_0_0_0()); 
	    }
		lv_var_3_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_3_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVarAsgnAccess().getEqualsSignKeyword_1_1_0_1());
    }
)
    |((
(
		lv_input_5_0=	'input' 
    {
        newLeafNode(lv_input_5_0, grammarAccess.getVarAsgnAccess().getInputInputKeyword_1_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAsgnRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_1_1_1_1_0()); 
	    }
		lv_var_6_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_6_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='~' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVarAsgnAccess().getTildeKeyword_1_1_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getExprExprParserRuleCall_1_2_0()); 
	    }
		lv_expr_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_8_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarAsgnAccess().getFnVarAsgnAction_2_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_2_1_0_0_0()); 
	    }
		lv_var_10_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_10_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getVarAsgnAccess().getEqualsSignKeyword_2_1_0_1());
    }
)
    |((
(
		lv_input_12_0=	'input' 
    {
        newLeafNode(lv_input_12_0, grammarAccess.getVarAsgnAccess().getInputInputKeyword_2_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAsgnRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_2_1_1_1_0()); 
	    }
		lv_var_13_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_13_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='~' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getVarAsgnAccess().getTildeKeyword_2_1_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getFnBodyFnBodyParserRuleCall_2_2_0()); 
	    }
		lv_fnBody_15_0=ruleFnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"fnBody",
        		lv_fnBody_15_0, 
        		"FnBody");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameTIDENTIFIERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TIDENTIFIER");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAccess().getDimensionsDimensionParserRuleCall_1_1_0()); 
	    }
		lv_dimensions_2_0=ruleDimension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_2_0, 
        		"Dimension");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleDimension
entryRuleDimension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDimensionRule()); }
	 iv_ruleDimension=ruleDimension 
	 { $current=$iv_ruleDimension.current; } 
	 EOF 
;

// Rule Dimension
ruleDimension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimensionAccess().getIntDimensionAction_0_0(),
            $current);
    }
)(
(
		lv_index_1_0=RULE_INT
		{
			newLeafNode(lv_index_1_0, grammarAccess.getDimensionAccess().getIndexINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDimensionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimensionAccess().getNodeNumDimensionAction_1_0(),
            $current);
    }
)	otherlv_3='#N' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDimensionAccess().getNKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimensionAccess().getIdDimensionAction_2_0(),
            $current);
    }
)(
(
		lv_index_5_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_index_5_0, grammarAccess.getDimensionAccess().getIndexTIDENTIFIERTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDimensionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_5_0, 
        		"TIDENTIFIER");
	    }

)
)))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getSignedSignedParserRuleCall_0_0()); 
	    }
		lv_signed_0_0=ruleSigned		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"signed",
        		lv_signed_0_0, 
        		"Signed");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getSimpTypeSimpTypeParserRuleCall_1_0()); 
	    }
		lv_simpType_1_0=ruleSimpType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"simpType",
        		lv_simpType_1_0, 
        		"SimpType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getProcedureProcNoAttrParserRuleCall_0()); 
	    }
		lv_procedure_0_0=ruleProcNoAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"procedure",
        		lv_procedure_0_0, 
        		"ProcNoAttr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProcNoAttr
entryRuleProcNoAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcNoAttrRule()); }
	 iv_ruleProcNoAttr=ruleProcNoAttr 
	 { $current=$iv_ruleProcNoAttr.current; } 
	 EOF 
;

// Rule ProcNoAttr
ruleProcNoAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcNoAttrAccess().getPrototypeFnPrototypeParserRuleCall_0_0()); 
	    }
		lv_prototype_0_0=ruleFnPrototype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcNoAttrRule());
	        }
       		set(
       			$current, 
       			"prototype",
        		lv_prototype_0_0, 
        		"FnPrototype");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcNoAttrAccess().getSemicolonKeyword_1_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProcNoAttrAccess().getFnBodyFnBodyParserRuleCall_1_1_0()); 
	    }
		lv_fnBody_2_0=ruleFnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcNoAttrRule());
	        }
       		set(
       			$current, 
       			"fnBody",
        		lv_fnBody_2_0, 
        		"FnBody");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFnBody
entryRuleFnBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFnBodyRule()); }
	 iv_ruleFnBody=ruleFnBody 
	 { $current=$iv_ruleFnBody.current; } 
	 EOF 
;

// Rule FnBody
ruleFnBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFnBodyAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnBodyAccess().getVarInitListVarInitListParserRuleCall_1_0()); 
	    }
		lv_varInitList_1_0=ruleVarInitList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnBodyRule());
	        }
       		set(
       			$current, 
       			"varInitList",
        		lv_varInitList_1_0, 
        		"VarInitList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFnBodyAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFnPrototype
entryRuleFnPrototype returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFnPrototypeRule()); }
	 iv_ruleFnPrototype=ruleFnPrototype 
	 { $current=$iv_ruleFnPrototype.current; } 
	 EOF 
;

// Rule FnPrototype
ruleFnPrototype returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFnPrototypeAccess().getThreadDeclarationAction_0_0(),
            $current);
    }
)(
(
(
		lv_extern_1_1=	'extern' 
    {
        newLeafNode(lv_extern_1_1, grammarAccess.getFnPrototypeAccess().getExternExternKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

    |		lv_extern_1_2=	'EXTERN' 
    {
        newLeafNode(lv_extern_1_2, grammarAccess.getFnPrototypeAccess().getExternEXTERNKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

)

)
)?(
(
(
		lv_pure_2_1=	'pure' 
    {
        newLeafNode(lv_pure_2_1, grammarAccess.getFnPrototypeAccess().getPurePureKeyword_0_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

    |		lv_pure_2_2=	'PURE' 
    {
        newLeafNode(lv_pure_2_2, grammarAccess.getFnPrototypeAccess().getPurePUREKeyword_0_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

)

)
)?	otherlv_3='thread' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFnPrototypeAccess().getThreadKeyword_0_3());
    }
(
(
		lv_name_4_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFnPrototypeAccess().getNameTIDENTIFIERTerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"TIDENTIFIER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFnPrototypeAccess().getFnPrototypeDeclarationAction_1_0(),
            $current);
    }
)(
(
(
		lv_extern_6_1=	'extern' 
    {
        newLeafNode(lv_extern_6_1, grammarAccess.getFnPrototypeAccess().getExternExternKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

    |		lv_extern_6_2=	'EXTERN' 
    {
        newLeafNode(lv_extern_6_2, grammarAccess.getFnPrototypeAccess().getExternEXTERNKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

)

)
)?(
(
(
		lv_pure_7_1=	'pure' 
    {
        newLeafNode(lv_pure_7_1, grammarAccess.getFnPrototypeAccess().getPurePureKeyword_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

    |		lv_pure_7_2=	'PURE' 
    {
        newLeafNode(lv_pure_7_2, grammarAccess.getFnPrototypeAccess().getPurePUREKeyword_1_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFnPrototypeAccess().getTypeTypeParserRuleCall_1_3_0()); 
	    }
		lv_type_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnPrototypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_9_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_9_0, grammarAccess.getFnPrototypeAccess().getNameTIDENTIFIERTerminalRuleCall_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFnPrototypeAccess().getLeftParenthesisKeyword_1_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFnPrototypeAccess().getParamsParamParserRuleCall_1_6_0_0()); 
	    }
		lv_params_11_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnPrototypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_11_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFnPrototypeAccess().getCommaKeyword_1_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnPrototypeAccess().getParamsParamParserRuleCall_1_6_1_1_0()); 
	    }
		lv_params_13_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnPrototypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_13_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFnPrototypeAccess().getRightParenthesisKeyword_1_7());
    }
))
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getVarVarParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVarInitList
entryRuleVarInitList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarInitListRule()); }
	 iv_ruleVarInitList=ruleVarInitList 
	 { $current=$iv_ruleVarInitList.current; } 
	 EOF 
;

// Rule VarInitList
ruleVarInitList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarInitListAccess().getVarInitListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitListAccess().getVarInitsVarInitParserRuleCall_1_0_0()); 
	    }
		lv_varInits_1_0=ruleVarInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitListRule());
	        }
       		add(
       			$current, 
       			"varInits",
        		lv_varInits_1_0, 
        		"VarInit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarInitListAccess().getSemicolonKeyword_1_1());
    }
)*)
;





// Entry rule entryRuleLVal
entryRuleLVal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLValRule()); }
	 iv_ruleLVal=ruleLVal 
	 { $current=$iv_ruleLVal.current; } 
	 EOF 
;

// Rule LVal
ruleLVal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLValAccess().getNameTIDENTIFIERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TIDENTIFIER");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLValAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLValAccess().getIndicesExprParserRuleCall_1_1_0()); 
	    }
		lv_indices_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLValRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLValAccess().getRightSquareBracketKeyword_1_2());
    }
)*(	otherlv_4='@' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLValAccess().getCommercialAtKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLValAccess().getAtExprParserRuleCall_2_1_0()); 
	    }
		lv_at_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLValRule());
	        }
       		set(
       			$current, 
       			"at",
        		lv_at_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'?' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprAccess().getTernaryExprConditionAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprAccess().getQuestionMarkKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getThenExprParserRuleCall_1_1_0()); 
	    }
		lv_then_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExprAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getElseExprParserRuleCall_1_3_0()); 
	    }
		lv_else_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'||' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExprAccess().getVerticalLineVerticalLineKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getBitwiseOrExprParserRuleCall_0()); 
    }
    this_BitwiseOrExpr_0=ruleBitwiseOrExpr
    { 
        $current = $this_BitwiseOrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'&&' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExprAccess().getAmpersandAmpersandKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightBitwiseOrExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBitwiseOrExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitwiseOrExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseOrExpr
entryRuleBitwiseOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOrExprRule()); }
	 iv_ruleBitwiseOrExpr=ruleBitwiseOrExpr 
	 { $current=$iv_ruleBitwiseOrExpr.current; } 
	 EOF 
;

// Rule BitwiseOrExpr
ruleBitwiseOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseOrExprAccess().getXorExprParserRuleCall_0()); 
    }
    this_XorExpr_0=ruleXorExpr
    { 
        $current = $this_XorExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'|' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseOrExprAccess().getBitwiseOrExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseOrExprAccess().getVerticalLineKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExprAccess().getRightXorExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleXorExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"XorExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXorExpr
entryRuleXorExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorExprRule()); }
	 iv_ruleXorExpr=ruleXorExpr 
	 { $current=$iv_ruleXorExpr.current; } 
	 EOF 
;

// Rule XorExpr
ruleXorExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXorExprAccess().getBitwiseAndExprParserRuleCall_0()); 
    }
    this_BitwiseAndExpr_0=ruleBitwiseAndExpr
    { 
        $current = $this_BitwiseAndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'^' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXorExprAccess().getXorExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXorExprAccess().getCircumflexAccentKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXorExprAccess().getRightBitwiseAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBitwiseAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitwiseAndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseAndExpr
entryRuleBitwiseAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseAndExprRule()); }
	 iv_ruleBitwiseAndExpr=ruleBitwiseAndExpr 
	 { $current=$iv_ruleBitwiseAndExpr.current; } 
	 EOF 
;

// Rule BitwiseAndExpr
ruleBitwiseAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseAndExprAccess().getEqualityExprParserRuleCall_0()); 
    }
    this_EqualityExpr_0=ruleEqualityExpr
    { 
        $current = $this_EqualityExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'&' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseAndExprAccess().getBitwiseAndExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseAndExprAccess().getAmpersandKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExprAccess().getRightEqualityExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleEqualityExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EqualityExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpr
entryRuleEqualityExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExprRule()); }
	 iv_ruleEqualityExpr=ruleEqualityExpr 
	 { $current=$iv_ruleEqualityExpr.current; } 
	 EOF 
;

// Rule EqualityExpr
ruleEqualityExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExprAccess().getCompareExprParserRuleCall_0()); 
    }
    this_CompareExpr_0=ruleCompareExpr
    { 
        $current = $this_CompareExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleEqualityOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExprAccess().getEqualityExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExprAccess().getOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExprAccess().getRightCompareExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleCompareExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"CompareExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareExpr
entryRuleCompareExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExprRule()); }
	 iv_ruleCompareExpr=ruleCompareExpr 
	 { $current=$iv_ruleCompareExpr.current; } 
	 EOF 
;

// Rule CompareExpr
ruleCompareExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExprAccess().getShiftExprParserRuleCall_0()); 
    }
    this_ShiftExpr_0=ruleShiftExpr
    { 
        $current = $this_ShiftExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleCompareOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExprAccess().getCompareExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExprAccess().getOperatorCompareOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExprAccess().getRightShiftExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleShiftExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ShiftExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleShiftExpr
entryRuleShiftExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExprRule()); }
	 iv_ruleShiftExpr=ruleShiftExpr 
	 { $current=$iv_ruleShiftExpr.current; } 
	 EOF 
;

// Rule ShiftExpr
ruleShiftExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getShiftExprAccess().getAdditiveExprParserRuleCall_0()); 
    }
    this_AdditiveExpr_0=ruleAdditiveExpr
    { 
        $current = $this_AdditiveExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleShiftOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExprAccess().getShiftExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExprAccess().getOperatorShiftOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExprAccess().getRightAdditiveExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExprRule()); }
	 iv_ruleAdditiveExpr=ruleAdditiveExpr 
	 { $current=$iv_ruleAdditiveExpr.current; } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExprAccess().getMultiplicativeExprParserRuleCall_0()); 
    }
    this_MultiplicativeExpr_0=ruleMultiplicativeExpr
    { 
        $current = $this_MultiplicativeExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleAdditiveOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExprAccess().getAdditiveExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getRightMultiplicativeExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExprRule()); }
	 iv_ruleMultiplicativeExpr=ruleMultiplicativeExpr 
	 { $current=$iv_ruleMultiplicativeExpr.current; } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getTerminalExprParserRuleCall_0()); 
    }
    this_TerminalExpr_0=ruleTerminalExpr
    { 
        $current = $this_TerminalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleMultiplicativeOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExprAccess().getMultiplicativeExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getRightTerminalExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleTerminalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TerminalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerminalExpr
entryRuleTerminalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExprRule()); }
	 iv_ruleTerminalExpr=ruleTerminalExpr 
	 { $current=$iv_ruleTerminalExpr.current; } 
	 EOF 
;

// Rule TerminalExpr
ruleTerminalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getLValParserRuleCall_0()); 
    }
    this_LVal_0=ruleLVal
    { 
        $current = $this_LVal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIdExprAction_1_0(),
            $current);
    }
)	otherlv_2='id' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalExprAccess().getIdKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIntExprAction_2_0(),
            $current);
    }
)(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getTerminalExprAccess().getValueINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getDoubleExprAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getValueDoubleParserRuleCall_3_1_0()); 
	    }
		lv_value_6_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getNodeNumExprAction_4_0(),
            $current);
    }
)	otherlv_8='#N' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTerminalExprAccess().getNKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getUnaryExprAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getOperatorUnaryOperatorEnumRuleCall_5_1_0()); 
	    }
		lv_operator_10_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_10_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getOperandExprParserRuleCall_5_2_0()); 
	    }
		lv_operand_11_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_11_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getBuiltInExprAction_6_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getFunctionBuiltInFunctionParserRuleCall_6_1_0()); 
	    }
		lv_function_13_0=ruleBuiltInFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_13_0, 
        		"BuiltInFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_6_2());
    }
(
(
		lv_firstArg_15_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_firstArg_15_0, grammarAccess.getTerminalExprAccess().getFirstArgTIDENTIFIERTerminalRuleCall_6_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"firstArg",
        		lv_firstArg_15_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTerminalExprAccess().getCommaKeyword_6_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getSecondArgExprParserRuleCall_6_5_0()); 
	    }
		lv_secondArg_17_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"secondArg",
        		lv_secondArg_17_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_6_6());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getCallExprParserRuleCall_7()); 
    }
    this_CallExpr_19=ruleCallExpr
    { 
        $current = $this_CallExpr_19.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_20='(' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_8_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getExprParserRuleCall_8_1()); 
    }
    this_Expr_21=ruleExpr
    { 
        $current = $this_Expr_21.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_8_2());
    }
))
;





// Entry rule entryRuleCallExpr
entryRuleCallExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallExprRule()); }
	 iv_ruleCallExpr=ruleCallExpr 
	 { $current=$iv_ruleCallExpr.current; } 
	 EOF 
;

// Rule CallExpr
ruleCallExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_namespace_0_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_namespace_0_0, grammarAccess.getCallExprAccess().getNamespaceTIDENTIFIERTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_0_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallExprAccess().getColonColonKeyword_0_1());
    }
)?(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCallExprAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallExprAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallExprAccess().getArgListArgListParserRuleCall_3_0()); 
	    }
		lv_argList_4_0=ruleArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallExprRule());
	        }
       		set(
       			$current, 
       			"argList",
        		lv_argList_4_0, 
        		"ArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallExprAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_6='@' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCallExprAccess().getCommercialAtKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallExprAccess().getAtExprParserRuleCall_5_1_0()); 
	    }
		lv_at_7_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallExprRule());
	        }
       		set(
       			$current, 
       			"at",
        		lv_at_7_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleArgList
entryRuleArgList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgListRule()); }
	 iv_ruleArgList=ruleArgList 
	 { $current=$iv_ruleArgList.current; } 
	 EOF 
;

// Rule ArgList
ruleArgList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgListAccess().getArgListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArgListAccess().getArgsExprParserRuleCall_1_0_0()); 
	    }
		lv_args_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgListRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArgListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgListAccess().getArgsExprParserRuleCall_1_1_1_0()); 
	    }
		lv_args_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgListRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleSign
entryRuleSign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_ruleSign=ruleSign 
	 { $current=$iv_ruleSign.current.getText(); }  
	 EOF 
;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSimpType
entryRuleSimpType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpTypeRule()); } 
	 iv_ruleSimpType=ruleSimpType 
	 { $current=$iv_ruleSimpType.current.getText(); }  
	 EOF 
;

// Rule SimpType
ruleSimpType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getBoolKeyword_0()); 
    }

    |
	kw='_Bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().get_BoolKeyword_1()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getIntKeyword_2()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getDoubleKeyword_3()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getVoidKeyword_4()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getCharKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleSigned
entryRuleSigned returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedRule()); } 
	 iv_ruleSigned=ruleSigned 
	 { $current=$iv_ruleSigned.current.getText(); }  
	 EOF 
;

// Rule Signed
ruleSigned returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='signed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedAccess().getSignedKeyword_0()); 
    }

    |
	kw='unsigned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedAccess().getUnsignedKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBuiltInFunction
entryRuleBuiltInFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInFunctionRule()); } 
	 iv_ruleBuiltInFunction=ruleBuiltInFunction 
	 { $current=$iv_ruleBuiltInFunction.current.getText(); }  
	 EOF 
;

// Rule BuiltInFunction
ruleBuiltInFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='exists_other' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getExists_otherKeyword_0()); 
    }

    |
	kw='EXISTS_OTHER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getEXISTS_OTHERKeyword_1()); 
    }

    |
	kw='exists_higher' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getExists_higherKeyword_2()); 
    }

    |
	kw='EXISTS_HIGHER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getEXISTS_HIGHERKeyword_3()); 
    }

    |
	kw='exists_lower' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getExists_lowerKeyword_4()); 
    }

    |
	kw='EXISTS_LOWER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getEXISTS_LOWERKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='NAN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getNANKeyword_0()); 
    }

    |(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1_1()); 
    }
(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2()); 
    }
)?))
    ;











// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLESS_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLESS_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGREATEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getGREATEREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGREATER_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGREATER_EQUALEnumLiteralDeclaration_3()); 
    }
));



// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<<' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getLEFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getShiftOperatorAccess().getLEFTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>>' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getRIGHTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getShiftOperatorAccess().getRIGHTEnumLiteralDeclaration_1()); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMULTIPLYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMULTIPLYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDIVIDEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMODULUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getMODULUSEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='!' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='~' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_3()); 
    }
));





RULE_TIDENTIFIER : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


