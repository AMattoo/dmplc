/*
 * generated by Xtext
 */
grammar InternalDmpl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.cmu.sei.annex.dmpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.cmu.sei.annex.dmpl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.cmu.sei.annex.dmpl.services.DmplGrammarAccess;

}

@parser::members {

 	private DmplGrammarAccess grammarAccess;
 	
    public InternalDmplParser(TokenStream input, DmplGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected DmplGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProgramAccess().getProgramAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getProgramElementsProgramElementParserRuleCall_1_0()); 
	    }
		lv_programElements_1_0=ruleProgramElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"programElements",
        		lv_programElements_1_0, 
        		"ProgramElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleDmplSubclause
entryRuleDmplSubclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDmplSubclauseRule()); }
	 iv_ruleDmplSubclause=ruleDmplSubclause 
	 { $current=$iv_ruleDmplSubclause.current; } 
	 EOF 
;

// Rule DmplSubclause
ruleDmplSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDmplSubclauseAccess().getDmplSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDmplSubclauseAccess().getProgramProgramParserRuleCall_1_0()); 
	    }
		lv_program_1_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDmplSubclauseRule());
	        }
       		set(
       			$current, 
       			"program",
        		lv_program_1_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProgramElement
entryRuleProgramElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramElementRule()); }
	 iv_ruleProgramElement=ruleProgramElement 
	 { $current=$iv_ruleProgramElement.current; } 
	 EOF 
;

// Rule ProgramElement
ruleProgramElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramElementAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgramElementAccess().getNodeParserRuleCall_1()); 
    }
    this_Node_1=ruleNode
    { 
        $current = $this_Node_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgramElementAccess().getProcedureParserRuleCall_2()); 
    }
    this_Procedure_2=ruleProcedure
    { 
        $current = $this_Procedure_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstKeyword_0_0());
    }

    |	otherlv_1='CONST' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantAccess().getCONSTKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getValueNumberConstParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleNumberConst		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"NumberConst");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleNumberConst
entryRuleNumberConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberConstRule()); }
	 iv_ruleNumberConst=ruleNumberConst 
	 { $current=$iv_ruleNumberConst.current; } 
	 EOF 
;

// Rule NumberConst
ruleNumberConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberConstAccess().getIntConstParserRuleCall_0()); 
    }
    this_IntConst_0=ruleIntConst
    { 
        $current = $this_IntConst_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberConstAccess().getDoubleConstParserRuleCall_1()); 
    }
    this_DoubleConst_1=ruleDoubleConst
    { 
        $current = $this_DoubleConst_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntConst
entryRuleIntConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstRule()); }
	 iv_ruleIntConst=ruleIntConst 
	 { $current=$iv_ruleIntConst.current; } 
	 EOF 
;

// Rule IntConst
ruleIntConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntConstAccess().getSignSignParserRuleCall_0_0()); 
	    }
		lv_sign_0_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntConstRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_0_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntConstAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleDoubleConst
entryRuleDoubleConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleConstRule()); }
	 iv_ruleDoubleConst=ruleDoubleConst 
	 { $current=$iv_ruleDoubleConst.current; } 
	 EOF 
;

// Rule DoubleConst
ruleDoubleConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleConstAccess().getSignSignParserRuleCall_0_0()); 
	    }
		lv_sign_0_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleConstRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_0_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleConstAccess().getValueDoubleParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleConstRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getNodeNodeNoAttrParserRuleCall_0()); 
	    }
		lv_node_0_0=ruleNodeNoAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_0_0, 
        		"NodeNoAttr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNodeNoAttr
entryRuleNodeNoAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeNoAttrRule()); }
	 iv_ruleNodeNoAttr=ruleNodeNoAttr 
	 { $current=$iv_ruleNodeNoAttr.current; } 
	 EOF 
;

// Rule NodeNoAttr
ruleNodeNoAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='node' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeNoAttrAccess().getNodeKeyword_0_0());
    }

    |	otherlv_1='NODE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeNoAttrAccess().getNODEKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNodeNoAttrAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodeNoAttrAccess().getSemicolonKeyword_2_0());
    }

    |(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeNoAttrAccess().getLeftCurlyBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeNoAttrAccess().getBodyNodeBodyParserRuleCall_2_1_1_0()); 
	    }
		lv_body_5_0=ruleNodeBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeNoAttrRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"NodeBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeNoAttrAccess().getRightCurlyBracketKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleSpecNoAttr
entryRuleSpecNoAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecNoAttrRule()); }
	 iv_ruleSpecNoAttr=ruleSpecNoAttr 
	 { $current=$iv_ruleSpecNoAttr.current; } 
	 EOF 
;

// Rule SpecNoAttr
ruleSpecNoAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecNoAttrAccess().getAtEndSpecAction_0_0(),
            $current);
    }
)	otherlv_1='expect' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSpecNoAttrAccess().getExpectKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSpecNoAttrAccess().getNameTIDENTIFIERTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSpecNoAttrAccess().getColonKeyword_0_3());
    }
	otherlv_4='at_end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSpecNoAttrAccess().getAt_endKeyword_0_4());
    }
	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSpecNoAttrAccess().getEqualsSignGreaterThanSignKeyword_0_5());
    }
(
(
		lv_function_6_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_function_6_0, grammarAccess.getSpecNoAttrAccess().getFunctionTIDENTIFIERTerminalRuleCall_0_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_6_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSpecNoAttrAccess().getSemicolonKeyword_0_7());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecNoAttrAccess().getAtLeastSpecAction_1_0(),
            $current);
    }
)	otherlv_9='expect' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSpecNoAttrAccess().getExpectKeyword_1_1());
    }
(
(
		lv_name_10_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_10_0, grammarAccess.getSpecNoAttrAccess().getNameTIDENTIFIERTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSpecNoAttrAccess().getColonKeyword_1_3());
    }
	otherlv_12='at_least' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSpecNoAttrAccess().getAt_leastKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecNoAttrAccess().getThresholdDoubleConstParserRuleCall_1_5_0()); 
	    }
		lv_threshold_13_0=ruleDoubleConst		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecNoAttrRule());
	        }
       		set(
       			$current, 
       			"threshold",
        		lv_threshold_13_0, 
        		"DoubleConst");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='=>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSpecNoAttrAccess().getEqualsSignGreaterThanSignKeyword_1_6());
    }
(
(
		lv_function_15_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_function_15_0, grammarAccess.getSpecNoAttrAccess().getFunctionTIDENTIFIERTerminalRuleCall_1_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_15_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSpecNoAttrAccess().getSemicolonKeyword_1_8());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecNoAttrAccess().getRequireSpecAction_2_0(),
            $current);
    }
)	otherlv_18='require' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSpecNoAttrAccess().getRequireKeyword_2_1());
    }
(
(
		lv_name_19_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_19_0, grammarAccess.getSpecNoAttrAccess().getNameTIDENTIFIERTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_19_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_20='=>' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getSpecNoAttrAccess().getEqualsSignGreaterThanSignKeyword_2_3());
    }
(
(
		lv_function_21_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_function_21_0, grammarAccess.getSpecNoAttrAccess().getFunctionTIDENTIFIERTerminalRuleCall_2_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_21_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_22=';' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getSpecNoAttrAccess().getSemicolonKeyword_2_5());
    }
))
;





// Entry rule entryRuleNodeBody
entryRuleNodeBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeBodyRule()); }
	 iv_ruleNodeBody=ruleNodeBody 
	 { $current=$iv_ruleNodeBody.current; } 
	 EOF 
;

// Rule NodeBody
ruleNodeBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeBodyAccess().getNodeBodyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeBodyAccess().getElementsNodeBodyElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleNodeBodyElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeBodyRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"NodeBodyElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleNodeBodyElement
entryRuleNodeBodyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeBodyElementRule()); }
	 iv_ruleNodeBodyElement=ruleNodeBodyElement 
	 { $current=$iv_ruleNodeBodyElement.current; } 
	 EOF 
;

// Rule NodeBodyElement
ruleNodeBodyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeBodyElementAccess().getVarBlockParserRuleCall_0()); 
    }
    this_VarBlock_0=ruleVarBlock
    { 
        $current = $this_VarBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeBodyElementAccess().getRecordBlockParserRuleCall_1()); 
    }
    this_RecordBlock_1=ruleRecordBlock
    { 
        $current = $this_RecordBlock_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeBodyElementAccess().getAttributableParserRuleCall_2()); 
    }
    this_Attributable_2=ruleAttributable
    { 
        $current = $this_Attributable_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttributable
entryRuleAttributable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributableRule()); }
	 iv_ruleAttributable=ruleAttributable 
	 { $current=$iv_ruleAttributable.current; } 
	 EOF 
;

// Rule Attributable
ruleAttributable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributableAccess().getAttrListAttrListParserRuleCall_0_0()); 
	    }
		lv_attrList_0_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributableRule());
	        }
       		set(
       			$current, 
       			"attrList",
        		lv_attrList_0_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributableAccess().getElementAttributableElementParserRuleCall_1_0()); 
	    }
		lv_element_1_0=ruleAttributableElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributableRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_1_0, 
        		"AttributableElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributableElement
entryRuleAttributableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributableElementRule()); }
	 iv_ruleAttributableElement=ruleAttributableElement 
	 { $current=$iv_ruleAttributableElement.current; } 
	 EOF 
;

// Rule AttributableElement
ruleAttributableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributableElementAccess().getProcNoAttrParserRuleCall_0()); 
    }
    this_ProcNoAttr_0=ruleProcNoAttr
    { 
        $current = $this_ProcNoAttr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributableElementAccess().getRoleParserRuleCall_1()); 
    }
    this_Role_1=ruleRole
    { 
        $current = $this_Role_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributableElementAccess().getSpecNoAttrParserRuleCall_2()); 
    }
    this_SpecNoAttr_2=ruleSpecNoAttr
    { 
        $current = $this_SpecNoAttr_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleAccess().getRoleRoleNoAttrParserRuleCall_0()); 
	    }
		lv_role_0_0=ruleRoleNoAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleRule());
	        }
       		set(
       			$current, 
       			"role",
        		lv_role_0_0, 
        		"RoleNoAttr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRoleNoAttr
entryRuleRoleNoAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleNoAttrRule()); }
	 iv_ruleRoleNoAttr=ruleRoleNoAttr 
	 { $current=$iv_ruleRoleNoAttr.current; } 
	 EOF 
;

// Rule RoleNoAttr
ruleRoleNoAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='role' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRoleNoAttrAccess().getRoleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRoleNoAttrAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleNoAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRoleNoAttrAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleNoAttrAccess().getBodyRoleBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleRoleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleNoAttrRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"RoleBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRoleNoAttrAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleRoleBody
entryRuleRoleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleBodyRule()); }
	 iv_ruleRoleBody=ruleRoleBody 
	 { $current=$iv_ruleRoleBody.current; } 
	 EOF 
;

// Rule RoleBody
ruleRoleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRoleBodyAccess().getRoleBodyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleBodyAccess().getElementsRoleBodyElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleRoleBodyElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleBodyRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"RoleBodyElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleRoleBodyElement
entryRuleRoleBodyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleBodyElementRule()); }
	 iv_ruleRoleBodyElement=ruleRoleBodyElement 
	 { $current=$iv_ruleRoleBodyElement.current; } 
	 EOF 
;

// Rule RoleBodyElement
ruleRoleBodyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRoleBodyElementAccess().getVarBlockParserRuleCall_0()); 
    }
    this_VarBlock_0=ruleVarBlock
    { 
        $current = $this_VarBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRoleBodyElementAccess().getRecordBlockParserRuleCall_1()); 
    }
    this_RecordBlock_1=ruleRecordBlock
    { 
        $current = $this_RecordBlock_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRoleBodyElementAccess().getAttributableNoRoleAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleBodyElementAccess().getAttrListAttrListParserRuleCall_2_1_0()); 
	    }
		lv_attrList_3_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleBodyElementRule());
	        }
       		set(
       			$current, 
       			"attrList",
        		lv_attrList_3_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleBodyElementAccess().getElementAttributableNoRoleElementParserRuleCall_2_2_0()); 
	    }
		lv_element_4_0=ruleAttributableNoRoleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleBodyElementRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_4_0, 
        		"AttributableNoRoleElement");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAttributableNoRoleElement
entryRuleAttributableNoRoleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributableNoRoleElementRule()); }
	 iv_ruleAttributableNoRoleElement=ruleAttributableNoRoleElement 
	 { $current=$iv_ruleAttributableNoRoleElement.current; } 
	 EOF 
;

// Rule AttributableNoRoleElement
ruleAttributableNoRoleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributableNoRoleElementAccess().getProcNoAttrParserRuleCall_0()); 
    }
    this_ProcNoAttr_0=ruleProcNoAttr
    { 
        $current = $this_ProcNoAttr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributableNoRoleElementAccess().getSpecNoAttrParserRuleCall_1()); 
    }
    this_SpecNoAttr_1=ruleSpecNoAttr
    { 
        $current = $this_SpecNoAttr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVarBlock
entryRuleVarBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarBlockRule()); }
	 iv_ruleVarBlock=ruleVarBlock 
	 { $current=$iv_ruleVarBlock.current; } 
	 EOF 
;

// Rule VarBlock
ruleVarBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_override_0_0=	'override' 
    {
        newLeafNode(lv_override_0_0, grammarAccess.getVarBlockAccess().getOverrideOverrideKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarBlockRule());
	        }
       		setWithLastConsumed($current, "override", true, "override");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVarBlockAccess().getVarNodeVarInitParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleNodeVarInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarBlockRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"NodeVarInit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarBlockAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleRecordBlock
entryRuleRecordBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordBlockRule()); }
	 iv_ruleRecordBlock=ruleRecordBlock 
	 { $current=$iv_ruleRecordBlock.current; } 
	 EOF 
;

// Rule RecordBlock
ruleRecordBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_override_0_0=	'override' 
    {
        newLeafNode(lv_override_0_0, grammarAccess.getRecordBlockAccess().getOverrideOverrideKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordBlockRule());
	        }
       		setWithLastConsumed($current, "override", true, "override");
	    }

)
)?	otherlv_1='record' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordBlockAccess().getRecordKeyword_1());
    }
(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getRecordBlockAccess().getNameTIDENTIFIERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordBlockAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordBlockAccess().getVarsNodeVarInitParserRuleCall_4_0_0()); 
	    }
		lv_vars_4_0=ruleNodeVarInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordBlockRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_4_0, 
        		"NodeVarInit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRecordBlockAccess().getSemicolonKeyword_4_1());
    }
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordBlockAccess().getRightCurlyBracketKeyword_5());
    }
(	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRecordBlockAccess().getEqualsSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordBlockAccess().getEqualsBodyFnBodyParserRuleCall_6_1_0()); 
	    }
		lv_equalsBody_8_0=ruleFnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordBlockRule());
	        }
       		set(
       			$current, 
       			"equalsBody",
        		lv_equalsBody_8_0, 
        		"FnBody");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='~' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRecordBlockAccess().getTildeKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordBlockAccess().getComplementBodyFnBodyParserRuleCall_7_1_0()); 
	    }
		lv_complementBody_10_0=ruleFnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordBlockRule());
	        }
       		set(
       			$current, 
       			"complementBody",
        		lv_complementBody_10_0, 
        		"FnBody");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNodeVarInit
entryRuleNodeVarInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeVarInitRule()); }
	 iv_ruleNodeVarInit=ruleNodeVarInit 
	 { $current=$iv_ruleNodeVarInit.current; } 
	 EOF 
;

// Rule NodeVarInit
ruleNodeVarInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeVarInitAccess().getScopeNodeVarScopeParserRuleCall_0_0()); 
	    }
		lv_scope_0_0=ruleNodeVarScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeVarInitRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_0_0, 
        		"NodeVarScope");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeVarInitAccess().getVarVarInitParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVarInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeVarInitRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"VarInit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVarInit
entryRuleVarInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarInitRule()); }
	 iv_ruleVarInit=ruleVarInit 
	 { $current=$iv_ruleVarInit.current; } 
	 EOF 
;

// Rule VarInit
ruleVarInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitAccess().getVarAsgnsVarAsgnParserRuleCall_1_0()); 
	    }
		lv_varAsgns_1_0=ruleVarAsgn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitRule());
	        }
       		add(
       			$current, 
       			"varAsgns",
        		lv_varAsgns_1_0, 
        		"VarAsgn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarInitAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitAccess().getVarAsgnsVarAsgnParserRuleCall_2_1_0()); 
	    }
		lv_varAsgns_3_0=ruleVarAsgn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitRule());
	        }
       		add(
       			$current, 
       			"varAsgns",
        		lv_varAsgns_3_0, 
        		"VarAsgn");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVarAsgn
entryRuleVarAsgn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarAsgnRule()); }
	 iv_ruleVarAsgn=ruleVarAsgn 
	 { $current=$iv_ruleVarAsgn.current; } 
	 EOF 
;

// Rule VarAsgn
ruleVarAsgn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_input_0_0=	'input' 
    {
        newLeafNode(lv_input_0_0, grammarAccess.getVarAsgnAccess().getInputInputKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAsgnRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_0_1_0()); 
	    }
		lv_var_1_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarAsgnAccess().getExprVarAsgnAction_1_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_1_1_0_0_0()); 
	    }
		lv_var_3_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_3_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVarAsgnAccess().getEqualsSignKeyword_1_1_0_1());
    }
)
    |((
(
		lv_input_5_0=	'input' 
    {
        newLeafNode(lv_input_5_0, grammarAccess.getVarAsgnAccess().getInputInputKeyword_1_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAsgnRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_1_1_1_1_0()); 
	    }
		lv_var_6_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_6_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='~' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVarAsgnAccess().getTildeKeyword_1_1_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getExprExprParserRuleCall_1_2_0()); 
	    }
		lv_expr_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_8_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarAsgnAccess().getFnVarAsgnAction_2_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_2_1_0_0_0()); 
	    }
		lv_var_10_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_10_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getVarAsgnAccess().getEqualsSignKeyword_2_1_0_1());
    }
)
    |((
(
		lv_input_12_0=	'input' 
    {
        newLeafNode(lv_input_12_0, grammarAccess.getVarAsgnAccess().getInputInputKeyword_2_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAsgnRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getVarVarParserRuleCall_2_1_1_1_0()); 
	    }
		lv_var_13_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_13_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='~' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getVarAsgnAccess().getTildeKeyword_2_1_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAsgnAccess().getFnBodyFnBodyParserRuleCall_2_2_0()); 
	    }
		lv_fnBody_15_0=ruleFnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarAsgnRule());
	        }
       		set(
       			$current, 
       			"fnBody",
        		lv_fnBody_15_0, 
        		"FnBody");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameTIDENTIFIERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TIDENTIFIER");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAccess().getDimensionsDimensionParserRuleCall_1_1_0()); 
	    }
		lv_dimensions_2_0=ruleDimension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_2_0, 
        		"Dimension");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleDimension
entryRuleDimension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDimensionRule()); }
	 iv_ruleDimension=ruleDimension 
	 { $current=$iv_ruleDimension.current; } 
	 EOF 
;

// Rule Dimension
ruleDimension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimensionAccess().getIntDimensionAction_0_0(),
            $current);
    }
)(
(
		lv_index_1_0=RULE_INT
		{
			newLeafNode(lv_index_1_0, grammarAccess.getDimensionAccess().getIndexINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDimensionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimensionAccess().getNodeNumDimensionAction_1_0(),
            $current);
    }
)	otherlv_3='#N' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDimensionAccess().getNKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimensionAccess().getIdDimensionAction_2_0(),
            $current);
    }
)(
(
		lv_index_5_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_index_5_0, grammarAccess.getDimensionAccess().getIndexTIDENTIFIERTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDimensionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_5_0, 
        		"TIDENTIFIER");
	    }

)
)))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getSignedSignedParserRuleCall_0_0()); 
	    }
		lv_signed_0_0=ruleSigned		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"signed",
        		lv_signed_0_0, 
        		"Signed");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getSimpTypeSimpTypeParserRuleCall_1_0()); 
	    }
		lv_simpType_1_0=ruleSimpType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"simpType",
        		lv_simpType_1_0, 
        		"SimpType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getAttrListAttrListParserRuleCall_0_0()); 
	    }
		lv_attrList_0_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"attrList",
        		lv_attrList_0_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getProcProcNoAttrParserRuleCall_1_0()); 
	    }
		lv_proc_1_0=ruleProcNoAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"proc",
        		lv_proc_1_0, 
        		"ProcNoAttr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcNoAttr
entryRuleProcNoAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcNoAttrRule()); }
	 iv_ruleProcNoAttr=ruleProcNoAttr 
	 { $current=$iv_ruleProcNoAttr.current; } 
	 EOF 
;

// Rule ProcNoAttr
ruleProcNoAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_override_0_0=	'override' 
    {
        newLeafNode(lv_override_0_0, grammarAccess.getProcNoAttrAccess().getOverrideOverrideKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcNoAttrRule());
	        }
       		setWithLastConsumed($current, "override", true, "override");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcNoAttrAccess().getPrototypeFnPrototypeParserRuleCall_1_0()); 
	    }
		lv_prototype_1_0=ruleFnPrototype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcNoAttrRule());
	        }
       		set(
       			$current, 
       			"prototype",
        		lv_prototype_1_0, 
        		"FnPrototype");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcNoAttrAccess().getSemicolonKeyword_2_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProcNoAttrAccess().getFnBodyFnBodyParserRuleCall_2_1_0()); 
	    }
		lv_fnBody_3_0=ruleFnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcNoAttrRule());
	        }
       		set(
       			$current, 
       			"fnBody",
        		lv_fnBody_3_0, 
        		"FnBody");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFnBody
entryRuleFnBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFnBodyRule()); }
	 iv_ruleFnBody=ruleFnBody 
	 { $current=$iv_ruleFnBody.current; } 
	 EOF 
;

// Rule FnBody
ruleFnBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFnBodyAccess().getFnBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFnBodyAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFnBodyAccess().getVarInitsVarInitParserRuleCall_2_0_0()); 
	    }
		lv_varInits_2_0=ruleVarInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnBodyRule());
	        }
       		add(
       			$current, 
       			"varInits",
        		lv_varInits_2_0, 
        		"VarInit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFnBodyAccess().getSemicolonKeyword_2_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFnBodyAccess().getStmtsStmtParserRuleCall_3_0()); 
	    }
		lv_stmts_4_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnBodyRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_4_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFnBodyAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFnPrototype
entryRuleFnPrototype returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFnPrototypeRule()); }
	 iv_ruleFnPrototype=ruleFnPrototype 
	 { $current=$iv_ruleFnPrototype.current; } 
	 EOF 
;

// Rule FnPrototype
ruleFnPrototype returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFnPrototypeAccess().getThreadDeclarationAction_0_0(),
            $current);
    }
)(
(
(
		lv_extern_1_1=	'extern' 
    {
        newLeafNode(lv_extern_1_1, grammarAccess.getFnPrototypeAccess().getExternExternKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

    |		lv_extern_1_2=	'EXTERN' 
    {
        newLeafNode(lv_extern_1_2, grammarAccess.getFnPrototypeAccess().getExternEXTERNKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

)

)
)?(
(
(
		lv_pure_2_1=	'pure' 
    {
        newLeafNode(lv_pure_2_1, grammarAccess.getFnPrototypeAccess().getPurePureKeyword_0_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

    |		lv_pure_2_2=	'PURE' 
    {
        newLeafNode(lv_pure_2_2, grammarAccess.getFnPrototypeAccess().getPurePUREKeyword_0_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

)

)
)?	otherlv_3='thread' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFnPrototypeAccess().getThreadKeyword_0_3());
    }
(
(
		lv_name_4_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFnPrototypeAccess().getNameTIDENTIFIERTerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"TIDENTIFIER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFnPrototypeAccess().getFnPrototypeDeclarationAction_1_0(),
            $current);
    }
)(
(
(
		lv_extern_6_1=	'extern' 
    {
        newLeafNode(lv_extern_6_1, grammarAccess.getFnPrototypeAccess().getExternExternKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

    |		lv_extern_6_2=	'EXTERN' 
    {
        newLeafNode(lv_extern_6_2, grammarAccess.getFnPrototypeAccess().getExternEXTERNKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "extern", true, null);
	    }

)

)
)?(
(
(
		lv_pure_7_1=	'pure' 
    {
        newLeafNode(lv_pure_7_1, grammarAccess.getFnPrototypeAccess().getPurePureKeyword_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

    |		lv_pure_7_2=	'PURE' 
    {
        newLeafNode(lv_pure_7_2, grammarAccess.getFnPrototypeAccess().getPurePUREKeyword_1_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed($current, "pure", true, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFnPrototypeAccess().getTypeTypeParserRuleCall_1_3_0()); 
	    }
		lv_type_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnPrototypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_9_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_9_0, grammarAccess.getFnPrototypeAccess().getNameTIDENTIFIERTerminalRuleCall_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnPrototypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFnPrototypeAccess().getLeftParenthesisKeyword_1_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFnPrototypeAccess().getParamsParamParserRuleCall_1_6_0_0()); 
	    }
		lv_params_11_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnPrototypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_11_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFnPrototypeAccess().getCommaKeyword_1_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnPrototypeAccess().getParamsParamParserRuleCall_1_6_1_1_0()); 
	    }
		lv_params_13_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnPrototypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_13_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFnPrototypeAccess().getRightParenthesisKeyword_1_7());
    }
))
;





// Entry rule entryRuleAttrList
entryRuleAttrList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrListRule()); }
	 iv_ruleAttrList=ruleAttrList 
	 { $current=$iv_ruleAttrList.current; } 
	 EOF 
;

// Rule AttrList
ruleAttrList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrListAccess().getAttrsAttrParserRuleCall_0_0()); 
	    }
		lv_attrs_0_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrListRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_0_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrListAccess().getSemicolonKeyword_1());
    }
)+
;





// Entry rule entryRuleAttr
entryRuleAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrRule()); }
	 iv_ruleAttr=ruleAttr 
	 { $current=$iv_ruleAttr.current; } 
	 EOF 
;

// Rule Attr
ruleAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttrAccess().getCommercialAtKeyword_0());
    }
(
(
		lv_name_1_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAttrAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"TIDENTIFIER");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttrAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getParamsExprParserRuleCall_2_1_0()); 
	    }
		lv_params_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttrAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getParamsExprParserRuleCall_2_2_1_0()); 
	    }
		lv_params_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttrAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getVarVarParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_ruleStmt=ruleStmt 
	 { $current=$iv_ruleStmt.current; } 
	 EOF 
;

// Rule Stmt
ruleStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getNestedStmtAction_0_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStmtAccess().getLeftCurlyBracketKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getStmtsStmtParserRuleCall_0_2_0()); 
	    }
		lv_stmts_2_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_2_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStmtAccess().getRightCurlyBracketKeyword_0_3());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getAssignmentStmtParserRuleCall_1_0()); 
    }
    this_AssignmentStmt_4=ruleAssignmentStmt
    { 
        $current = $this_AssignmentStmt_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStmtAccess().getSemicolonKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getWhileStmtAction_2_0(),
            $current);
    }
)	otherlv_7='while' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStmtAccess().getWhileKeyword_2_1());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStmtAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getConditionExprParserRuleCall_2_3_0()); 
	    }
		lv_condition_9_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_9_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStmtAccess().getRightParenthesisKeyword_2_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getStmtStmtParserRuleCall_2_5_0()); 
	    }
		lv_stmt_11_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_11_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getForStmtAction_3_0(),
            $current);
    }
)	otherlv_13='for' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStmtAccess().getForKeyword_3_1());
    }
	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStmtAccess().getLeftParenthesisKeyword_3_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getInitsAssignmentStmtParserRuleCall_3_3_0_0()); 
	    }
		lv_inits_15_0=ruleAssignmentStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		add(
       			$current, 
       			"inits",
        		lv_inits_15_0, 
        		"AssignmentStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStmtAccess().getCommaKeyword_3_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getInitsAssignmentStmtParserRuleCall_3_3_1_1_0()); 
	    }
		lv_inits_17_0=ruleAssignmentStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		add(
       			$current, 
       			"inits",
        		lv_inits_17_0, 
        		"AssignmentStmt");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_18=';' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStmtAccess().getSemicolonKeyword_3_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getConditionExprParserRuleCall_3_5_0()); 
	    }
		lv_condition_19_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_19_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getStmtAccess().getSemicolonKeyword_3_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getUpdateAssignmentStmtParserRuleCall_3_7_0()); 
	    }
		lv_update_21_0=ruleAssignmentStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_21_0, 
        		"AssignmentStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getStmtAccess().getRightParenthesisKeyword_3_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getStmtStmtParserRuleCall_3_9_0()); 
	    }
		lv_stmt_23_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_23_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getCondStmtAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getAttrListAttrListParserRuleCall_4_1_0()); 
	    }
		lv_attrList_25_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"attrList",
        		lv_attrList_25_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_26='if' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getStmtAccess().getIfKeyword_4_2());
    }
	otherlv_27='(' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getStmtAccess().getLeftParenthesisKeyword_4_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getConditionExprParserRuleCall_4_4_0()); 
	    }
		lv_condition_28_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_28_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_29=')' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getStmtAccess().getRightParenthesisKeyword_4_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getThenStmtParserRuleCall_4_6_0()); 
	    }
		lv_then_30_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_30_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_31='else' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getStmtAccess().getElseKeyword_4_7_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getElseStmtParserRuleCall_4_7_1_0()); 
	    }
		lv_else_32_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_32_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getSimpleStmtAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getNameSimpleStmtKeywordParserRuleCall_5_1_0()); 
	    }
		lv_name_34_0=ruleSimpleStmtKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_34_0, 
        		"SimpleStmtKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_35=';' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getStmtAccess().getSemicolonKeyword_5_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getReturnValueStmtAction_6_0(),
            $current);
    }
)	otherlv_37='return' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getStmtAccess().getReturnKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getValueExprParserRuleCall_6_2_0()); 
	    }
		lv_value_38_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_38_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_39=';' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getStmtAccess().getSemicolonKeyword_6_3());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getCallExprParserRuleCall_7_0()); 
    }
    this_CallExpr_40=ruleCallExpr
    { 
        $current = $this_CallExpr_40.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_41=';' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getStmtAccess().getSemicolonKeyword_7_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getForAllStmtAction_8_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getNameForAllFunctionParserRuleCall_8_1_0()); 
	    }
		lv_name_43_0=ruleForAllFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_43_0, 
        		"ForAllFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_44='(' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getStmtAccess().getLeftParenthesisKeyword_8_2());
    }
(
(
		lv_node_45_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_node_45_0, grammarAccess.getStmtAccess().getNodeTIDENTIFIERTerminalRuleCall_8_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"node",
        		lv_node_45_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_46=')' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getStmtAccess().getRightParenthesisKeyword_8_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getStmtStmtParserRuleCall_8_5_0()); 
	    }
		lv_stmt_47_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_47_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtAccess().getFadnpStmtAction_9_0(),
            $current);
    }
)(	otherlv_49='forall_distinct_node_pair' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getStmtAccess().getForall_distinct_node_pairKeyword_9_1_0());
    }

    |	otherlv_50='FORALL_DISTINCT_NODE_PAIR' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getStmtAccess().getFORALL_DISTINCT_NODE_PAIRKeyword_9_1_1());
    }
)	otherlv_51='(' 
    {
    	newLeafNode(otherlv_51, grammarAccess.getStmtAccess().getLeftParenthesisKeyword_9_2());
    }
(
(
		lv_node1_52_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_node1_52_0, grammarAccess.getStmtAccess().getNode1TIDENTIFIERTerminalRuleCall_9_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"node1",
        		lv_node1_52_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_53=',' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getStmtAccess().getCommaKeyword_9_4());
    }
(
(
		lv_node2_54_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_node2_54_0, grammarAccess.getStmtAccess().getNode2TIDENTIFIERTerminalRuleCall_9_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"node2",
        		lv_node2_54_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_55=')' 
    {
    	newLeafNode(otherlv_55, grammarAccess.getStmtAccess().getRightParenthesisKeyword_9_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getStmtStmtParserRuleCall_9_7_0()); 
	    }
		lv_stmt_56_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_56_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAssignmentStmt
entryRuleAssignmentStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentStmtRule()); }
	 iv_ruleAssignmentStmt=ruleAssignmentStmt 
	 { $current=$iv_ruleAssignmentStmt.current; } 
	 EOF 
;

// Rule AssignmentStmt
ruleAssignmentStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStmtAccess().getVariableLValParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleLVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStmtRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"LVal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentStmtAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStmtAccess().getValueExprParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStmtRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLVal
entryRuleLVal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLValRule()); }
	 iv_ruleLVal=ruleLVal 
	 { $current=$iv_ruleLVal.current; } 
	 EOF 
;

// Rule LVal
ruleLVal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLValAccess().getNameTIDENTIFIERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TIDENTIFIER");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLValAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLValAccess().getIndicesExprParserRuleCall_1_1_0()); 
	    }
		lv_indices_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLValRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLValAccess().getRightSquareBracketKeyword_1_2());
    }
)*(	otherlv_4='@' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLValAccess().getCommercialAtKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLValAccess().getAtExprParserRuleCall_2_1_0()); 
	    }
		lv_at_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLValRule());
	        }
       		set(
       			$current, 
       			"at",
        		lv_at_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'?' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprAccess().getTernaryExprConditionAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprAccess().getQuestionMarkKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getThenExprParserRuleCall_1_1_0()); 
	    }
		lv_then_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExprAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getElseExprParserRuleCall_1_3_0()); 
	    }
		lv_else_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'||' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExprAccess().getVerticalLineVerticalLineKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getBitwiseOrExprParserRuleCall_0()); 
    }
    this_BitwiseOrExpr_0=ruleBitwiseOrExpr
    { 
        $current = $this_BitwiseOrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'&&' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExprAccess().getAmpersandAmpersandKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightBitwiseOrExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBitwiseOrExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitwiseOrExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseOrExpr
entryRuleBitwiseOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOrExprRule()); }
	 iv_ruleBitwiseOrExpr=ruleBitwiseOrExpr 
	 { $current=$iv_ruleBitwiseOrExpr.current; } 
	 EOF 
;

// Rule BitwiseOrExpr
ruleBitwiseOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseOrExprAccess().getXorExprParserRuleCall_0()); 
    }
    this_XorExpr_0=ruleXorExpr
    { 
        $current = $this_XorExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'|' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseOrExprAccess().getBitwiseOrExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseOrExprAccess().getVerticalLineKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExprAccess().getRightXorExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleXorExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"XorExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXorExpr
entryRuleXorExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorExprRule()); }
	 iv_ruleXorExpr=ruleXorExpr 
	 { $current=$iv_ruleXorExpr.current; } 
	 EOF 
;

// Rule XorExpr
ruleXorExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXorExprAccess().getBitwiseAndExprParserRuleCall_0()); 
    }
    this_BitwiseAndExpr_0=ruleBitwiseAndExpr
    { 
        $current = $this_BitwiseAndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'^' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXorExprAccess().getXorExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXorExprAccess().getCircumflexAccentKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXorExprAccess().getRightBitwiseAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBitwiseAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitwiseAndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseAndExpr
entryRuleBitwiseAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseAndExprRule()); }
	 iv_ruleBitwiseAndExpr=ruleBitwiseAndExpr 
	 { $current=$iv_ruleBitwiseAndExpr.current; } 
	 EOF 
;

// Rule BitwiseAndExpr
ruleBitwiseAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseAndExprAccess().getEqualityExprParserRuleCall_0()); 
    }
    this_EqualityExpr_0=ruleEqualityExpr
    { 
        $current = $this_EqualityExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'&' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseAndExprAccess().getBitwiseAndExprLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseAndExprAccess().getAmpersandKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExprAccess().getRightEqualityExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleEqualityExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EqualityExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpr
entryRuleEqualityExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExprRule()); }
	 iv_ruleEqualityExpr=ruleEqualityExpr 
	 { $current=$iv_ruleEqualityExpr.current; } 
	 EOF 
;

// Rule EqualityExpr
ruleEqualityExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExprAccess().getCompareExprParserRuleCall_0()); 
    }
    this_CompareExpr_0=ruleCompareExpr
    { 
        $current = $this_CompareExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleEqualityOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExprAccess().getEqualityExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExprAccess().getOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExprAccess().getRightCompareExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleCompareExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"CompareExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareExpr
entryRuleCompareExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExprRule()); }
	 iv_ruleCompareExpr=ruleCompareExpr 
	 { $current=$iv_ruleCompareExpr.current; } 
	 EOF 
;

// Rule CompareExpr
ruleCompareExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExprAccess().getShiftExprParserRuleCall_0()); 
    }
    this_ShiftExpr_0=ruleShiftExpr
    { 
        $current = $this_ShiftExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleCompareOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExprAccess().getCompareExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExprAccess().getOperatorCompareOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExprAccess().getRightShiftExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleShiftExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ShiftExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleShiftExpr
entryRuleShiftExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExprRule()); }
	 iv_ruleShiftExpr=ruleShiftExpr 
	 { $current=$iv_ruleShiftExpr.current; } 
	 EOF 
;

// Rule ShiftExpr
ruleShiftExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getShiftExprAccess().getAdditiveExprParserRuleCall_0()); 
    }
    this_AdditiveExpr_0=ruleAdditiveExpr
    { 
        $current = $this_AdditiveExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleShiftOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExprAccess().getShiftExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExprAccess().getOperatorShiftOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExprAccess().getRightAdditiveExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExprRule()); }
	 iv_ruleAdditiveExpr=ruleAdditiveExpr 
	 { $current=$iv_ruleAdditiveExpr.current; } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExprAccess().getMultiplicativeExprParserRuleCall_0()); 
    }
    this_MultiplicativeExpr_0=ruleMultiplicativeExpr
    { 
        $current = $this_MultiplicativeExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleAdditiveOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExprAccess().getAdditiveExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getRightMultiplicativeExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExprRule()); }
	 iv_ruleMultiplicativeExpr=ruleMultiplicativeExpr 
	 { $current=$iv_ruleMultiplicativeExpr.current; } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getTerminalExprParserRuleCall_0()); 
    }
    this_TerminalExpr_0=ruleTerminalExpr
    { 
        $current = $this_TerminalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleMultiplicativeOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExprAccess().getMultiplicativeExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getRightTerminalExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleTerminalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TerminalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerminalExpr
entryRuleTerminalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExprRule()); }
	 iv_ruleTerminalExpr=ruleTerminalExpr 
	 { $current=$iv_ruleTerminalExpr.current; } 
	 EOF 
;

// Rule TerminalExpr
ruleTerminalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getLValParserRuleCall_0()); 
    }
    this_LVal_0=ruleLVal
    { 
        $current = $this_LVal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIdExprAction_1_0(),
            $current);
    }
)	otherlv_2='id' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalExprAccess().getIdKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIntExprAction_2_0(),
            $current);
    }
)(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getTerminalExprAccess().getValueINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getDoubleExprAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getValueDoubleParserRuleCall_3_1_0()); 
	    }
		lv_value_6_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getNodeNumExprAction_4_0(),
            $current);
    }
)	otherlv_8='#N' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTerminalExprAccess().getNKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getUnaryExprAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getOperatorUnaryOperatorEnumRuleCall_5_1_0()); 
	    }
		lv_operator_10_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_10_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getOperandExprParserRuleCall_5_2_0()); 
	    }
		lv_operand_11_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_11_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getBuiltInExprAction_6_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getFunctionBuiltInFunctionParserRuleCall_6_1_0()); 
	    }
		lv_function_13_0=ruleBuiltInFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_13_0, 
        		"BuiltInFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_6_2());
    }
(
(
		lv_firstArg_15_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_firstArg_15_0, grammarAccess.getTerminalExprAccess().getFirstArgTIDENTIFIERTerminalRuleCall_6_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"firstArg",
        		lv_firstArg_15_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTerminalExprAccess().getCommaKeyword_6_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getSecondArgExprParserRuleCall_6_5_0()); 
	    }
		lv_secondArg_17_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"secondArg",
        		lv_secondArg_17_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_6_6());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getCallExprParserRuleCall_7()); 
    }
    this_CallExpr_19=ruleCallExpr
    { 
        $current = $this_CallExpr_19.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_20='(' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_8_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getExprParserRuleCall_8_1()); 
    }
    this_Expr_21=ruleExpr
    { 
        $current = $this_Expr_21.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_8_2());
    }
))
;





// Entry rule entryRuleCallExpr
entryRuleCallExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallExprRule()); }
	 iv_ruleCallExpr=ruleCallExpr 
	 { $current=$iv_ruleCallExpr.current; } 
	 EOF 
;

// Rule CallExpr
ruleCallExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_namespace_0_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_namespace_0_0, grammarAccess.getCallExprAccess().getNamespaceTIDENTIFIERTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_0_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallExprAccess().getColonColonKeyword_0_1());
    }
)?(
(
		lv_name_2_0=RULE_TIDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCallExprAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TIDENTIFIER");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallExprAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallExprAccess().getArgsExprParserRuleCall_3_0_0()); 
	    }
		lv_args_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallExprAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallExprAccess().getArgsExprParserRuleCall_3_1_1_0()); 
	    }
		lv_args_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCallExprAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_8='@' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCallExprAccess().getCommercialAtKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallExprAccess().getAtExprParserRuleCall_5_1_0()); 
	    }
		lv_at_9_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallExprRule());
	        }
       		set(
       			$current, 
       			"at",
        		lv_at_9_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSign
entryRuleSign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_ruleSign=ruleSign 
	 { $current=$iv_ruleSign.current.getText(); }  
	 EOF 
;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSimpType
entryRuleSimpType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpTypeRule()); } 
	 iv_ruleSimpType=ruleSimpType 
	 { $current=$iv_ruleSimpType.current.getText(); }  
	 EOF 
;

// Rule SimpType
ruleSimpType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getBoolKeyword_0()); 
    }

    |
	kw='_Bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().get_BoolKeyword_1()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getIntKeyword_2()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getDoubleKeyword_3()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getVoidKeyword_4()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpTypeAccess().getCharKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleSigned
entryRuleSigned returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedRule()); } 
	 iv_ruleSigned=ruleSigned 
	 { $current=$iv_ruleSigned.current.getText(); }  
	 EOF 
;

// Rule Signed
ruleSigned returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='signed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedAccess().getSignedKeyword_0()); 
    }

    |
	kw='unsigned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedAccess().getUnsignedKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSimpleStmtKeyword
entryRuleSimpleStmtKeyword returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleStmtKeywordRule()); } 
	 iv_ruleSimpleStmtKeyword=ruleSimpleStmtKeyword 
	 { $current=$iv_ruleSimpleStmtKeyword.current.getText(); }  
	 EOF 
;

// Rule SimpleStmtKeyword
ruleSimpleStmtKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleStmtKeywordAccess().getBreakKeyword_0()); 
    }

    |
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleStmtKeywordAccess().getContinueKeyword_1()); 
    }

    |
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleStmtKeywordAccess().getReturnKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleForAllFunction
entryRuleForAllFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllFunctionRule()); } 
	 iv_ruleForAllFunction=ruleForAllFunction 
	 { $current=$iv_ruleForAllFunction.current.getText(); }  
	 EOF 
;

// Rule ForAllFunction
ruleForAllFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='forall_node' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getForall_nodeKeyword_0()); 
    }

    |
	kw='FORALL_NODE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getFORALL_NODEKeyword_1()); 
    }

    |
	kw='forall_other' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getForall_otherKeyword_2()); 
    }

    |
	kw='FORALL_OTHER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getFORALL_OTHERKeyword_3()); 
    }

    |
	kw='forall_other_lower' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getForall_other_lowerKeyword_4()); 
    }

    |
	kw='FORALL_OTHER_LOWER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getFORALL_OTHER_LOWERKeyword_5()); 
    }

    |
	kw='forall_other_higher' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getForall_other_higherKeyword_6()); 
    }

    |
	kw='FORALL_OTHER_HIGHER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForAllFunctionAccess().getFORALL_OTHER_HIGHERKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleNodeVarScope
entryRuleNodeVarScope returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeVarScopeRule()); } 
	 iv_ruleNodeVarScope=ruleNodeVarScope 
	 { $current=$iv_ruleNodeVarScope.current.getText(); }  
	 EOF 
;

// Rule NodeVarScope
ruleNodeVarScope returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='global' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeVarScopeAccess().getGlobalKeyword_0()); 
    }

    |
	kw='GLOBAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeVarScopeAccess().getGLOBALKeyword_1()); 
    }

    |
	kw='local' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeVarScopeAccess().getLocalKeyword_2()); 
    }

    |
	kw='LOCAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeVarScopeAccess().getLOCALKeyword_3()); 
    }

    |
	kw='group' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeVarScopeAccess().getGroupKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleBuiltInFunction
entryRuleBuiltInFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInFunctionRule()); } 
	 iv_ruleBuiltInFunction=ruleBuiltInFunction 
	 { $current=$iv_ruleBuiltInFunction.current.getText(); }  
	 EOF 
;

// Rule BuiltInFunction
ruleBuiltInFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='exists_other' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getExists_otherKeyword_0()); 
    }

    |
	kw='EXISTS_OTHER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getEXISTS_OTHERKeyword_1()); 
    }

    |
	kw='exists_higher' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getExists_higherKeyword_2()); 
    }

    |
	kw='EXISTS_HIGHER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getEXISTS_HIGHERKeyword_3()); 
    }

    |
	kw='exists_lower' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getExists_lowerKeyword_4()); 
    }

    |
	kw='EXISTS_LOWER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getEXISTS_LOWERKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='NAN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getNANKeyword_0()); 
    }

    |(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1_1()); 
    }
(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2()); 
    }
)?))
    ;

















// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLESS_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLESS_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGREATEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getGREATEREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGREATER_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGREATER_EQUALEnumLiteralDeclaration_3()); 
    }
));



// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<<' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getLEFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getShiftOperatorAccess().getLEFTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>>' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getRIGHTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getShiftOperatorAccess().getRIGHTEnumLiteralDeclaration_1()); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMULTIPLYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMULTIPLYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDIVIDEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMODULUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getMODULUSEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='!' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='~' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_3()); 
    }
));





RULE_TIDENTIFIER : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


