/*
 * generated by Xtext
 */
grammar InternalDmpl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.cmu.sei.annex.dmpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.cmu.sei.annex.dmpl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.cmu.sei.annex.dmpl.services.DmplGrammarAccess;

}

@parser::members {

 	private DmplGrammarAccess grammarAccess;
 	
    public InternalDmplParser(TokenStream input, DmplGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AnnexSubclause";	
   	}
   	
   	@Override
   	protected DmplGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAnnexSubclause
entryRuleAnnexSubclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnexSubclauseRule()); }
	 iv_ruleAnnexSubclause=ruleAnnexSubclause 
	 { $current=$iv_ruleAnnexSubclause.current; } 
	 EOF 
;

// Rule AnnexSubclause
ruleAnnexSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAnnexSubclauseAccess().getDmplSubclauseParserRuleCall()); 
    }
    this_DmplSubclause_0=ruleDmplSubclause
    { 
        $current = $this_DmplSubclause_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDmplSubclause
entryRuleDmplSubclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDmplSubclauseRule()); }
	 iv_ruleDmplSubclause=ruleDmplSubclause 
	 { $current=$iv_ruleDmplSubclause.current; } 
	 EOF 
;

// Rule DmplSubclause
ruleDmplSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDmplSubclauseAccess().getDmplSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDmplSubclauseAccess().getFunctionCallsFunctionCallParserRuleCall_1_0()); 
	    }
		lv_functionCalls_1_0=ruleFunctionCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDmplSubclauseRule());
	        }
       		add(
       			$current, 
       			"functionCalls",
        		lv_functionCalls_1_0, 
        		"FunctionCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_functionName_0_0=RULE_ID
		{
			newLeafNode(lv_functionName_0_0, grammarAccess.getFunctionCallAccess().getFunctionNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"functionName",
        		lv_functionName_0_0, 
        		"ID");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


