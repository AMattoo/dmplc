/*
 * generated by Xtext
 */
package edu.cmu.sei.annex.dmpl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DmplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProgramElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramElementsProgramElementParserRuleCall_1_0 = (RuleCall)cProgramElementsAssignment_1.eContents().get(0);
		
		//Program:
		//	{Program} programElements+=ProgramElement*;
		@Override public ParserRule getRule() { return rule; }

		//{Program} programElements+=ProgramElement*
		public Group getGroup() { return cGroup; }

		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }

		//programElements+=ProgramElement*
		public Assignment getProgramElementsAssignment_1() { return cProgramElementsAssignment_1; }

		//ProgramElement
		public RuleCall getProgramElementsProgramElementParserRuleCall_1_0() { return cProgramElementsProgramElementParserRuleCall_1_0; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cDmplSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	DmplSubclause;
		@Override public ParserRule getRule() { return rule; }

		//DmplSubclause
		public RuleCall getDmplSubclauseParserRuleCall() { return cDmplSubclauseParserRuleCall; }
	}

	public class DmplSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DmplSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmplSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProgramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_1_0 = (RuleCall)cProgramAssignment_1.eContents().get(0);
		
		//DmplSubclause:
		//	{DmplSubclause} program=Program;
		@Override public ParserRule getRule() { return rule; }

		//{DmplSubclause} program=Program
		public Group getGroup() { return cGroup; }

		//{DmplSubclause}
		public Action getDmplSubclauseAction_0() { return cDmplSubclauseAction_0; }

		//program=Program
		public Assignment getProgramAssignment_1() { return cProgramAssignment_1; }

		//Program
		public RuleCall getProgramProgramParserRuleCall_1_0() { return cProgramProgramParserRuleCall_1_0; }
	}

	public class ProgramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProgramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgramElement: //TODO: target, node
		//	Constant | Procedure;
		@Override public ParserRule getRule() { return rule; }

		////TODO: target, node
		//Constant | Procedure
		public Alternatives getAlternatives() { return cAlternatives; }

		////TODO: target, node
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_1() { return cProcedureParserRuleCall_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCONSTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueNumberConstParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//	("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";";
		@Override public ParserRule getRule() { return rule; }

		//("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";"
		public Group getGroup() { return cGroup; }

		//"const" | "CONST"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"const"
		public Keyword getConstKeyword_0_0() { return cConstKeyword_0_0; }

		//"CONST"
		public Keyword getCONSTKeyword_0_1() { return cCONSTKeyword_0_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_0() { return cNameTIDENTIFIERTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=NumberConst
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//NumberConst
		public RuleCall getValueNumberConstParserRuleCall_3_0() { return cValueNumberConstParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NumberConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberConst:
		//	IntConst | DoubleConst;
		@Override public ParserRule getRule() { return rule; }

		//IntConst | DoubleConst
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntConst
		public RuleCall getIntConstParserRuleCall_0() { return cIntConstParserRuleCall_0; }

		//DoubleConst
		public RuleCall getDoubleConstParserRuleCall_1() { return cDoubleConstParserRuleCall_1; }
	}

	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntConst:
		//	sign=Sign? value=INT;
		@Override public ParserRule getRule() { return rule; }

		//sign=Sign? value=INT
		public Group getGroup() { return cGroup; }

		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class DoubleConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DoubleConst:
		//	sign=Sign? value=Double;
		@Override public ParserRule getRule() { return rule; }

		//sign=Sign? value=Double
		public Group getGroup() { return cGroup; }

		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }

		//value=Double
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_1_0() { return cValueDoubleParserRuleCall_1_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Assignment cProcedureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProcedureProcNoAttrParserRuleCall_0 = (RuleCall)cProcedureAssignment.eContents().get(0);
		
		//Procedure: //TODO: OVERRIDE and attr_list
		//	procedure=ProcNoAttr;
		@Override public ParserRule getRule() { return rule; }

		////TODO: OVERRIDE and attr_list
		//procedure=ProcNoAttr
		public Assignment getProcedureAssignment() { return cProcedureAssignment; }

		//ProcNoAttr
		public RuleCall getProcedureProcNoAttrParserRuleCall_0() { return cProcedureProcNoAttrParserRuleCall_0; }
	}

	public class ProcNoAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcNoAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrototypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrototypeFnPrototypeParserRuleCall_0_0 = (RuleCall)cPrototypeAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ProcNoAttr: //TODO: fn_body
		//	prototype=FnPrototype ";";
		@Override public ParserRule getRule() { return rule; }

		////TODO: fn_body
		//prototype=FnPrototype ";"
		public Group getGroup() { return cGroup; }

		////TODO: fn_body
		//prototype=FnPrototype
		public Assignment getPrototypeAssignment_0() { return cPrototypeAssignment_0; }

		//FnPrototype
		public RuleCall getPrototypeFnPrototypeParserRuleCall_0_0() { return cPrototypeFnPrototypeParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class FnPrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnPrototype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cExternAlternatives_0_0 = (Alternatives)cExternAssignment_0.eContents().get(0);
		private final Keyword cExternExternKeyword_0_0_0 = (Keyword)cExternAlternatives_0_0.eContents().get(0);
		private final Keyword cExternEXTERNKeyword_0_0_1 = (Keyword)cExternAlternatives_0_0.eContents().get(1);
		private final Assignment cPureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPureAlternatives_1_0 = (Alternatives)cPureAssignment_1.eContents().get(0);
		private final Keyword cPurePureKeyword_1_0_0 = (Keyword)cPureAlternatives_1_0.eContents().get(0);
		private final Keyword cPurePUREKeyword_1_0_1 = (Keyword)cPureAlternatives_1_0.eContents().get(1);
		private final Assignment cPrototypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrototypeFnPrototypeNoDecorsParserRuleCall_2_0 = (RuleCall)cPrototypeAssignment_2.eContents().get(0);
		
		//FnPrototype:
		//	extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? prototype=FnPrototypeNoDecors;
		@Override public ParserRule getRule() { return rule; }

		//extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? prototype=FnPrototypeNoDecors
		public Group getGroup() { return cGroup; }

		//extern?=("extern" | "EXTERN")?
		public Assignment getExternAssignment_0() { return cExternAssignment_0; }

		//"extern" | "EXTERN"
		public Alternatives getExternAlternatives_0_0() { return cExternAlternatives_0_0; }

		//"extern"
		public Keyword getExternExternKeyword_0_0_0() { return cExternExternKeyword_0_0_0; }

		//"EXTERN"
		public Keyword getExternEXTERNKeyword_0_0_1() { return cExternEXTERNKeyword_0_0_1; }

		//pure?=("pure" | "PURE")?
		public Assignment getPureAssignment_1() { return cPureAssignment_1; }

		//"pure" | "PURE"
		public Alternatives getPureAlternatives_1_0() { return cPureAlternatives_1_0; }

		//"pure"
		public Keyword getPurePureKeyword_1_0_0() { return cPurePureKeyword_1_0_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_1_0_1() { return cPurePUREKeyword_1_0_1; }

		//prototype=FnPrototypeNoDecors
		public Assignment getPrototypeAssignment_2() { return cPrototypeAssignment_2; }

		//FnPrototypeNoDecors
		public RuleCall getPrototypeFnPrototypeNoDecorsParserRuleCall_2_0() { return cPrototypeFnPrototypeNoDecorsParserRuleCall_2_0; }
	}

	public class FnPrototypeNoDecorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnPrototypeNoDecors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThreadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FnPrototypeNoDecors: //TODO: fn_type ID ( param_list )
		//	"thread" name=TIDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		////TODO: fn_type ID ( param_list )
		//"thread" name=TIDENTIFIER
		public Group getGroup() { return cGroup; }

		////TODO: fn_type ID ( param_list )
		//"thread"
		public Keyword getThreadKeyword_0() { return cThreadKeyword_0; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_0() { return cNameTIDENTIFIERTerminalRuleCall_1_0; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNANKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//	"NAN" | INT "." INT?;
		@Override public ParserRule getRule() { return rule; }

		//"NAN" | INT "." INT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NAN"
		public Keyword getNANKeyword_0() { return cNANKeyword_0; }

		//INT "." INT?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	
	
	public class SignEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SignEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnsetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnsetUnsetKeyword_0_0 = (Keyword)cUnsetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SignEnum:
		//	unset | PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//unset | PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//unset
		public EnumLiteralDeclaration getUnsetEnumLiteralDeclaration_0() { return cUnsetEnumLiteralDeclaration_0; }

		//"unset"
		public Keyword getUnsetUnsetKeyword_0_0() { return cUnsetUnsetKeyword_0_0; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
	}

	public class SignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Sign returns SignEnum:
		//	PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final DmplSubclauseElements pDmplSubclause;
	private final ProgramElementElements pProgramElement;
	private final ConstantElements pConstant;
	private final NumberConstElements pNumberConst;
	private final IntConstElements pIntConst;
	private final DoubleConstElements pDoubleConst;
	private final ProcedureElements pProcedure;
	private final ProcNoAttrElements pProcNoAttr;
	private final FnPrototypeElements pFnPrototype;
	private final FnPrototypeNoDecorsElements pFnPrototypeNoDecors;
	private final SignEnumElements unknownRuleSignEnum;
	private final SignElements unknownRuleSign;
	private final DoubleElements pDouble;
	private final TerminalRule tTIDENTIFIER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DmplGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pDmplSubclause = new DmplSubclauseElements();
		this.pProgramElement = new ProgramElementElements();
		this.pConstant = new ConstantElements();
		this.pNumberConst = new NumberConstElements();
		this.pIntConst = new IntConstElements();
		this.pDoubleConst = new DoubleConstElements();
		this.pProcedure = new ProcedureElements();
		this.pProcNoAttr = new ProcNoAttrElements();
		this.pFnPrototype = new FnPrototypeElements();
		this.pFnPrototypeNoDecors = new FnPrototypeNoDecorsElements();
		this.unknownRuleSignEnum = new SignEnumElements();
		this.unknownRuleSign = new SignElements();
		this.pDouble = new DoubleElements();
		this.tTIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.annex.dmpl.Dmpl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} programElements+=ProgramElement*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	DmplSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//DmplSubclause:
	//	{DmplSubclause} program=Program;
	public DmplSubclauseElements getDmplSubclauseAccess() {
		return pDmplSubclause;
	}
	
	public ParserRule getDmplSubclauseRule() {
		return getDmplSubclauseAccess().getRule();
	}

	//ProgramElement: //TODO: target, node
	//	Constant | Procedure;
	public ProgramElementElements getProgramElementAccess() {
		return pProgramElement;
	}
	
	public ParserRule getProgramElementRule() {
		return getProgramElementAccess().getRule();
	}

	//Constant:
	//	("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";";
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumberConst:
	//	IntConst | DoubleConst;
	public NumberConstElements getNumberConstAccess() {
		return pNumberConst;
	}
	
	public ParserRule getNumberConstRule() {
		return getNumberConstAccess().getRule();
	}

	//IntConst:
	//	sign=Sign? value=INT;
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}

	//DoubleConst:
	//	sign=Sign? value=Double;
	public DoubleConstElements getDoubleConstAccess() {
		return pDoubleConst;
	}
	
	public ParserRule getDoubleConstRule() {
		return getDoubleConstAccess().getRule();
	}

	//Procedure: //TODO: OVERRIDE and attr_list
	//	procedure=ProcNoAttr;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//ProcNoAttr: //TODO: fn_body
	//	prototype=FnPrototype ";";
	public ProcNoAttrElements getProcNoAttrAccess() {
		return pProcNoAttr;
	}
	
	public ParserRule getProcNoAttrRule() {
		return getProcNoAttrAccess().getRule();
	}

	//FnPrototype:
	//	extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? prototype=FnPrototypeNoDecors;
	public FnPrototypeElements getFnPrototypeAccess() {
		return pFnPrototype;
	}
	
	public ParserRule getFnPrototypeRule() {
		return getFnPrototypeAccess().getRule();
	}

	//FnPrototypeNoDecors: //TODO: fn_type ID ( param_list )
	//	"thread" name=TIDENTIFIER;
	public FnPrototypeNoDecorsElements getFnPrototypeNoDecorsAccess() {
		return pFnPrototypeNoDecors;
	}
	
	public ParserRule getFnPrototypeNoDecorsRule() {
		return getFnPrototypeNoDecorsAccess().getRule();
	}

	//enum SignEnum:
	//	unset | PLUS="+" | MINUS="-";
	public SignEnumElements getSignEnumAccess() {
		return unknownRuleSignEnum;
	}
	
	public EnumRule getSignEnumRule() {
		return getSignEnumAccess().getRule();
	}

	//enum Sign returns SignEnum:
	//	PLUS="+" | MINUS="-";
	public SignElements getSignAccess() {
		return unknownRuleSign;
	}
	
	public EnumRule getSignRule() {
		return getSignAccess().getRule();
	}

	//Double returns ecore::EDouble:
	//	"NAN" | INT "." INT?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//terminal TIDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getTIDENTIFIERRule() {
		return tTIDENTIFIER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
