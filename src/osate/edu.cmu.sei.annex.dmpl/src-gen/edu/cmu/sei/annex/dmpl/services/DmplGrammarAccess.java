/*
 * generated by Xtext
 */
package edu.cmu.sei.annex.dmpl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DmplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsProgramElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Program:
		//	{Program} elements+=ProgramElement*;
		@Override public ParserRule getRule() { return rule; }

		//{Program} elements+=ProgramElement*
		public Group getGroup() { return cGroup; }

		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }

		//elements+=ProgramElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//ProgramElement
		public RuleCall getElementsProgramElementParserRuleCall_1_0() { return cElementsProgramElementParserRuleCall_1_0; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cDmplSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	DmplSubclause;
		@Override public ParserRule getRule() { return rule; }

		//DmplSubclause
		public RuleCall getDmplSubclauseParserRuleCall() { return cDmplSubclauseParserRuleCall; }
	}

	public class DmplSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DmplSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmplSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProgramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_1_0 = (RuleCall)cProgramAssignment_1.eContents().get(0);
		
		//DmplSubclause:
		//	{DmplSubclause} program=Program;
		@Override public ParserRule getRule() { return rule; }

		//{DmplSubclause} program=Program
		public Group getGroup() { return cGroup; }

		//{DmplSubclause}
		public Action getDmplSubclauseAction_0() { return cDmplSubclauseAction_0; }

		//program=Program
		public Assignment getProgramAssignment_1() { return cProgramAssignment_1; }

		//Program
		public RuleCall getProgramProgramParserRuleCall_1_0() { return cProgramProgramParserRuleCall_1_0; }
	}

	public class ProgramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProgramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTargetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cTargetKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cTARGETKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cNamesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNamesTIDENTIFIERTerminalRuleCall_0_2_0 = (RuleCall)cNamesAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cNamesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cNamesTIDENTIFIERTerminalRuleCall_0_3_1_0 = (RuleCall)cNamesAssignment_0_3_1.eContents().get(0);
		private final Keyword cPercentSignPercentSignLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cElementsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cElementsProgramElementNoTargetParserRuleCall_0_5_0 = (RuleCall)cElementsAssignment_0_5.eContents().get(0);
		private final Keyword cPercentSignPercentSignRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final RuleCall cProgramElementNoTargetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgramElement:
		//	{Target} ("target" | "TARGET") names+=TIDENTIFIER ("," names+=TIDENTIFIER)* "%%{" elements+=ProgramElementNoTarget*
		//	"%%}" | ProgramElementNoTarget;
		@Override public ParserRule getRule() { return rule; }

		//{Target} ("target" | "TARGET") names+=TIDENTIFIER ("," names+=TIDENTIFIER)* "%%{" elements+=ProgramElementNoTarget*
		//"%%}" | ProgramElementNoTarget
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Target} ("target" | "TARGET") names+=TIDENTIFIER ("," names+=TIDENTIFIER)* "%%{" elements+=ProgramElementNoTarget*
		//"%%}"
		public Group getGroup_0() { return cGroup_0; }

		//{Target}
		public Action getTargetAction_0_0() { return cTargetAction_0_0; }

		//"target" | "TARGET"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"target"
		public Keyword getTargetKeyword_0_1_0() { return cTargetKeyword_0_1_0; }

		//"TARGET"
		public Keyword getTARGETKeyword_0_1_1() { return cTARGETKeyword_0_1_1; }

		//names+=TIDENTIFIER
		public Assignment getNamesAssignment_0_2() { return cNamesAssignment_0_2; }

		//TIDENTIFIER
		public RuleCall getNamesTIDENTIFIERTerminalRuleCall_0_2_0() { return cNamesTIDENTIFIERTerminalRuleCall_0_2_0; }

		//("," names+=TIDENTIFIER)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//names+=TIDENTIFIER
		public Assignment getNamesAssignment_0_3_1() { return cNamesAssignment_0_3_1; }

		//TIDENTIFIER
		public RuleCall getNamesTIDENTIFIERTerminalRuleCall_0_3_1_0() { return cNamesTIDENTIFIERTerminalRuleCall_0_3_1_0; }

		//"%%{"
		public Keyword getPercentSignPercentSignLeftCurlyBracketKeyword_0_4() { return cPercentSignPercentSignLeftCurlyBracketKeyword_0_4; }

		//elements+=ProgramElementNoTarget*
		public Assignment getElementsAssignment_0_5() { return cElementsAssignment_0_5; }

		//ProgramElementNoTarget
		public RuleCall getElementsProgramElementNoTargetParserRuleCall_0_5_0() { return cElementsProgramElementNoTargetParserRuleCall_0_5_0; }

		//"%%}"
		public Keyword getPercentSignPercentSignRightCurlyBracketKeyword_0_6() { return cPercentSignPercentSignRightCurlyBracketKeyword_0_6; }

		//ProgramElementNoTarget
		public RuleCall getProgramElementNoTargetParserRuleCall_1() { return cProgramElementNoTargetParserRuleCall_1; }
	}

	public class ProgramElementNoTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProgramElementNoTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIncludelineAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLineAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLineINCLUDE_LINETerminalRuleCall_0_1_0 = (RuleCall)cLineAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDefinelineAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLineAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLineDEFINE_LINETerminalRuleCall_1_1_0 = (RuleCall)cLineAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cConstKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cCONSTKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cValueAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cValueNumberConstParserRuleCall_2_4_0 = (RuleCall)cValueAssignment_2_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttributableProgramElementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Assignment cElementAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElementAttributableNodeOrProcedureParserRuleCall_3_2_0 = (RuleCall)cElementAssignment_3_2.eContents().get(0);
		
		//ProgramElementNoTarget:
		//	{Includeline} line=INCLUDE_LINE | {Defineline} line=DEFINE_LINE | {Constant} ("const" | "CONST") name=TIDENTIFIER "="
		//	value=NumberConst ";" | {AttributableProgramElement} attrs+=Attr* element=AttributableNodeOrProcedure;
		@Override public ParserRule getRule() { return rule; }

		//{Includeline} line=INCLUDE_LINE | {Defineline} line=DEFINE_LINE | {Constant} ("const" | "CONST") name=TIDENTIFIER "="
		//value=NumberConst ";" | {AttributableProgramElement} attrs+=Attr* element=AttributableNodeOrProcedure
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Includeline} line=INCLUDE_LINE
		public Group getGroup_0() { return cGroup_0; }

		//{Includeline}
		public Action getIncludelineAction_0_0() { return cIncludelineAction_0_0; }

		//line=INCLUDE_LINE
		public Assignment getLineAssignment_0_1() { return cLineAssignment_0_1; }

		//INCLUDE_LINE
		public RuleCall getLineINCLUDE_LINETerminalRuleCall_0_1_0() { return cLineINCLUDE_LINETerminalRuleCall_0_1_0; }

		//{Defineline} line=DEFINE_LINE
		public Group getGroup_1() { return cGroup_1; }

		//{Defineline}
		public Action getDefinelineAction_1_0() { return cDefinelineAction_1_0; }

		//line=DEFINE_LINE
		public Assignment getLineAssignment_1_1() { return cLineAssignment_1_1; }

		//DEFINE_LINE
		public RuleCall getLineDEFINE_LINETerminalRuleCall_1_1_0() { return cLineDEFINE_LINETerminalRuleCall_1_1_0; }

		//{Constant} ("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";"
		public Group getGroup_2() { return cGroup_2; }

		//{Constant}
		public Action getConstantAction_2_0() { return cConstantAction_2_0; }

		//"const" | "CONST"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"const"
		public Keyword getConstKeyword_2_1_0() { return cConstKeyword_2_1_0; }

		//"CONST"
		public Keyword getCONSTKeyword_2_1_1() { return cCONSTKeyword_2_1_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_2_2_0() { return cNameTIDENTIFIERTerminalRuleCall_2_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }

		//value=NumberConst
		public Assignment getValueAssignment_2_4() { return cValueAssignment_2_4; }

		//NumberConst
		public RuleCall getValueNumberConstParserRuleCall_2_4_0() { return cValueNumberConstParserRuleCall_2_4_0; }

		//";"
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }

		//{AttributableProgramElement} attrs+=Attr* element=AttributableNodeOrProcedure
		public Group getGroup_3() { return cGroup_3; }

		//{AttributableProgramElement}
		public Action getAttributableProgramElementAction_3_0() { return cAttributableProgramElementAction_3_0; }

		//attrs+=Attr*
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_3_1_0() { return cAttrsAttrParserRuleCall_3_1_0; }

		//element=AttributableNodeOrProcedure
		public Assignment getElementAssignment_3_2() { return cElementAssignment_3_2; }

		//AttributableNodeOrProcedure
		public RuleCall getElementAttributableNodeOrProcedureParserRuleCall_3_2_0() { return cElementAttributableNodeOrProcedureParserRuleCall_3_2_0; }
	}

	public class AttributableNodeOrProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributableNodeOrProcedure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNodeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cNodeKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cNODEKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_0_3_0 = (Keyword)cAlternatives_0_3.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cAlternatives_0_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cElementsNodeBodyElementParserRuleCall_0_3_1_1_0 = (RuleCall)cElementsAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3_1_2 = (Keyword)cGroup_0_3_1.eContents().get(2);
		private final RuleCall cProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributableNodeOrProcedure:
		//	{Node} ("node" | "NODE") name=TIDENTIFIER (";" | "{" elements+=NodeBodyElement* "}") | Procedure;
		@Override public ParserRule getRule() { return rule; }

		//{Node} ("node" | "NODE") name=TIDENTIFIER (";" | "{" elements+=NodeBodyElement* "}") | Procedure
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Node} ("node" | "NODE") name=TIDENTIFIER (";" | "{" elements+=NodeBodyElement* "}")
		public Group getGroup_0() { return cGroup_0; }

		//{Node}
		public Action getNodeAction_0_0() { return cNodeAction_0_0; }

		//"node" | "NODE"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"node"
		public Keyword getNodeKeyword_0_1_0() { return cNodeKeyword_0_1_0; }

		//"NODE"
		public Keyword getNODEKeyword_0_1_1() { return cNODEKeyword_0_1_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_2_0() { return cNameTIDENTIFIERTerminalRuleCall_0_2_0; }

		//";" | "{" elements+=NodeBodyElement* "}"
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//";"
		public Keyword getSemicolonKeyword_0_3_0() { return cSemicolonKeyword_0_3_0; }

		//"{" elements+=NodeBodyElement* "}"
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3_1_0() { return cLeftCurlyBracketKeyword_0_3_1_0; }

		//elements+=NodeBodyElement*
		public Assignment getElementsAssignment_0_3_1_1() { return cElementsAssignment_0_3_1_1; }

		//NodeBodyElement
		public RuleCall getElementsNodeBodyElementParserRuleCall_0_3_1_1_0() { return cElementsNodeBodyElementParserRuleCall_0_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3_1_2() { return cRightCurlyBracketKeyword_0_3_1_2; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_1() { return cProcedureParserRuleCall_1; }
	}

	public class NumberConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSignAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSignSignParserRuleCall_0_1_0 = (RuleCall)cSignAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final RuleCall cDoubleConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberConst:
		//	{IntConst} sign=Sign? value=INT | DoubleConst;
		@Override public ParserRule getRule() { return rule; }

		//{IntConst} sign=Sign? value=INT | DoubleConst
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntConst} sign=Sign? value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntConst}
		public Action getIntConstAction_0_0() { return cIntConstAction_0_0; }

		//sign=Sign?
		public Assignment getSignAssignment_0_1() { return cSignAssignment_0_1; }

		//Sign
		public RuleCall getSignSignParserRuleCall_0_1_0() { return cSignSignParserRuleCall_0_1_0; }

		//value=INT
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_2_0() { return cValueINTTerminalRuleCall_0_2_0; }

		//DoubleConst
		public RuleCall getDoubleConstParserRuleCall_1() { return cDoubleConstParserRuleCall_1; }
	}

	public class DoubleConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DoubleConst:
		//	sign=Sign? value=Double;
		@Override public ParserRule getRule() { return rule; }

		//sign=Sign? value=Double
		public Group getGroup() { return cGroup; }

		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//Sign
		public RuleCall getSignSignParserRuleCall_0_0() { return cSignSignParserRuleCall_0_0; }

		//value=Double
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_1_0() { return cValueDoubleParserRuleCall_1_0; }
	}

	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtEndSpecAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExpectKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cAt_endKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cFunctionAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cFunctionTIDENTIFIERTerminalRuleCall_0_6_0 = (RuleCall)cFunctionAssignment_0_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAtLeastSpecAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExpectKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cAt_leastKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cThresholdAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cThresholdDoubleConstParserRuleCall_1_5_0 = (RuleCall)cThresholdAssignment_1_5.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cFunctionAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cFunctionTIDENTIFIERTerminalRuleCall_1_7_0 = (RuleCall)cFunctionAssignment_1_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRequireSpecAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRequireKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cFunctionAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cFunctionTIDENTIFIERTerminalRuleCall_2_4_0 = (RuleCall)cFunctionAssignment_2_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//Specification:
		//	{AtEndSpec} "expect" name=TIDENTIFIER ":" "at_end" "=>" function=TIDENTIFIER ";" | {AtLeastSpec} "expect"
		//	name=TIDENTIFIER ":" "at_least" threshold=DoubleConst "=>" function=TIDENTIFIER ";" | {RequireSpec} "require"
		//	name=TIDENTIFIER "=>" function=TIDENTIFIER ";";
		@Override public ParserRule getRule() { return rule; }

		//{AtEndSpec} "expect" name=TIDENTIFIER ":" "at_end" "=>" function=TIDENTIFIER ";" | {AtLeastSpec} "expect"
		//name=TIDENTIFIER ":" "at_least" threshold=DoubleConst "=>" function=TIDENTIFIER ";" | {RequireSpec} "require"
		//name=TIDENTIFIER "=>" function=TIDENTIFIER ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtEndSpec} "expect" name=TIDENTIFIER ":" "at_end" "=>" function=TIDENTIFIER ";"
		public Group getGroup_0() { return cGroup_0; }

		//{AtEndSpec}
		public Action getAtEndSpecAction_0_0() { return cAtEndSpecAction_0_0; }

		//"expect"
		public Keyword getExpectKeyword_0_1() { return cExpectKeyword_0_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_2_0() { return cNameTIDENTIFIERTerminalRuleCall_0_2_0; }

		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }

		//"at_end"
		public Keyword getAt_endKeyword_0_4() { return cAt_endKeyword_0_4; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0_5() { return cEqualsSignGreaterThanSignKeyword_0_5; }

		//function=TIDENTIFIER
		public Assignment getFunctionAssignment_0_6() { return cFunctionAssignment_0_6; }

		//TIDENTIFIER
		public RuleCall getFunctionTIDENTIFIERTerminalRuleCall_0_6_0() { return cFunctionTIDENTIFIERTerminalRuleCall_0_6_0; }

		//";"
		public Keyword getSemicolonKeyword_0_7() { return cSemicolonKeyword_0_7; }

		//{AtLeastSpec} "expect" name=TIDENTIFIER ":" "at_least" threshold=DoubleConst "=>" function=TIDENTIFIER ";"
		public Group getGroup_1() { return cGroup_1; }

		//{AtLeastSpec}
		public Action getAtLeastSpecAction_1_0() { return cAtLeastSpecAction_1_0; }

		//"expect"
		public Keyword getExpectKeyword_1_1() { return cExpectKeyword_1_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_2_0() { return cNameTIDENTIFIERTerminalRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//"at_least"
		public Keyword getAt_leastKeyword_1_4() { return cAt_leastKeyword_1_4; }

		//threshold=DoubleConst
		public Assignment getThresholdAssignment_1_5() { return cThresholdAssignment_1_5; }

		//DoubleConst
		public RuleCall getThresholdDoubleConstParserRuleCall_1_5_0() { return cThresholdDoubleConstParserRuleCall_1_5_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_6() { return cEqualsSignGreaterThanSignKeyword_1_6; }

		//function=TIDENTIFIER
		public Assignment getFunctionAssignment_1_7() { return cFunctionAssignment_1_7; }

		//TIDENTIFIER
		public RuleCall getFunctionTIDENTIFIERTerminalRuleCall_1_7_0() { return cFunctionTIDENTIFIERTerminalRuleCall_1_7_0; }

		//";"
		public Keyword getSemicolonKeyword_1_8() { return cSemicolonKeyword_1_8; }

		//{RequireSpec} "require" name=TIDENTIFIER "=>" function=TIDENTIFIER ";"
		public Group getGroup_2() { return cGroup_2; }

		//{RequireSpec}
		public Action getRequireSpecAction_2_0() { return cRequireSpecAction_2_0; }

		//"require"
		public Keyword getRequireKeyword_2_1() { return cRequireKeyword_2_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_2_2_0() { return cNameTIDENTIFIERTerminalRuleCall_2_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2_3() { return cEqualsSignGreaterThanSignKeyword_2_3; }

		//function=TIDENTIFIER
		public Assignment getFunctionAssignment_2_4() { return cFunctionAssignment_2_4; }

		//TIDENTIFIER
		public RuleCall getFunctionTIDENTIFIERTerminalRuleCall_2_4_0() { return cFunctionTIDENTIFIERTerminalRuleCall_2_4_0; }

		//";"
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }
	}

	public class NodeBodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeBodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttributableAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAttrsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_2_1_0 = (RuleCall)cAttrsAssignment_2_1.eContents().get(0);
		private final Assignment cElementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cElementAttributableElementParserRuleCall_2_2_0 = (RuleCall)cElementAssignment_2_2.eContents().get(0);
		
		//NodeBodyElement:
		//	VarBlock | RecordBlock | {Attributable} attrs+=Attr* element=AttributableElement;
		@Override public ParserRule getRule() { return rule; }

		//VarBlock | RecordBlock | {Attributable} attrs+=Attr* element=AttributableElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarBlock
		public RuleCall getVarBlockParserRuleCall_0() { return cVarBlockParserRuleCall_0; }

		//RecordBlock
		public RuleCall getRecordBlockParserRuleCall_1() { return cRecordBlockParserRuleCall_1; }

		//{Attributable} attrs+=Attr* element=AttributableElement
		public Group getGroup_2() { return cGroup_2; }

		//{Attributable}
		public Action getAttributableAction_2_0() { return cAttributableAction_2_0; }

		//attrs+=Attr*
		public Assignment getAttrsAssignment_2_1() { return cAttrsAssignment_2_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_1_0() { return cAttrsAttrParserRuleCall_2_1_0; }

		//element=AttributableElement
		public Assignment getElementAssignment_2_2() { return cElementAssignment_2_2; }

		//AttributableElement
		public RuleCall getElementAttributableElementParserRuleCall_2_2_0() { return cElementAttributableElementParserRuleCall_2_2_0; }
	}

	public class AttributableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSimpleRoleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRoleKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElementsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElementsRoleBodyElementParserRuleCall_1_4_0 = (RuleCall)cElementsAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIdRoleAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRoleKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cIdKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cIdAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_2_4_0 = (RuleCall)cIdAssignment_2_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cElementsAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cElementsRoleBodyElementParserRuleCall_2_6_0 = (RuleCall)cElementsAssignment_2_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final RuleCall cSpecificationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributableElement:
		//	Procedure | {SimpleRole} "role" name=TIDENTIFIER "{" elements+=RoleBodyElement* "}" | {IdRole} "role" name=TIDENTIFIER
		//	"id" id=INT "{" elements+=RoleBodyElement* "}" | Specification;
		@Override public ParserRule getRule() { return rule; }

		//Procedure | {SimpleRole} "role" name=TIDENTIFIER "{" elements+=RoleBodyElement* "}" | {IdRole} "role" name=TIDENTIFIER
		//"id" id=INT "{" elements+=RoleBodyElement* "}" | Specification
		public Alternatives getAlternatives() { return cAlternatives; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_0() { return cProcedureParserRuleCall_0; }

		//{SimpleRole} "role" name=TIDENTIFIER "{" elements+=RoleBodyElement* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{SimpleRole}
		public Action getSimpleRoleAction_1_0() { return cSimpleRoleAction_1_0; }

		//"role"
		public Keyword getRoleKeyword_1_1() { return cRoleKeyword_1_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_2_0() { return cNameTIDENTIFIERTerminalRuleCall_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }

		//elements+=RoleBodyElement*
		public Assignment getElementsAssignment_1_4() { return cElementsAssignment_1_4; }

		//RoleBodyElement
		public RuleCall getElementsRoleBodyElementParserRuleCall_1_4_0() { return cElementsRoleBodyElementParserRuleCall_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }

		//{IdRole} "role" name=TIDENTIFIER "id" id=INT "{" elements+=RoleBodyElement* "}"
		public Group getGroup_2() { return cGroup_2; }

		//{IdRole}
		public Action getIdRoleAction_2_0() { return cIdRoleAction_2_0; }

		//"role"
		public Keyword getRoleKeyword_2_1() { return cRoleKeyword_2_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_2_2_0() { return cNameTIDENTIFIERTerminalRuleCall_2_2_0; }

		//"id"
		public Keyword getIdKeyword_2_3() { return cIdKeyword_2_3; }

		//id=INT
		public Assignment getIdAssignment_2_4() { return cIdAssignment_2_4; }

		//INT
		public RuleCall getIdINTTerminalRuleCall_2_4_0() { return cIdINTTerminalRuleCall_2_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_5() { return cLeftCurlyBracketKeyword_2_5; }

		//elements+=RoleBodyElement*
		public Assignment getElementsAssignment_2_6() { return cElementsAssignment_2_6; }

		//RoleBodyElement
		public RuleCall getElementsRoleBodyElementParserRuleCall_2_6_0() { return cElementsRoleBodyElementParserRuleCall_2_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_7() { return cRightCurlyBracketKeyword_2_7; }

		//Specification
		public RuleCall getSpecificationParserRuleCall_3() { return cSpecificationParserRuleCall_3; }
	}

	public class RoleBodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleBodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttributableNoRoleAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAttrsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_2_1_0 = (RuleCall)cAttrsAssignment_2_1.eContents().get(0);
		private final Assignment cElementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cElementAttributableNoRoleElementParserRuleCall_2_2_0 = (RuleCall)cElementAssignment_2_2.eContents().get(0);
		
		//RoleBodyElement:
		//	VarBlock | RecordBlock | {AttributableNoRole} attrs+=Attr* element=AttributableNoRoleElement;
		@Override public ParserRule getRule() { return rule; }

		//VarBlock | RecordBlock | {AttributableNoRole} attrs+=Attr* element=AttributableNoRoleElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarBlock
		public RuleCall getVarBlockParserRuleCall_0() { return cVarBlockParserRuleCall_0; }

		//RecordBlock
		public RuleCall getRecordBlockParserRuleCall_1() { return cRecordBlockParserRuleCall_1; }

		//{AttributableNoRole} attrs+=Attr* element=AttributableNoRoleElement
		public Group getGroup_2() { return cGroup_2; }

		//{AttributableNoRole}
		public Action getAttributableNoRoleAction_2_0() { return cAttributableNoRoleAction_2_0; }

		//attrs+=Attr*
		public Assignment getAttrsAssignment_2_1() { return cAttrsAssignment_2_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_1_0() { return cAttrsAttrParserRuleCall_2_1_0; }

		//element=AttributableNoRoleElement
		public Assignment getElementAssignment_2_2() { return cElementAssignment_2_2; }

		//AttributableNoRoleElement
		public RuleCall getElementAttributableNoRoleElementParserRuleCall_2_2_0() { return cElementAttributableNoRoleElementParserRuleCall_2_2_0; }
	}

	public class AttributableNoRoleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributableNoRoleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributableNoRoleElement:
		//	Procedure | Specification;
		@Override public ParserRule getRule() { return rule; }

		//Procedure | Specification
		public Alternatives getAlternatives() { return cAlternatives; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_0() { return cProcedureParserRuleCall_0; }

		//Specification
		public RuleCall getSpecificationParserRuleCall_1() { return cSpecificationParserRuleCall_1; }
	}

	public class VarBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNodeVarInitParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VarBlock:
		//	override?="override"? var=NodeVarInit ";";
		@Override public ParserRule getRule() { return rule; }

		//override?="override"? var=NodeVarInit ";"
		public Group getGroup() { return cGroup; }

		//override?="override"?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//var=NodeVarInit
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//NodeVarInit
		public RuleCall getVarNodeVarInitParserRuleCall_1_0() { return cVarNodeVarInitParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class RecordBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVarsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cVarsNodeVarInitParserRuleCall_4_0_0 = (RuleCall)cVarsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEqualsBodyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEqualsBodyFnBodyParserRuleCall_6_1_0 = (RuleCall)cEqualsBodyAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTildeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cComplementBodyAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cComplementBodyFnBodyParserRuleCall_7_1_0 = (RuleCall)cComplementBodyAssignment_7_1.eContents().get(0);
		
		//RecordBlock:
		//	override?="override"? "record" name=TIDENTIFIER "{" (vars+=NodeVarInit ";")+ "}" ("=" equalsBody=FnBody)? ("~"
		//	complementBody=FnBody)?;
		@Override public ParserRule getRule() { return rule; }

		//override?="override"? "record" name=TIDENTIFIER "{" (vars+=NodeVarInit ";")+ "}" ("=" equalsBody=FnBody)? ("~"
		//complementBody=FnBody)?
		public Group getGroup() { return cGroup; }

		//override?="override"?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//"record"
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_2_0() { return cNameTIDENTIFIERTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(vars+=NodeVarInit ";")+
		public Group getGroup_4() { return cGroup_4; }

		//vars+=NodeVarInit
		public Assignment getVarsAssignment_4_0() { return cVarsAssignment_4_0; }

		//NodeVarInit
		public RuleCall getVarsNodeVarInitParserRuleCall_4_0_0() { return cVarsNodeVarInitParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//("=" equalsBody=FnBody)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//equalsBody=FnBody
		public Assignment getEqualsBodyAssignment_6_1() { return cEqualsBodyAssignment_6_1; }

		//FnBody
		public RuleCall getEqualsBodyFnBodyParserRuleCall_6_1_0() { return cEqualsBodyFnBodyParserRuleCall_6_1_0; }

		//("~" complementBody=FnBody)?
		public Group getGroup_7() { return cGroup_7; }

		//"~"
		public Keyword getTildeKeyword_7_0() { return cTildeKeyword_7_0; }

		//complementBody=FnBody
		public Assignment getComplementBodyAssignment_7_1() { return cComplementBodyAssignment_7_1; }

		//FnBody
		public RuleCall getComplementBodyFnBodyParserRuleCall_7_1_0() { return cComplementBodyFnBodyParserRuleCall_7_1_0; }
	}

	public class NodeVarInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeVarInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScopeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScopeNodeVarScopeParserRuleCall_0_0 = (RuleCall)cScopeAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarInitParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//NodeVarInit:
		//	scope=NodeVarScope var=VarInit;
		@Override public ParserRule getRule() { return rule; }

		//scope=NodeVarScope var=VarInit
		public Group getGroup() { return cGroup; }

		//scope=NodeVarScope
		public Assignment getScopeAssignment_0() { return cScopeAssignment_0; }

		//NodeVarScope
		public RuleCall getScopeNodeVarScopeParserRuleCall_0_0() { return cScopeNodeVarScopeParserRuleCall_0_0; }

		//var=VarInit
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//VarInit
		public RuleCall getVarVarInitParserRuleCall_1_0() { return cVarVarInitParserRuleCall_1_0; }
	}

	public class VarInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarAsgnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarAsgnsVarAsgnParserRuleCall_1_0 = (RuleCall)cVarAsgnsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarAsgnsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarAsgnsVarAsgnParserRuleCall_2_1_0 = (RuleCall)cVarAsgnsAssignment_2_1.eContents().get(0);
		
		//VarInit:
		//	type=Type varAsgns+=VarAsgn ("," varAsgns+=VarAsgn)*;
		@Override public ParserRule getRule() { return rule; }

		//type=Type varAsgns+=VarAsgn ("," varAsgns+=VarAsgn)*
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//varAsgns+=VarAsgn
		public Assignment getVarAsgnsAssignment_1() { return cVarAsgnsAssignment_1; }

		//VarAsgn
		public RuleCall getVarAsgnsVarAsgnParserRuleCall_1_0() { return cVarAsgnsVarAsgnParserRuleCall_1_0; }

		//("," varAsgns+=VarAsgn)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//varAsgns+=VarAsgn
		public Assignment getVarAsgnsAssignment_2_1() { return cVarAsgnsAssignment_2_1; }

		//VarAsgn
		public RuleCall getVarAsgnsVarAsgnParserRuleCall_2_1_0() { return cVarAsgnsVarAsgnParserRuleCall_2_1_0; }
	}

	public class VarAsgnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarAsgn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInputAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cInputInputKeyword_0_0_0 = (Keyword)cInputAssignment_0_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprVarAsgnAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cVarAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_1_1_0_0_0 = (RuleCall)cVarAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cInputAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cInputInputKeyword_1_1_1_0_0 = (Keyword)cInputAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_1_1_1_0 = (RuleCall)cVarAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFnVarAsgnAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Assignment cVarAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_2_1_0_0_0 = (RuleCall)cVarAssignment_2_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cInputAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final Keyword cInputInputKeyword_2_1_1_0_0 = (Keyword)cInputAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cVarAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_2_1_1_1_0 = (RuleCall)cVarAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cTildeKeyword_2_1_1_2 = (Keyword)cGroup_2_1_1.eContents().get(2);
		private final Assignment cFnBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFnBodyFnBodyParserRuleCall_2_2_0 = (RuleCall)cFnBodyAssignment_2_2.eContents().get(0);
		
		//VarAsgn:
		//	input?="input"? var=Var | {ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr | {FnVarAsgn} (var=Var
		//	"=" | input?="input" var=Var "~") fnBody=FnBody;
		@Override public ParserRule getRule() { return rule; }

		//input?="input"? var=Var | {ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr | {FnVarAsgn} (var=Var "="
		//| input?="input" var=Var "~") fnBody=FnBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//input?="input"? var=Var
		public Group getGroup_0() { return cGroup_0; }

		//input?="input"?
		public Assignment getInputAssignment_0_0() { return cInputAssignment_0_0; }

		//"input"
		public Keyword getInputInputKeyword_0_0_0() { return cInputInputKeyword_0_0_0; }

		//var=Var
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_1_0() { return cVarVarParserRuleCall_0_1_0; }

		//{ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{ExprVarAsgn}
		public Action getExprVarAsgnAction_1_0() { return cExprVarAsgnAction_1_0; }

		//var=Var "=" | input?="input" var=Var "~"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//var=Var "="
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//var=Var
		public Assignment getVarAssignment_1_1_0_0() { return cVarAssignment_1_1_0_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_1_0_0_0() { return cVarVarParserRuleCall_1_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_0_1() { return cEqualsSignKeyword_1_1_0_1; }

		//input?="input" var=Var "~"
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//input?="input"
		public Assignment getInputAssignment_1_1_1_0() { return cInputAssignment_1_1_1_0; }

		//"input"
		public Keyword getInputInputKeyword_1_1_1_0_0() { return cInputInputKeyword_1_1_1_0_0; }

		//var=Var
		public Assignment getVarAssignment_1_1_1_1() { return cVarAssignment_1_1_1_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_1_1_1_0() { return cVarVarParserRuleCall_1_1_1_1_0; }

		//"~"
		public Keyword getTildeKeyword_1_1_1_2() { return cTildeKeyword_1_1_1_2; }

		//expr=Expr
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_2_0() { return cExprExprParserRuleCall_1_2_0; }

		//{FnVarAsgn} (var=Var "=" | input?="input" var=Var "~") fnBody=FnBody
		public Group getGroup_2() { return cGroup_2; }

		//{FnVarAsgn}
		public Action getFnVarAsgnAction_2_0() { return cFnVarAsgnAction_2_0; }

		//var=Var "=" | input?="input" var=Var "~"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//var=Var "="
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//var=Var
		public Assignment getVarAssignment_2_1_0_0() { return cVarAssignment_2_1_0_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_2_1_0_0_0() { return cVarVarParserRuleCall_2_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0_1() { return cEqualsSignKeyword_2_1_0_1; }

		//input?="input" var=Var "~"
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//input?="input"
		public Assignment getInputAssignment_2_1_1_0() { return cInputAssignment_2_1_1_0; }

		//"input"
		public Keyword getInputInputKeyword_2_1_1_0_0() { return cInputInputKeyword_2_1_1_0_0; }

		//var=Var
		public Assignment getVarAssignment_2_1_1_1() { return cVarAssignment_2_1_1_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_2_1_1_1_0() { return cVarVarParserRuleCall_2_1_1_1_0; }

		//"~"
		public Keyword getTildeKeyword_2_1_1_2() { return cTildeKeyword_2_1_1_2; }

		//fnBody=FnBody
		public Assignment getFnBodyAssignment_2_2() { return cFnBodyAssignment_2_2; }

		//FnBody
		public RuleCall getFnBodyFnBodyParserRuleCall_2_2_0() { return cFnBodyFnBodyParserRuleCall_2_2_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsDimensionParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Var:
		//	name=TIDENTIFIER ("[" dimensions+=Dimension "]")*;
		@Override public ParserRule getRule() { return rule; }

		//name=TIDENTIFIER ("[" dimensions+=Dimension "]")*
		public Group getGroup() { return cGroup; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_0() { return cNameTIDENTIFIERTerminalRuleCall_0_0; }

		//("[" dimensions+=Dimension "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//dimensions+=Dimension
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }

		//Dimension
		public RuleCall getDimensionsDimensionParserRuleCall_1_1_0() { return cDimensionsDimensionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class DimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dimension");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntDimensionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIndexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_0_1_0 = (RuleCall)cIndexAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeNumDimensionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIdDimensionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexTIDENTIFIERTerminalRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		
		//Dimension:
		//	{IntDimension} index=INT | {NodeNumDimension} "#N" | {IdDimension} index=TIDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//{IntDimension} index=INT | {NodeNumDimension} "#N" | {IdDimension} index=TIDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntDimension} index=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntDimension}
		public Action getIntDimensionAction_0_0() { return cIntDimensionAction_0_0; }

		//index=INT
		public Assignment getIndexAssignment_0_1() { return cIndexAssignment_0_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_0_1_0() { return cIndexINTTerminalRuleCall_0_1_0; }

		//{NodeNumDimension} "#N"
		public Group getGroup_1() { return cGroup_1; }

		//{NodeNumDimension}
		public Action getNodeNumDimensionAction_1_0() { return cNodeNumDimensionAction_1_0; }

		//"#N"
		public Keyword getNKeyword_1_1() { return cNKeyword_1_1; }

		//{IdDimension} index=TIDENTIFIER
		public Group getGroup_2() { return cGroup_2; }

		//{IdDimension}
		public Action getIdDimensionAction_2_0() { return cIdDimensionAction_2_0; }

		//index=TIDENTIFIER
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }

		//TIDENTIFIER
		public RuleCall getIndexTIDENTIFIERTerminalRuleCall_2_1_0() { return cIndexTIDENTIFIERTerminalRuleCall_2_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignedSignedParserRuleCall_0_0 = (RuleCall)cSignedAssignment_0.eContents().get(0);
		private final Assignment cSimpTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpTypeSimpTypeParserRuleCall_1_0 = (RuleCall)cSimpTypeAssignment_1.eContents().get(0);
		
		//Type:
		//	signed=Signed? simpType=SimpType;
		@Override public ParserRule getRule() { return rule; }

		//signed=Signed? simpType=SimpType
		public Group getGroup() { return cGroup; }

		//signed=Signed?
		public Assignment getSignedAssignment_0() { return cSignedAssignment_0; }

		//Signed
		public RuleCall getSignedSignedParserRuleCall_0_0() { return cSignedSignedParserRuleCall_0_0; }

		//simpType=SimpType
		public Assignment getSimpTypeAssignment_1() { return cSimpTypeAssignment_1; }

		//SimpType
		public RuleCall getSimpTypeSimpTypeParserRuleCall_1_0() { return cSimpTypeSimpTypeParserRuleCall_1_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cThreadDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOverrideAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_0_1_0 = (Keyword)cOverrideAssignment_0_1.eContents().get(0);
		private final Assignment cExternAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cExternAlternatives_0_2_0 = (Alternatives)cExternAssignment_0_2.eContents().get(0);
		private final Keyword cExternExternKeyword_0_2_0_0 = (Keyword)cExternAlternatives_0_2_0.eContents().get(0);
		private final Keyword cExternEXTERNKeyword_0_2_0_1 = (Keyword)cExternAlternatives_0_2_0.eContents().get(1);
		private final Assignment cPureAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Alternatives cPureAlternatives_0_3_0 = (Alternatives)cPureAssignment_0_3.eContents().get(0);
		private final Keyword cPurePureKeyword_0_3_0_0 = (Keyword)cPureAlternatives_0_3_0.eContents().get(0);
		private final Keyword cPurePUREKeyword_0_3_0_1 = (Keyword)cPureAlternatives_0_3_0.eContents().get(1);
		private final Keyword cThreadKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cNameAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_5_0 = (RuleCall)cNameAssignment_0_5.eContents().get(0);
		private final Alternatives cAlternatives_0_6 = (Alternatives)cGroup_0.eContents().get(6);
		private final Keyword cSemicolonKeyword_0_6_0 = (Keyword)cAlternatives_0_6.eContents().get(0);
		private final Assignment cFnBodyAssignment_0_6_1 = (Assignment)cAlternatives_0_6.eContents().get(1);
		private final RuleCall cFnBodyFnBodyParserRuleCall_0_6_1_0 = (RuleCall)cFnBodyAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunctionDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOverrideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_1_1_0 = (Keyword)cOverrideAssignment_1_1.eContents().get(0);
		private final Assignment cExternAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cExternAlternatives_1_2_0 = (Alternatives)cExternAssignment_1_2.eContents().get(0);
		private final Keyword cExternExternKeyword_1_2_0_0 = (Keyword)cExternAlternatives_1_2_0.eContents().get(0);
		private final Keyword cExternEXTERNKeyword_1_2_0_1 = (Keyword)cExternAlternatives_1_2_0.eContents().get(1);
		private final Assignment cPureAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Alternatives cPureAlternatives_1_3_0 = (Alternatives)cPureAssignment_1_3.eContents().get(0);
		private final Keyword cPurePureKeyword_1_3_0_0 = (Keyword)cPureAlternatives_1_3_0.eContents().get(0);
		private final Keyword cPurePUREKeyword_1_3_0_1 = (Keyword)cPureAlternatives_1_3_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Assignment cNameAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_5_0 = (RuleCall)cNameAssignment_1_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final Assignment cParamsAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_1_7_0_0 = (RuleCall)cParamsAssignment_1_7_0.eContents().get(0);
		private final Group cGroup_1_7_1 = (Group)cGroup_1_7.eContents().get(1);
		private final Keyword cCommaKeyword_1_7_1_0 = (Keyword)cGroup_1_7_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_7_1_1 = (Assignment)cGroup_1_7_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_7_1_1_0 = (RuleCall)cParamsAssignment_1_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Alternatives cAlternatives_1_9 = (Alternatives)cGroup_1.eContents().get(9);
		private final Keyword cSemicolonKeyword_1_9_0 = (Keyword)cAlternatives_1_9.eContents().get(0);
		private final Assignment cFnBodyAssignment_1_9_1 = (Assignment)cAlternatives_1_9.eContents().get(1);
		private final RuleCall cFnBodyFnBodyParserRuleCall_1_9_1_0 = (RuleCall)cFnBodyAssignment_1_9_1.eContents().get(0);
		
		//Procedure:
		//	{ThreadDeclaration} override?="override"? extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread"
		//	name=TIDENTIFIER (";" | fnBody=FnBody) | {FunctionDeclaration} override?="override"? extern?=("extern" | "EXTERN")?
		//	pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "(" (params+=Param ("," params+=Param)*)? ")" (";" |
		//	fnBody=FnBody);
		@Override public ParserRule getRule() { return rule; }

		//{ThreadDeclaration} override?="override"? extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread"
		//name=TIDENTIFIER (";" | fnBody=FnBody) | {FunctionDeclaration} override?="override"? extern?=("extern" | "EXTERN")?
		//pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "(" (params+=Param ("," params+=Param)*)? ")" (";" | fnBody=FnBody)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ThreadDeclaration} override?="override"? extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread"
		//name=TIDENTIFIER (";" | fnBody=FnBody)
		public Group getGroup_0() { return cGroup_0; }

		//{ThreadDeclaration}
		public Action getThreadDeclarationAction_0_0() { return cThreadDeclarationAction_0_0; }

		//override?="override"?
		public Assignment getOverrideAssignment_0_1() { return cOverrideAssignment_0_1; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_1_0() { return cOverrideOverrideKeyword_0_1_0; }

		//extern?=("extern" | "EXTERN")?
		public Assignment getExternAssignment_0_2() { return cExternAssignment_0_2; }

		//"extern" | "EXTERN"
		public Alternatives getExternAlternatives_0_2_0() { return cExternAlternatives_0_2_0; }

		//"extern"
		public Keyword getExternExternKeyword_0_2_0_0() { return cExternExternKeyword_0_2_0_0; }

		//"EXTERN"
		public Keyword getExternEXTERNKeyword_0_2_0_1() { return cExternEXTERNKeyword_0_2_0_1; }

		//pure?=("pure" | "PURE")?
		public Assignment getPureAssignment_0_3() { return cPureAssignment_0_3; }

		//"pure" | "PURE"
		public Alternatives getPureAlternatives_0_3_0() { return cPureAlternatives_0_3_0; }

		//"pure"
		public Keyword getPurePureKeyword_0_3_0_0() { return cPurePureKeyword_0_3_0_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_0_3_0_1() { return cPurePUREKeyword_0_3_0_1; }

		//"thread"
		public Keyword getThreadKeyword_0_4() { return cThreadKeyword_0_4; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0_5() { return cNameAssignment_0_5; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_5_0() { return cNameTIDENTIFIERTerminalRuleCall_0_5_0; }

		//";" | fnBody=FnBody
		public Alternatives getAlternatives_0_6() { return cAlternatives_0_6; }

		//";"
		public Keyword getSemicolonKeyword_0_6_0() { return cSemicolonKeyword_0_6_0; }

		//fnBody=FnBody
		public Assignment getFnBodyAssignment_0_6_1() { return cFnBodyAssignment_0_6_1; }

		//FnBody
		public RuleCall getFnBodyFnBodyParserRuleCall_0_6_1_0() { return cFnBodyFnBodyParserRuleCall_0_6_1_0; }

		//{FunctionDeclaration} override?="override"? extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? type=Type
		//name=TIDENTIFIER "(" (params+=Param ("," params+=Param)*)? ")" (";" | fnBody=FnBody)
		public Group getGroup_1() { return cGroup_1; }

		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_1_0() { return cFunctionDeclarationAction_1_0; }

		//override?="override"?
		public Assignment getOverrideAssignment_1_1() { return cOverrideAssignment_1_1; }

		//"override"
		public Keyword getOverrideOverrideKeyword_1_1_0() { return cOverrideOverrideKeyword_1_1_0; }

		//extern?=("extern" | "EXTERN")?
		public Assignment getExternAssignment_1_2() { return cExternAssignment_1_2; }

		//"extern" | "EXTERN"
		public Alternatives getExternAlternatives_1_2_0() { return cExternAlternatives_1_2_0; }

		//"extern"
		public Keyword getExternExternKeyword_1_2_0_0() { return cExternExternKeyword_1_2_0_0; }

		//"EXTERN"
		public Keyword getExternEXTERNKeyword_1_2_0_1() { return cExternEXTERNKeyword_1_2_0_1; }

		//pure?=("pure" | "PURE")?
		public Assignment getPureAssignment_1_3() { return cPureAssignment_1_3; }

		//"pure" | "PURE"
		public Alternatives getPureAlternatives_1_3_0() { return cPureAlternatives_1_3_0; }

		//"pure"
		public Keyword getPurePureKeyword_1_3_0_0() { return cPurePureKeyword_1_3_0_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_1_3_0_1() { return cPurePUREKeyword_1_3_0_1; }

		//type=Type
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_4_0() { return cTypeTypeParserRuleCall_1_4_0; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1_5() { return cNameAssignment_1_5; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_5_0() { return cNameTIDENTIFIERTerminalRuleCall_1_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_6() { return cLeftParenthesisKeyword_1_6; }

		//(params+=Param ("," params+=Param)*)?
		public Group getGroup_1_7() { return cGroup_1_7; }

		//params+=Param
		public Assignment getParamsAssignment_1_7_0() { return cParamsAssignment_1_7_0; }

		//Param
		public RuleCall getParamsParamParserRuleCall_1_7_0_0() { return cParamsParamParserRuleCall_1_7_0_0; }

		//("," params+=Param)*
		public Group getGroup_1_7_1() { return cGroup_1_7_1; }

		//","
		public Keyword getCommaKeyword_1_7_1_0() { return cCommaKeyword_1_7_1_0; }

		//params+=Param
		public Assignment getParamsAssignment_1_7_1_1() { return cParamsAssignment_1_7_1_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_1_7_1_1_0() { return cParamsParamParserRuleCall_1_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_8() { return cRightParenthesisKeyword_1_8; }

		//";" | fnBody=FnBody
		public Alternatives getAlternatives_1_9() { return cAlternatives_1_9; }

		//";"
		public Keyword getSemicolonKeyword_1_9_0() { return cSemicolonKeyword_1_9_0; }

		//fnBody=FnBody
		public Assignment getFnBodyAssignment_1_9_1() { return cFnBodyAssignment_1_9_1; }

		//FnBody
		public RuleCall getFnBodyFnBodyParserRuleCall_1_9_1_0() { return cFnBodyFnBodyParserRuleCall_1_9_1_0; }
	}

	public class FnBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFnBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarInitsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarInitsVarInitParserRuleCall_2_0_0 = (RuleCall)cVarInitsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStmtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtsStmtParserRuleCall_3_0 = (RuleCall)cStmtsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FnBody:
		//	{FnBody} "{" (varInits+=VarInit ";")* stmts+=Stmt* "}";
		@Override public ParserRule getRule() { return rule; }

		//{FnBody} "{" (varInits+=VarInit ";")* stmts+=Stmt* "}"
		public Group getGroup() { return cGroup; }

		//{FnBody}
		public Action getFnBodyAction_0() { return cFnBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(varInits+=VarInit ";")*
		public Group getGroup_2() { return cGroup_2; }

		//varInits+=VarInit
		public Assignment getVarInitsAssignment_2_0() { return cVarInitsAssignment_2_0; }

		//VarInit
		public RuleCall getVarInitsVarInitParserRuleCall_2_0_0() { return cVarInitsVarInitParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//stmts+=Stmt*
		public Assignment getStmtsAssignment_3() { return cStmtsAssignment_3; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_3_0() { return cStmtsStmtParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attr:
		//	"@" name=TIDENTIFIER ("(" params+=Expr ("," params+=Expr)* ")")? ";";
		@Override public ParserRule getRule() { return rule; }

		//"@" name=TIDENTIFIER ("(" params+=Expr ("," params+=Expr)* ")")? ";"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_0() { return cNameTIDENTIFIERTerminalRuleCall_1_0; }

		//("(" params+=Expr ("," params+=Expr)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=Expr
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_2_1_0() { return cParamsExprParserRuleCall_2_1_0; }

		//("," params+=Expr)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=Expr
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_2_2_1_0() { return cParamsExprParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Param:
		//	type=Type var=Var;
		@Override public ParserRule getRule() { return rule; }

		//type=Type var=Var
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//var=Var
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_0() { return cVarVarParserRuleCall_1_0; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNestedStmtAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStmtsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_0_2_0 = (RuleCall)cStmtsAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cWhileStmtAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cWhileKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cConditionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cConditionExprParserRuleCall_2_3_0 = (RuleCall)cConditionAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cStmtAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cStmtStmtParserRuleCall_2_5_0 = (RuleCall)cStmtAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cForStmtAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cForKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cInitsAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cInitsInitAssignmentStmtParserRuleCall_3_3_0_0 = (RuleCall)cInitsAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Assignment cInitsAssignment_3_3_1_1 = (Assignment)cGroup_3_3_1.eContents().get(1);
		private final RuleCall cInitsInitAssignmentStmtParserRuleCall_3_3_1_1_0 = (RuleCall)cInitsAssignment_3_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cConditionAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cConditionExprParserRuleCall_3_5_0 = (RuleCall)cConditionAssignment_3_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cUpdateAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cUpdateAssignmentOrIncrementStmtParserRuleCall_3_7_0 = (RuleCall)cUpdateAssignment_3_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Assignment cStmtAssignment_3_9 = (Assignment)cGroup_3.eContents().get(9);
		private final RuleCall cStmtStmtParserRuleCall_3_9_0 = (RuleCall)cStmtAssignment_3_9.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCondStmtAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cIfKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cConditionAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cConditionExprParserRuleCall_4_4_0 = (RuleCall)cConditionAssignment_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cThenAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cThenStmtParserRuleCall_4_6_0 = (RuleCall)cThenAssignment_4_6.eContents().get(0);
		private final Group cGroup_4_7 = (Group)cGroup_4.eContents().get(7);
		private final Keyword cElseKeyword_4_7_0 = (Keyword)cGroup_4_7.eContents().get(0);
		private final Assignment cElseAssignment_4_7_1 = (Assignment)cGroup_4_7.eContents().get(1);
		private final RuleCall cElseStmtParserRuleCall_4_7_1_0 = (RuleCall)cElseAssignment_4_7_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSimpleStmtAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameSimpleStmtKeywordParserRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cReturnValueStmtAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cReturnKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cValueAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_6_2_0 = (RuleCall)cValueAssignment_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cCallExprParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cForAllStmtAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNameForAllFunctionParserRuleCall_8_1_0 = (RuleCall)cNameAssignment_8_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cNodeAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cNodeTIDENTIFIERTerminalRuleCall_8_3_0 = (RuleCall)cNodeAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cStmtAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cStmtStmtParserRuleCall_8_5_0 = (RuleCall)cStmtAssignment_8_5.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cFadnpStmtAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Alternatives cAlternatives_9_1 = (Alternatives)cGroup_9.eContents().get(1);
		private final Keyword cForall_distinct_node_pairKeyword_9_1_0 = (Keyword)cAlternatives_9_1.eContents().get(0);
		private final Keyword cFORALL_DISTINCT_NODE_PAIRKeyword_9_1_1 = (Keyword)cAlternatives_9_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cNode1Assignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cNode1TIDENTIFIERTerminalRuleCall_9_3_0 = (RuleCall)cNode1Assignment_9_3.eContents().get(0);
		private final Keyword cCommaKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Assignment cNode2Assignment_9_5 = (Assignment)cGroup_9.eContents().get(5);
		private final RuleCall cNode2TIDENTIFIERTerminalRuleCall_9_5_0 = (RuleCall)cNode2Assignment_9_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_6 = (Keyword)cGroup_9.eContents().get(6);
		private final Assignment cStmtAssignment_9_7 = (Assignment)cGroup_9.eContents().get(7);
		private final RuleCall cStmtStmtParserRuleCall_9_7_0 = (RuleCall)cStmtAssignment_9_7.eContents().get(0);
		
		//Stmt:
		//	{NestedStmt} "{" stmts+=Stmt* "}" | AssignmentStmt ";" | {WhileStmt} "while" "(" condition=Expr ")" stmt=Stmt |
		//	{ForStmt} "for" "(" (inits+=InitAssignmentStmt ("," inits+=InitAssignmentStmt)*)? ";" condition=Expr? ";"
		//	update=AssignmentOrIncrementStmt? ")" stmt=Stmt | {CondStmt} attrs+=Attr* "if" "(" condition=Expr ")" then=Stmt
		//	("else" else=Stmt)? | {SimpleStmt} name=SimpleStmtKeyword ";" | {ReturnValueStmt} "return" value=Expr ";" | CallExpr
		//	";" | {ForAllStmt} name=ForAllFunction "(" node=TIDENTIFIER ")" stmt=Stmt | {FadnpStmt} ("forall_distinct_node_pair" |
		//	"FORALL_DISTINCT_NODE_PAIR") "(" node1=TIDENTIFIER "," node2=TIDENTIFIER ")" stmt=Stmt;
		@Override public ParserRule getRule() { return rule; }

		//{NestedStmt} "{" stmts+=Stmt* "}" | AssignmentStmt ";" | {WhileStmt} "while" "(" condition=Expr ")" stmt=Stmt |
		//{ForStmt} "for" "(" (inits+=InitAssignmentStmt ("," inits+=InitAssignmentStmt)*)? ";" condition=Expr? ";"
		//update=AssignmentOrIncrementStmt? ")" stmt=Stmt | {CondStmt} attrs+=Attr* "if" "(" condition=Expr ")" then=Stmt ("else"
		//else=Stmt)? | {SimpleStmt} name=SimpleStmtKeyword ";" | {ReturnValueStmt} "return" value=Expr ";" | CallExpr ";" |
		//{ForAllStmt} name=ForAllFunction "(" node=TIDENTIFIER ")" stmt=Stmt | {FadnpStmt} ("forall_distinct_node_pair" |
		//"FORALL_DISTINCT_NODE_PAIR") "(" node1=TIDENTIFIER "," node2=TIDENTIFIER ")" stmt=Stmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NestedStmt} "{" stmts+=Stmt* "}"
		public Group getGroup_0() { return cGroup_0; }

		//{NestedStmt}
		public Action getNestedStmtAction_0_0() { return cNestedStmtAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//stmts+=Stmt*
		public Assignment getStmtsAssignment_0_2() { return cStmtsAssignment_0_2; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_0_2_0() { return cStmtsStmtParserRuleCall_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }

		//AssignmentStmt ";"
		public Group getGroup_1() { return cGroup_1; }

		//AssignmentStmt
		public RuleCall getAssignmentStmtParserRuleCall_1_0() { return cAssignmentStmtParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//{WhileStmt} "while" "(" condition=Expr ")" stmt=Stmt
		public Group getGroup_2() { return cGroup_2; }

		//{WhileStmt}
		public Action getWhileStmtAction_2_0() { return cWhileStmtAction_2_0; }

		//"while"
		public Keyword getWhileKeyword_2_1() { return cWhileKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//condition=Expr
		public Assignment getConditionAssignment_2_3() { return cConditionAssignment_2_3; }

		//Expr
		public RuleCall getConditionExprParserRuleCall_2_3_0() { return cConditionExprParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//stmt=Stmt
		public Assignment getStmtAssignment_2_5() { return cStmtAssignment_2_5; }

		//Stmt
		public RuleCall getStmtStmtParserRuleCall_2_5_0() { return cStmtStmtParserRuleCall_2_5_0; }

		//{ForStmt} "for" "(" (inits+=InitAssignmentStmt ("," inits+=InitAssignmentStmt)*)? ";" condition=Expr? ";"
		//update=AssignmentOrIncrementStmt? ")" stmt=Stmt
		public Group getGroup_3() { return cGroup_3; }

		//{ForStmt}
		public Action getForStmtAction_3_0() { return cForStmtAction_3_0; }

		//"for"
		public Keyword getForKeyword_3_1() { return cForKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//(inits+=InitAssignmentStmt ("," inits+=InitAssignmentStmt)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//inits+=InitAssignmentStmt
		public Assignment getInitsAssignment_3_3_0() { return cInitsAssignment_3_3_0; }

		//InitAssignmentStmt
		public RuleCall getInitsInitAssignmentStmtParserRuleCall_3_3_0_0() { return cInitsInitAssignmentStmtParserRuleCall_3_3_0_0; }

		//("," inits+=InitAssignmentStmt)*
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//","
		public Keyword getCommaKeyword_3_3_1_0() { return cCommaKeyword_3_3_1_0; }

		//inits+=InitAssignmentStmt
		public Assignment getInitsAssignment_3_3_1_1() { return cInitsAssignment_3_3_1_1; }

		//InitAssignmentStmt
		public RuleCall getInitsInitAssignmentStmtParserRuleCall_3_3_1_1_0() { return cInitsInitAssignmentStmtParserRuleCall_3_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }

		//condition=Expr?
		public Assignment getConditionAssignment_3_5() { return cConditionAssignment_3_5; }

		//Expr
		public RuleCall getConditionExprParserRuleCall_3_5_0() { return cConditionExprParserRuleCall_3_5_0; }

		//";"
		public Keyword getSemicolonKeyword_3_6() { return cSemicolonKeyword_3_6; }

		//update=AssignmentOrIncrementStmt?
		public Assignment getUpdateAssignment_3_7() { return cUpdateAssignment_3_7; }

		//AssignmentOrIncrementStmt
		public RuleCall getUpdateAssignmentOrIncrementStmtParserRuleCall_3_7_0() { return cUpdateAssignmentOrIncrementStmtParserRuleCall_3_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }

		//stmt=Stmt
		public Assignment getStmtAssignment_3_9() { return cStmtAssignment_3_9; }

		//Stmt
		public RuleCall getStmtStmtParserRuleCall_3_9_0() { return cStmtStmtParserRuleCall_3_9_0; }

		//{CondStmt} attrs+=Attr* "if" "(" condition=Expr ")" then=Stmt ("else" else=Stmt)?
		public Group getGroup_4() { return cGroup_4; }

		//{CondStmt}
		public Action getCondStmtAction_4_0() { return cCondStmtAction_4_0; }

		//attrs+=Attr*
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_4_1_0() { return cAttrsAttrParserRuleCall_4_1_0; }

		//"if"
		public Keyword getIfKeyword_4_2() { return cIfKeyword_4_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_3() { return cLeftParenthesisKeyword_4_3; }

		//condition=Expr
		public Assignment getConditionAssignment_4_4() { return cConditionAssignment_4_4; }

		//Expr
		public RuleCall getConditionExprParserRuleCall_4_4_0() { return cConditionExprParserRuleCall_4_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//then=Stmt
		public Assignment getThenAssignment_4_6() { return cThenAssignment_4_6; }

		//Stmt
		public RuleCall getThenStmtParserRuleCall_4_6_0() { return cThenStmtParserRuleCall_4_6_0; }

		//(=> "else" else=Stmt)?
		public Group getGroup_4_7() { return cGroup_4_7; }

		//=> "else"
		public Keyword getElseKeyword_4_7_0() { return cElseKeyword_4_7_0; }

		//else=Stmt
		public Assignment getElseAssignment_4_7_1() { return cElseAssignment_4_7_1; }

		//Stmt
		public RuleCall getElseStmtParserRuleCall_4_7_1_0() { return cElseStmtParserRuleCall_4_7_1_0; }

		//{SimpleStmt} name=SimpleStmtKeyword ";"
		public Group getGroup_5() { return cGroup_5; }

		//{SimpleStmt}
		public Action getSimpleStmtAction_5_0() { return cSimpleStmtAction_5_0; }

		//name=SimpleStmtKeyword
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//SimpleStmtKeyword
		public RuleCall getNameSimpleStmtKeywordParserRuleCall_5_1_0() { return cNameSimpleStmtKeywordParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//{ReturnValueStmt} "return" value=Expr ";"
		public Group getGroup_6() { return cGroup_6; }

		//{ReturnValueStmt}
		public Action getReturnValueStmtAction_6_0() { return cReturnValueStmtAction_6_0; }

		//"return"
		public Keyword getReturnKeyword_6_1() { return cReturnKeyword_6_1; }

		//value=Expr
		public Assignment getValueAssignment_6_2() { return cValueAssignment_6_2; }

		//Expr
		public RuleCall getValueExprParserRuleCall_6_2_0() { return cValueExprParserRuleCall_6_2_0; }

		//";"
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }

		//CallExpr ";"
		public Group getGroup_7() { return cGroup_7; }

		//CallExpr
		public RuleCall getCallExprParserRuleCall_7_0() { return cCallExprParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//{ForAllStmt} name=ForAllFunction "(" node=TIDENTIFIER ")" stmt=Stmt
		public Group getGroup_8() { return cGroup_8; }

		//{ForAllStmt}
		public Action getForAllStmtAction_8_0() { return cForAllStmtAction_8_0; }

		//name=ForAllFunction
		public Assignment getNameAssignment_8_1() { return cNameAssignment_8_1; }

		//ForAllFunction
		public RuleCall getNameForAllFunctionParserRuleCall_8_1_0() { return cNameForAllFunctionParserRuleCall_8_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//node=TIDENTIFIER
		public Assignment getNodeAssignment_8_3() { return cNodeAssignment_8_3; }

		//TIDENTIFIER
		public RuleCall getNodeTIDENTIFIERTerminalRuleCall_8_3_0() { return cNodeTIDENTIFIERTerminalRuleCall_8_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//stmt=Stmt
		public Assignment getStmtAssignment_8_5() { return cStmtAssignment_8_5; }

		//Stmt
		public RuleCall getStmtStmtParserRuleCall_8_5_0() { return cStmtStmtParserRuleCall_8_5_0; }

		//{FadnpStmt} ("forall_distinct_node_pair" | "FORALL_DISTINCT_NODE_PAIR") "(" node1=TIDENTIFIER "," node2=TIDENTIFIER ")"
		//stmt=Stmt
		public Group getGroup_9() { return cGroup_9; }

		//{FadnpStmt}
		public Action getFadnpStmtAction_9_0() { return cFadnpStmtAction_9_0; }

		//"forall_distinct_node_pair" | "FORALL_DISTINCT_NODE_PAIR"
		public Alternatives getAlternatives_9_1() { return cAlternatives_9_1; }

		//"forall_distinct_node_pair"
		public Keyword getForall_distinct_node_pairKeyword_9_1_0() { return cForall_distinct_node_pairKeyword_9_1_0; }

		//"FORALL_DISTINCT_NODE_PAIR"
		public Keyword getFORALL_DISTINCT_NODE_PAIRKeyword_9_1_1() { return cFORALL_DISTINCT_NODE_PAIRKeyword_9_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }

		//node1=TIDENTIFIER
		public Assignment getNode1Assignment_9_3() { return cNode1Assignment_9_3; }

		//TIDENTIFIER
		public RuleCall getNode1TIDENTIFIERTerminalRuleCall_9_3_0() { return cNode1TIDENTIFIERTerminalRuleCall_9_3_0; }

		//","
		public Keyword getCommaKeyword_9_4() { return cCommaKeyword_9_4; }

		//node2=TIDENTIFIER
		public Assignment getNode2Assignment_9_5() { return cNode2Assignment_9_5; }

		//TIDENTIFIER
		public RuleCall getNode2TIDENTIFIERTerminalRuleCall_9_5_0() { return cNode2TIDENTIFIERTerminalRuleCall_9_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_6() { return cRightParenthesisKeyword_9_6; }

		//stmt=Stmt
		public Assignment getStmtAssignment_9_7() { return cStmtAssignment_9_7; }

		//Stmt
		public RuleCall getStmtStmtParserRuleCall_9_7_0() { return cStmtStmtParserRuleCall_9_7_0; }
	}

	public class AssignmentOrIncrementStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOrIncrementStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncrementStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssignmentOrIncrementStmt:
		//	AssignmentStmt | IncrementStmt;
		@Override public ParserRule getRule() { return rule; }

		//AssignmentStmt | IncrementStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignmentStmt
		public RuleCall getAssignmentStmtParserRuleCall_0() { return cAssignmentStmtParserRuleCall_0; }

		//IncrementStmt
		public RuleCall getIncrementStmtParserRuleCall_1() { return cIncrementStmtParserRuleCall_1; }
	}

	public class IncrementStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncrementStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarTIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarTIDENTIFIERTerminalRuleCall_1_1_0 = (RuleCall)cVarAssignment_1_1.eContents().get(0);
		
		//IncrementStmt:
		//	var=TIDENTIFIER "++" | "++" var=TIDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//var=TIDENTIFIER "++" | "++" var=TIDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//var=TIDENTIFIER "++"
		public Group getGroup_0() { return cGroup_0; }

		//var=TIDENTIFIER
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//TIDENTIFIER
		public RuleCall getVarTIDENTIFIERTerminalRuleCall_0_0_0() { return cVarTIDENTIFIERTerminalRuleCall_0_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0_1() { return cPlusSignPlusSignKeyword_0_1; }

		//"++" var=TIDENTIFIER
		public Group getGroup_1() { return cGroup_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }

		//var=TIDENTIFIER
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//TIDENTIFIER
		public RuleCall getVarTIDENTIFIERTerminalRuleCall_1_1_0() { return cVarTIDENTIFIERTerminalRuleCall_1_1_0; }
	}

	public class InitAssignmentStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitAssignmentStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLValParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExprParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//InitAssignmentStmt:
		//	type=Type? variable=LVal "=" value=Expr;
		@Override public ParserRule getRule() { return rule; }

		//type=Type? variable=LVal "=" value=Expr
		public Group getGroup() { return cGroup; }

		//type=Type?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//variable=LVal
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//LVal
		public RuleCall getVariableLValParserRuleCall_1_0() { return cVariableLValParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expr
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expr
		public RuleCall getValueExprParserRuleCall_3_0() { return cValueExprParserRuleCall_3_0; }
	}

	public class AssignmentStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableLValParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AssignmentStmt:
		//	variable=LVal "=" value=Expr;
		@Override public ParserRule getRule() { return rule; }

		//variable=LVal "=" value=Expr
		public Group getGroup() { return cGroup; }

		//variable=LVal
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//LVal
		public RuleCall getVariableLValParserRuleCall_0_0() { return cVariableLValParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expr
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expr
		public RuleCall getValueExprParserRuleCall_2_0() { return cValueExprParserRuleCall_2_0; }
	}

	public class LValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExprParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAtAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAtExprParserRuleCall_2_1_0 = (RuleCall)cAtAssignment_2_1.eContents().get(0);
		
		//LVal:
		//	name=TIDENTIFIER ("[" indices+=Expr "]")* ("@" at=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//name=TIDENTIFIER ("[" indices+=Expr "]")* ("@" at=Expr)?
		public Group getGroup() { return cGroup; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_0() { return cNameTIDENTIFIERTerminalRuleCall_0_0; }

		//("[" indices+=Expr "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indices+=Expr
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }

		//Expr
		public RuleCall getIndicesExprParserRuleCall_1_1_0() { return cIndicesExprParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//("@" at=Expr)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//at=Expr
		public Assignment getAtAssignment_2_1() { return cAtAssignment_2_1; }

		//Expr
		public RuleCall getAtExprParserRuleCall_2_1_0() { return cAtExprParserRuleCall_2_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cTernaryExprConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cThenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThenExprParserRuleCall_1_1_0 = (RuleCall)cThenAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElseAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElseExprParserRuleCall_1_3_0 = (RuleCall)cElseAssignment_1_3.eContents().get(0);
		
		//Expr:
		//	OrExpr (=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({TernaryExpr.condition=current} "?")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{TernaryExpr.condition=current} "?"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{TernaryExpr.condition=current}
		public Action getTernaryExprConditionAction_1_0_0_0() { return cTernaryExprConditionAction_1_0_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }

		//then=Expr
		public Assignment getThenAssignment_1_1() { return cThenAssignment_1_1; }

		//Expr
		public RuleCall getThenExprParserRuleCall_1_1_0() { return cThenExprParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//else=Expr
		public Assignment getElseAssignment_1_3() { return cElseAssignment_1_3; }

		//Expr
		public RuleCall getElseExprParserRuleCall_1_3_0() { return cElseExprParserRuleCall_1_3_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOrExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr (=> ({OrExpr.left=current} "||") right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({OrExpr.left=current} "||") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({OrExpr.left=current} "||") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({OrExpr.left=current} "||")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OrExpr.left=current} "||"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{OrExpr.left=current}
		public Action getOrExprLeftAction_1_0_0_0() { return cOrExprLeftAction_1_0_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_0_1() { return cVerticalLineVerticalLineKeyword_1_0_0_1; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAndExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseOrExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns Expr:
		//	BitwiseOrExpr (=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//BitwiseOrExpr (=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*
		public Group getGroup() { return cGroup; }

		//BitwiseOrExpr
		public RuleCall getBitwiseOrExprParserRuleCall_0() { return cBitwiseOrExprParserRuleCall_0; }

		//(=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({AndExpr.left=current} "&&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AndExpr.left=current} "&&"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AndExpr.left=current}
		public Action getAndExprLeftAction_1_0_0_0() { return cAndExprLeftAction_1_0_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_0_1() { return cAmpersandAmpersandKeyword_1_0_0_1; }

		//right=BitwiseOrExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitwiseOrExpr
		public RuleCall getRightBitwiseOrExprParserRuleCall_1_1_0() { return cRightBitwiseOrExprParserRuleCall_1_1_0; }
	}

	public class BitwiseOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBitwiseOrExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightXorExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseOrExpr returns Expr:
		//	XorExpr (=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//XorExpr (=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*
		public Group getGroup() { return cGroup; }

		//XorExpr
		public RuleCall getXorExprParserRuleCall_0() { return cXorExprParserRuleCall_0; }

		//(=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BitwiseOrExpr.left=current} "|")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BitwiseOrExpr.left=current} "|"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BitwiseOrExpr.left=current}
		public Action getBitwiseOrExprLeftAction_1_0_0_0() { return cBitwiseOrExprLeftAction_1_0_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_0_1() { return cVerticalLineKeyword_1_0_0_1; }

		//right=XorExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//XorExpr
		public RuleCall getRightXorExprParserRuleCall_1_1_0() { return cRightXorExprParserRuleCall_1_1_0; }
	}

	public class XorExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XorExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXorExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//XorExpr returns Expr:
		//	BitwiseAndExpr (=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//BitwiseAndExpr (=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*
		public Group getGroup() { return cGroup; }

		//BitwiseAndExpr
		public RuleCall getBitwiseAndExprParserRuleCall_0() { return cBitwiseAndExprParserRuleCall_0; }

		//(=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XorExpr.left=current} "^")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XorExpr.left=current} "^"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XorExpr.left=current}
		public Action getXorExprLeftAction_1_0_0_0() { return cXorExprLeftAction_1_0_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_0_1() { return cCircumflexAccentKeyword_1_0_0_1; }

		//right=BitwiseAndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitwiseAndExpr
		public RuleCall getRightBitwiseAndExprParserRuleCall_1_1_0() { return cRightBitwiseAndExprParserRuleCall_1_1_0; }
	}

	public class BitwiseAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBitwiseAndExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualityExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseAndExpr returns Expr:
		//	EqualityExpr (=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//EqualityExpr (=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*
		public Group getGroup() { return cGroup; }

		//EqualityExpr
		public RuleCall getEqualityExprParserRuleCall_0() { return cEqualityExprParserRuleCall_0; }

		//(=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BitwiseAndExpr.left=current} "&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BitwiseAndExpr.left=current} "&"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BitwiseAndExpr.left=current}
		public Action getBitwiseAndExprLeftAction_1_0_0_0() { return cBitwiseAndExprLeftAction_1_0_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_0_1() { return cAmpersandKeyword_1_0_0_1; }

		//right=EqualityExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//EqualityExpr
		public RuleCall getRightEqualityExprParserRuleCall_1_1_0() { return cRightEqualityExprParserRuleCall_1_1_0; }
	}

	public class EqualityExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cEqualityExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualityExpr returns Expr:
		//	CompareExpr (=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//CompareExpr (=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*
		public Group getGroup() { return cGroup; }

		//CompareExpr
		public RuleCall getCompareExprParserRuleCall_0() { return cCompareExprParserRuleCall_0; }

		//(=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({EqualityExpr.left=current} operator=EqualityOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{EqualityExpr.left=current} operator=EqualityOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{EqualityExpr.left=current}
		public Action getEqualityExprLeftAction_1_0_0_0() { return cEqualityExprLeftAction_1_0_0_0; }

		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0; }

		//right=CompareExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//CompareExpr
		public RuleCall getRightCompareExprParserRuleCall_1_1_0() { return cRightCompareExprParserRuleCall_1_1_0; }
	}

	public class CompareExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCompareExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorCompareOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightShiftExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareExpr returns Expr:
		//	ShiftExpr (=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//ShiftExpr (=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*
		public Group getGroup() { return cGroup; }

		//ShiftExpr
		public RuleCall getShiftExprParserRuleCall_0() { return cShiftExprParserRuleCall_0; }

		//(=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({CompareExpr.left=current} operator=CompareOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{CompareExpr.left=current} operator=CompareOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{CompareExpr.left=current}
		public Action getCompareExprLeftAction_1_0_0_0() { return cCompareExprLeftAction_1_0_0_0; }

		//operator=CompareOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//CompareOperator
		public RuleCall getOperatorCompareOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorCompareOperatorEnumRuleCall_1_0_0_1_0; }

		//right=ShiftExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ShiftExpr
		public RuleCall getRightShiftExprParserRuleCall_1_1_0() { return cRightShiftExprParserRuleCall_1_1_0; }
	}

	public class ShiftExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cShiftExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorShiftOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditiveExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ShiftExpr returns Expr:
		//	AdditiveExpr (=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpr (=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpr
		public RuleCall getAdditiveExprParserRuleCall_0() { return cAdditiveExprParserRuleCall_0; }

		//(=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ShiftExpr.left=current} operator=ShiftOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ShiftExpr.left=current} operator=ShiftOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ShiftExpr.left=current}
		public Action getShiftExprLeftAction_1_0_0_0() { return cShiftExprLeftAction_1_0_0_0; }

		//operator=ShiftOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//ShiftOperator
		public RuleCall getOperatorShiftOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorShiftOperatorEnumRuleCall_1_0_0_1_0; }

		//right=AdditiveExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AdditiveExpr
		public RuleCall getRightAdditiveExprParserRuleCall_1_1_0() { return cRightAdditiveExprParserRuleCall_1_1_0; }
	}

	public class AdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAdditiveExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpr returns Expr:
		//	MultiplicativeExpr (=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpr (=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpr
		public RuleCall getMultiplicativeExprParserRuleCall_0() { return cMultiplicativeExprParserRuleCall_0; }

		//(=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({AdditiveExpr.left=current} operator=AdditiveOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AdditiveExpr.left=current} operator=AdditiveOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AdditiveExpr.left=current}
		public Action getAdditiveExprLeftAction_1_0_0_0() { return cAdditiveExprLeftAction_1_0_0_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0; }

		//right=MultiplicativeExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicativeExpr
		public RuleCall getRightMultiplicativeExprParserRuleCall_1_1_0() { return cRightMultiplicativeExprParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cMultiplicativeExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTerminalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpr returns Expr:
		//	TerminalExpr (=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//TerminalExpr (=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*
		public Group getGroup() { return cGroup; }

		//TerminalExpr
		public RuleCall getTerminalExprParserRuleCall_0() { return cTerminalExprParserRuleCall_0; }

		//(=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{MultiplicativeExpr.left=current} operator=MultiplicativeOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{MultiplicativeExpr.left=current}
		public Action getMultiplicativeExprLeftAction_1_0_0_0() { return cMultiplicativeExprLeftAction_1_0_0_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0; }

		//right=TerminalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TerminalExpr
		public RuleCall getRightTerminalExprParserRuleCall_1_1_0() { return cRightTerminalExprParserRuleCall_1_1_0; }
	}

	public class TerminalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLValParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIdExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIdKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDoubleExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStringExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNodeNumExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cUnaryExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cOperatorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_6_1_0 = (RuleCall)cOperatorAssignment_6_1.eContents().get(0);
		private final Assignment cOperandAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOperandExprParserRuleCall_6_2_0 = (RuleCall)cOperandAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBuiltInExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cFunctionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFunctionBuiltInFunctionParserRuleCall_7_1_0 = (RuleCall)cFunctionAssignment_7_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cFirstArgAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cFirstArgTIDENTIFIERTerminalRuleCall_7_3_0 = (RuleCall)cFirstArgAssignment_7_3.eContents().get(0);
		private final Keyword cCommaKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cSecondArgAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cSecondArgExprParserRuleCall_7_5_0 = (RuleCall)cSecondArgAssignment_7_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final RuleCall cCallExprParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cParenthesizedExprAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExprAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_9_2_0 = (RuleCall)cExprAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//TerminalExpr returns Expr:
		//	LVal | {IdExpr} "id" | {IntExpr} value=INT | {DoubleExpr} value=Double | {StringExpr} value=STRING | {NodeNumExpr}
		//	"#N" | {UnaryExpr} operator=UnaryOperator operand=Expr | {BuiltInExpr} function=BuiltInFunction "("
		//	firstArg=TIDENTIFIER "," secondArg=Expr ")" | CallExpr | {ParenthesizedExpr} "(" expr=Expr ")";
		@Override public ParserRule getRule() { return rule; }

		//LVal | {IdExpr} "id" | {IntExpr} value=INT | {DoubleExpr} value=Double | {StringExpr} value=STRING | {NodeNumExpr} "#N"
		//| {UnaryExpr} operator=UnaryOperator operand=Expr | {BuiltInExpr} function=BuiltInFunction "(" firstArg=TIDENTIFIER ","
		//secondArg=Expr ")" | CallExpr | {ParenthesizedExpr} "(" expr=Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LVal
		public RuleCall getLValParserRuleCall_0() { return cLValParserRuleCall_0; }

		//{IdExpr} "id"
		public Group getGroup_1() { return cGroup_1; }

		//{IdExpr}
		public Action getIdExprAction_1_0() { return cIdExprAction_1_0; }

		//"id"
		public Keyword getIdKeyword_1_1() { return cIdKeyword_1_1; }

		//{IntExpr} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntExpr}
		public Action getIntExprAction_2_0() { return cIntExprAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//{DoubleExpr} value=Double
		public Group getGroup_3() { return cGroup_3; }

		//{DoubleExpr}
		public Action getDoubleExprAction_3_0() { return cDoubleExprAction_3_0; }

		//value=Double
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_3_1_0() { return cValueDoubleParserRuleCall_3_1_0; }

		//{StringExpr} value=STRING
		public Group getGroup_4() { return cGroup_4; }

		//{StringExpr}
		public Action getStringExprAction_4_0() { return cStringExprAction_4_0; }

		//value=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }

		//{NodeNumExpr} "#N"
		public Group getGroup_5() { return cGroup_5; }

		//{NodeNumExpr}
		public Action getNodeNumExprAction_5_0() { return cNodeNumExprAction_5_0; }

		//"#N"
		public Keyword getNKeyword_5_1() { return cNKeyword_5_1; }

		//{UnaryExpr} operator=UnaryOperator operand=Expr
		public Group getGroup_6() { return cGroup_6; }

		//{UnaryExpr}
		public Action getUnaryExprAction_6_0() { return cUnaryExprAction_6_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_6_1() { return cOperatorAssignment_6_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_6_1_0() { return cOperatorUnaryOperatorEnumRuleCall_6_1_0; }

		//operand=Expr
		public Assignment getOperandAssignment_6_2() { return cOperandAssignment_6_2; }

		//Expr
		public RuleCall getOperandExprParserRuleCall_6_2_0() { return cOperandExprParserRuleCall_6_2_0; }

		//{BuiltInExpr} function=BuiltInFunction "(" firstArg=TIDENTIFIER "," secondArg=Expr ")"
		public Group getGroup_7() { return cGroup_7; }

		//{BuiltInExpr}
		public Action getBuiltInExprAction_7_0() { return cBuiltInExprAction_7_0; }

		//function=BuiltInFunction
		public Assignment getFunctionAssignment_7_1() { return cFunctionAssignment_7_1; }

		//BuiltInFunction
		public RuleCall getFunctionBuiltInFunctionParserRuleCall_7_1_0() { return cFunctionBuiltInFunctionParserRuleCall_7_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }

		//firstArg=TIDENTIFIER
		public Assignment getFirstArgAssignment_7_3() { return cFirstArgAssignment_7_3; }

		//TIDENTIFIER
		public RuleCall getFirstArgTIDENTIFIERTerminalRuleCall_7_3_0() { return cFirstArgTIDENTIFIERTerminalRuleCall_7_3_0; }

		//","
		public Keyword getCommaKeyword_7_4() { return cCommaKeyword_7_4; }

		//secondArg=Expr
		public Assignment getSecondArgAssignment_7_5() { return cSecondArgAssignment_7_5; }

		//Expr
		public RuleCall getSecondArgExprParserRuleCall_7_5_0() { return cSecondArgExprParserRuleCall_7_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_6() { return cRightParenthesisKeyword_7_6; }

		//CallExpr
		public RuleCall getCallExprParserRuleCall_8() { return cCallExprParserRuleCall_8; }

		//{ParenthesizedExpr} "(" expr=Expr ")"
		public Group getGroup_9() { return cGroup_9; }

		//{ParenthesizedExpr}
		public Action getParenthesizedExprAction_9_0() { return cParenthesizedExprAction_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//expr=Expr
		public Assignment getExprAssignment_9_2() { return cExprAssignment_9_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_9_2_0() { return cExprExprParserRuleCall_9_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
	}

	public class CallExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespacesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNamespacesTIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cNamespacesAssignment_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommercialAtKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAtAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAtExprParserRuleCall_5_1_0 = (RuleCall)cAtAssignment_5_1.eContents().get(0);
		
		//CallExpr:
		//	(namespaces+=TIDENTIFIER "::")* name=TIDENTIFIER "(" (args+=Expr ("," args+=Expr)*)? ")" ("@" at=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//(namespaces+=TIDENTIFIER "::")* name=TIDENTIFIER "(" (args+=Expr ("," args+=Expr)*)? ")" ("@" at=Expr)?
		public Group getGroup() { return cGroup; }

		//(namespaces+=TIDENTIFIER "::")*
		public Group getGroup_0() { return cGroup_0; }

		//namespaces+=TIDENTIFIER
		public Assignment getNamespacesAssignment_0_0() { return cNamespacesAssignment_0_0; }

		//TIDENTIFIER
		public RuleCall getNamespacesTIDENTIFIERTerminalRuleCall_0_0_0() { return cNamespacesTIDENTIFIERTerminalRuleCall_0_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_0() { return cNameTIDENTIFIERTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Expr
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_3_0_0() { return cArgsExprParserRuleCall_3_0_0; }

		//("," args+=Expr)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_3_1_1_0() { return cArgsExprParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("@" at=Expr)?
		public Group getGroup_5() { return cGroup_5; }

		//"@"
		public Keyword getCommercialAtKeyword_5_0() { return cCommercialAtKeyword_5_0; }

		//at=Expr
		public Assignment getAtAssignment_5_1() { return cAtAssignment_5_1; }

		//Expr
		public RuleCall getAtExprParserRuleCall_5_1_0() { return cAtExprParserRuleCall_5_1_0; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Sign returns SignEnum:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class SimpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword c_BoolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVoidKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCharKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//SimpType returns SimpTypeEnum:
		//	"bool" | "_Bool" | "int" | "double" | "void" | "char";
		@Override public ParserRule getRule() { return rule; }

		//"bool" | "_Bool" | "int" | "double" | "void" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//"_Bool"
		public Keyword get_BoolKeyword_1() { return c_BoolKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }

		//"void"
		public Keyword getVoidKeyword_4() { return cVoidKeyword_4; }

		//"char"
		public Keyword getCharKeyword_5() { return cCharKeyword_5; }
	}

	public class SignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSignedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnsignedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Signed returns SignedEnum:
		//	"signed" | "unsigned";
		@Override public ParserRule getRule() { return rule; }

		//"signed" | "unsigned"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"signed"
		public Keyword getSignedKeyword_0() { return cSignedKeyword_0; }

		//"unsigned"
		public Keyword getUnsignedKeyword_1() { return cUnsignedKeyword_1; }
	}

	public class SimpleStmtKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleStmtKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cReturnKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SimpleStmtKeyword returns SimpleStmtKeywordEnum:
		//	"break" | "continue" | "return";
		@Override public ParserRule getRule() { return rule; }

		//"break" | "continue" | "return"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//"return"
		public Keyword getReturnKeyword_2() { return cReturnKeyword_2; }
	}

	public class ForAllFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAllFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cForall_nodeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFORALL_NODEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cForall_otherKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFORALL_OTHERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cForall_other_lowerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFORALL_OTHER_LOWERKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cForall_other_higherKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFORALL_OTHER_HIGHERKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//ForAllFunction returns ForAllFunctionEnum:
		//	"forall_node" | "FORALL_NODE" | "forall_other" | "FORALL_OTHER" | "forall_other_lower" | "FORALL_OTHER_LOWER" |
		//	"forall_other_higher" | "FORALL_OTHER_HIGHER";
		@Override public ParserRule getRule() { return rule; }

		//"forall_node" | "FORALL_NODE" | "forall_other" | "FORALL_OTHER" | "forall_other_lower" | "FORALL_OTHER_LOWER" |
		//"forall_other_higher" | "FORALL_OTHER_HIGHER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"forall_node"
		public Keyword getForall_nodeKeyword_0() { return cForall_nodeKeyword_0; }

		//"FORALL_NODE"
		public Keyword getFORALL_NODEKeyword_1() { return cFORALL_NODEKeyword_1; }

		//"forall_other"
		public Keyword getForall_otherKeyword_2() { return cForall_otherKeyword_2; }

		//"FORALL_OTHER"
		public Keyword getFORALL_OTHERKeyword_3() { return cFORALL_OTHERKeyword_3; }

		//"forall_other_lower"
		public Keyword getForall_other_lowerKeyword_4() { return cForall_other_lowerKeyword_4; }

		//"FORALL_OTHER_LOWER"
		public Keyword getFORALL_OTHER_LOWERKeyword_5() { return cFORALL_OTHER_LOWERKeyword_5; }

		//"forall_other_higher"
		public Keyword getForall_other_higherKeyword_6() { return cForall_other_higherKeyword_6; }

		//"FORALL_OTHER_HIGHER"
		public Keyword getFORALL_OTHER_HIGHERKeyword_7() { return cFORALL_OTHER_HIGHERKeyword_7; }
	}

	public class NodeVarScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeVarScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGLOBALKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLocalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLOCALKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGroupKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//NodeVarScope returns NodeVarScopeEnum:
		//	"global" | "GLOBAL" | "local" | "LOCAL" | "group";
		@Override public ParserRule getRule() { return rule; }

		//"global" | "GLOBAL" | "local" | "LOCAL" | "group"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//"GLOBAL"
		public Keyword getGLOBALKeyword_1() { return cGLOBALKeyword_1; }

		//"local"
		public Keyword getLocalKeyword_2() { return cLocalKeyword_2; }

		//"LOCAL"
		public Keyword getLOCALKeyword_3() { return cLOCALKeyword_3; }

		//"group"
		public Keyword getGroupKeyword_4() { return cGroupKeyword_4; }
	}

	public class BuiltInFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExists_otherKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEXISTS_OTHERKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExists_higherKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEXISTS_HIGHERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExists_lowerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEXISTS_LOWERKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BuiltInFunction returns BuiltInFunctionEnum:
		//	"exists_other" | "EXISTS_OTHER" | "exists_higher" | "EXISTS_HIGHER" | "exists_lower" | "EXISTS_LOWER";
		@Override public ParserRule getRule() { return rule; }

		//"exists_other" | "EXISTS_OTHER" | "exists_higher" | "EXISTS_HIGHER" | "exists_lower" | "EXISTS_LOWER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"exists_other"
		public Keyword getExists_otherKeyword_0() { return cExists_otherKeyword_0; }

		//"EXISTS_OTHER"
		public Keyword getEXISTS_OTHERKeyword_1() { return cEXISTS_OTHERKeyword_1; }

		//"exists_higher"
		public Keyword getExists_higherKeyword_2() { return cExists_higherKeyword_2; }

		//"EXISTS_HIGHER"
		public Keyword getEXISTS_HIGHERKeyword_3() { return cEXISTS_HIGHERKeyword_3; }

		//"exists_lower"
		public Keyword getExists_lowerKeyword_4() { return cExists_lowerKeyword_4; }

		//"EXISTS_LOWER"
		public Keyword getEXISTS_LOWERKeyword_5() { return cEXISTS_LOWERKeyword_5; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNANKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//	"NAN" | INT "." INT?;
		@Override public ParserRule getRule() { return rule; }

		//"NAN" | INT "." INT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NAN"
		public Keyword getNANKeyword_0() { return cNANKeyword_0; }

		//INT "." INT?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	
	
	public class SignEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SignEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnsetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnsetUnsetKeyword_0_0 = (Keyword)cUnsetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SignEnum:
		//	unset | PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//unset | PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//unset
		public EnumLiteralDeclaration getUnsetEnumLiteralDeclaration_0() { return cUnsetEnumLiteralDeclaration_0; }

		//"unset"
		public Keyword getUnsetUnsetKeyword_0_0() { return cUnsetUnsetKeyword_0_0; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
	}

	public class SimpTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimpTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoolBoolKeyword_0_0 = (Keyword)cBoolEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDoubleDoubleKeyword_2_0 = (Keyword)cDoubleEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cVoidVoidKeyword_3_0 = (Keyword)cVoidEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCharCharKeyword_4_0 = (Keyword)cCharEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SimpTypeEnum:
		//	bool | int | double | void | char;
		public EnumRule getRule() { return rule; }

		//bool | int | double | void | char
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_0() { return cBoolEnumLiteralDeclaration_0; }

		//"bool"
		public Keyword getBoolBoolKeyword_0_0() { return cBoolBoolKeyword_0_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }

		//"int"
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_2() { return cDoubleEnumLiteralDeclaration_2; }

		//"double"
		public Keyword getDoubleDoubleKeyword_2_0() { return cDoubleDoubleKeyword_2_0; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_3() { return cVoidEnumLiteralDeclaration_3; }

		//"void"
		public Keyword getVoidVoidKeyword_3_0() { return cVoidVoidKeyword_3_0; }

		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_4() { return cCharEnumLiteralDeclaration_4; }

		//"char"
		public Keyword getCharCharKeyword_4_0() { return cCharCharKeyword_4_0; }
	}

	public class SignedEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SignedEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnsetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnsetUnsetKeyword_0_0 = (Keyword)cUnsetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSignedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSignedSignedKeyword_1_0 = (Keyword)cSignedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnsignedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnsignedUnsignedKeyword_2_0 = (Keyword)cUnsignedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SignedEnum:
		//	unset | signed | unsigned;
		public EnumRule getRule() { return rule; }

		//unset | signed | unsigned
		public Alternatives getAlternatives() { return cAlternatives; }

		//unset
		public EnumLiteralDeclaration getUnsetEnumLiteralDeclaration_0() { return cUnsetEnumLiteralDeclaration_0; }

		//"unset"
		public Keyword getUnsetUnsetKeyword_0_0() { return cUnsetUnsetKeyword_0_0; }

		//signed
		public EnumLiteralDeclaration getSignedEnumLiteralDeclaration_1() { return cSignedEnumLiteralDeclaration_1; }

		//"signed"
		public Keyword getSignedSignedKeyword_1_0() { return cSignedSignedKeyword_1_0; }

		//unsigned
		public EnumLiteralDeclaration getUnsignedEnumLiteralDeclaration_2() { return cUnsignedEnumLiteralDeclaration_2; }

		//"unsigned"
		public Keyword getUnsignedUnsignedKeyword_2_0() { return cUnsignedUnsignedKeyword_2_0; }
	}

	public class SimpleStmtKeywordEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleStmtKeywordEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBreakEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBreakBreakKeyword_0_0 = (Keyword)cBreakEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContinueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContinueContinueKeyword_1_0 = (Keyword)cContinueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cReturnReturnKeyword_2_0 = (Keyword)cReturnEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SimpleStmtKeywordEnum:
		//	break | continue | return;
		public EnumRule getRule() { return rule; }

		//break | continue | return
		public Alternatives getAlternatives() { return cAlternatives; }

		//break
		public EnumLiteralDeclaration getBreakEnumLiteralDeclaration_0() { return cBreakEnumLiteralDeclaration_0; }

		//"break"
		public Keyword getBreakBreakKeyword_0_0() { return cBreakBreakKeyword_0_0; }

		//continue
		public EnumLiteralDeclaration getContinueEnumLiteralDeclaration_1() { return cContinueEnumLiteralDeclaration_1; }

		//"continue"
		public Keyword getContinueContinueKeyword_1_0() { return cContinueContinueKeyword_1_0; }

		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_2() { return cReturnEnumLiteralDeclaration_2; }

		//"return"
		public Keyword getReturnReturnKeyword_2_0() { return cReturnReturnKeyword_2_0; }
	}

	public class ForAllFunctionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ForAllFunctionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForall_nodeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForall_nodeForall_nodeKeyword_0_0 = (Keyword)cForall_nodeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cForall_otherEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cForall_otherForall_otherKeyword_1_0 = (Keyword)cForall_otherEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cForall_other_lowerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cForall_other_lowerForall_other_lowerKeyword_2_0 = (Keyword)cForall_other_lowerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cForall_other_higherEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cForall_other_higherForall_other_higherKeyword_3_0 = (Keyword)cForall_other_higherEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ForAllFunctionEnum:
		//	forall_node | forall_other | forall_other_lower | forall_other_higher;
		public EnumRule getRule() { return rule; }

		//forall_node | forall_other | forall_other_lower | forall_other_higher
		public Alternatives getAlternatives() { return cAlternatives; }

		//forall_node
		public EnumLiteralDeclaration getForall_nodeEnumLiteralDeclaration_0() { return cForall_nodeEnumLiteralDeclaration_0; }

		//"forall_node"
		public Keyword getForall_nodeForall_nodeKeyword_0_0() { return cForall_nodeForall_nodeKeyword_0_0; }

		//forall_other
		public EnumLiteralDeclaration getForall_otherEnumLiteralDeclaration_1() { return cForall_otherEnumLiteralDeclaration_1; }

		//"forall_other"
		public Keyword getForall_otherForall_otherKeyword_1_0() { return cForall_otherForall_otherKeyword_1_0; }

		//forall_other_lower
		public EnumLiteralDeclaration getForall_other_lowerEnumLiteralDeclaration_2() { return cForall_other_lowerEnumLiteralDeclaration_2; }

		//"forall_other_lower"
		public Keyword getForall_other_lowerForall_other_lowerKeyword_2_0() { return cForall_other_lowerForall_other_lowerKeyword_2_0; }

		//forall_other_higher
		public EnumLiteralDeclaration getForall_other_higherEnumLiteralDeclaration_3() { return cForall_other_higherEnumLiteralDeclaration_3; }

		//"forall_other_higher"
		public Keyword getForall_other_higherForall_other_higherKeyword_3_0() { return cForall_other_higherForall_other_higherKeyword_3_0; }
	}

	public class NodeVarScopeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NodeVarScopeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGlobalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGlobalGlobalKeyword_0_0 = (Keyword)cGlobalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLocalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLocalLocalKeyword_1_0 = (Keyword)cLocalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGroupEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGroupGroupKeyword_2_0 = (Keyword)cGroupEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NodeVarScopeEnum:
		//	global | local | group;
		public EnumRule getRule() { return rule; }

		//global | local | group
		public Alternatives getAlternatives() { return cAlternatives; }

		//global
		public EnumLiteralDeclaration getGlobalEnumLiteralDeclaration_0() { return cGlobalEnumLiteralDeclaration_0; }

		//"global"
		public Keyword getGlobalGlobalKeyword_0_0() { return cGlobalGlobalKeyword_0_0; }

		//local
		public EnumLiteralDeclaration getLocalEnumLiteralDeclaration_1() { return cLocalEnumLiteralDeclaration_1; }

		//"local"
		public Keyword getLocalLocalKeyword_1_0() { return cLocalLocalKeyword_1_0; }

		//group
		public EnumLiteralDeclaration getGroupEnumLiteralDeclaration_2() { return cGroupEnumLiteralDeclaration_2; }

		//"group"
		public Keyword getGroupGroupKeyword_2_0() { return cGroupGroupKeyword_2_0; }
	}

	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator:
		//	EQUAL="==" | NOT_EQUAL="!=";
		public EnumRule getRule() { return rule; }

		//EQUAL="==" | NOT_EQUAL="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }

		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0; }
	}

	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERGreaterThanSignKeyword_2_0 = (Keyword)cGREATEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompareOperator:
		//	LESS="<" | LESS_EQUAL="<=" | GREATER=">" | GREATER_EQUAL=">=";
		public EnumRule getRule() { return rule; }

		//LESS="<" | LESS_EQUAL="<=" | GREATER=">" | GREATER_EQUAL=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }

		//LESS_EQUAL="<="
		public EnumLiteralDeclaration getLESS_EQUALEnumLiteralDeclaration_1() { return cLESS_EQUALEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLESS_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_EQUALLessThanSignEqualsSignKeyword_1_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_2() { return cGREATEREnumLiteralDeclaration_2; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_2_0() { return cGREATERGreaterThanSignKeyword_2_0; }

		//GREATER_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_3() { return cGREATER_EQUALEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0; }
	}

	public class ShiftOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOperator:
		//	LEFT="<<" | RIGHT=">>";
		public EnumRule getRule() { return rule; }

		//LEFT="<<" | RIGHT=">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFT="<<"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }

		//"<<"
		public Keyword getLEFTLessThanSignLessThanSignKeyword_0_0() { return cLEFTLessThanSignLessThanSignKeyword_0_0; }

		//RIGHT=">>"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }

		//">>"
		public Keyword getRIGHTGreaterThanSignGreaterThanSignKeyword_1_0() { return cRIGHTGreaterThanSignGreaterThanSignKeyword_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	ADD="+" | SUBTRACT="-";
		public EnumRule getRule() { return rule; }

		//ADD="+" | SUBTRACT="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//SUBTRACT="-"
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODULUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODULUSPercentSignKeyword_2_0 = (Keyword)cMODULUSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	MULTIPLY="*" | DIVIDE="/" | MODULUS="%";
		public EnumRule getRule() { return rule; }

		//MULTIPLY="*" | DIVIDE="/" | MODULUS="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MULTIPLY="*"
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }

		//DIVIDE="/"
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }

		//MODULUS="%"
		public EnumLiteralDeclaration getMODULUSEnumLiteralDeclaration_2() { return cMODULUSEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getMODULUSPercentSignKeyword_2_0() { return cMODULUSPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUSHyphenMinusKeyword_0_0 = (Keyword)cMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_NOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOGICAL_NOTExclamationMarkKeyword_2_0 = (Keyword)cLOGICAL_NOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBITWISE_NOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBITWISE_NOTTildeKeyword_3_0 = (Keyword)cBITWISE_NOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINCREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINCRPlusSignPlusSignKeyword_4_0 = (Keyword)cINCREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum UnaryOperator:
		//	MINUS="-" | PLUS="+" | LOGICAL_NOT="!" | BITWISE_NOT="~" | INCR="++";
		public EnumRule getRule() { return rule; }

		//MINUS="-" | PLUS="+" | LOGICAL_NOT="!" | BITWISE_NOT="~" | INCR="++"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_0() { return cMINUSEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_0_0() { return cMINUSHyphenMinusKeyword_0_0; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }

		//LOGICAL_NOT="!"
		public EnumLiteralDeclaration getLOGICAL_NOTEnumLiteralDeclaration_2() { return cLOGICAL_NOTEnumLiteralDeclaration_2; }

		//"!"
		public Keyword getLOGICAL_NOTExclamationMarkKeyword_2_0() { return cLOGICAL_NOTExclamationMarkKeyword_2_0; }

		//BITWISE_NOT="~"
		public EnumLiteralDeclaration getBITWISE_NOTEnumLiteralDeclaration_3() { return cBITWISE_NOTEnumLiteralDeclaration_3; }

		//"~"
		public Keyword getBITWISE_NOTTildeKeyword_3_0() { return cBITWISE_NOTTildeKeyword_3_0; }

		//INCR="++"
		public EnumLiteralDeclaration getINCREnumLiteralDeclaration_4() { return cINCREnumLiteralDeclaration_4; }

		//"++"
		public Keyword getINCRPlusSignPlusSignKeyword_4_0() { return cINCRPlusSignPlusSignKeyword_4_0; }
	}

	public class BuiltInFunctionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunctionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cExists_otherEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cExists_otherExists_otherKeyword_0_0 = (Keyword)cExists_otherEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExists_higherEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExists_higherExists_higherKeyword_1_0 = (Keyword)cExists_higherEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExists_lowerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExists_lowerExists_lowerKeyword_2_0 = (Keyword)cExists_lowerEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BuiltInFunctionEnum:
		//	exists_other | exists_higher | exists_lower;
		public EnumRule getRule() { return rule; }

		//exists_other | exists_higher | exists_lower
		public Alternatives getAlternatives() { return cAlternatives; }

		//exists_other
		public EnumLiteralDeclaration getExists_otherEnumLiteralDeclaration_0() { return cExists_otherEnumLiteralDeclaration_0; }

		//"exists_other"
		public Keyword getExists_otherExists_otherKeyword_0_0() { return cExists_otherExists_otherKeyword_0_0; }

		//exists_higher
		public EnumLiteralDeclaration getExists_higherEnumLiteralDeclaration_1() { return cExists_higherEnumLiteralDeclaration_1; }

		//"exists_higher"
		public Keyword getExists_higherExists_higherKeyword_1_0() { return cExists_higherExists_higherKeyword_1_0; }

		//exists_lower
		public EnumLiteralDeclaration getExists_lowerEnumLiteralDeclaration_2() { return cExists_lowerEnumLiteralDeclaration_2; }

		//"exists_lower"
		public Keyword getExists_lowerExists_lowerKeyword_2_0() { return cExists_lowerExists_lowerKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final DmplSubclauseElements pDmplSubclause;
	private final ProgramElementElements pProgramElement;
	private final ProgramElementNoTargetElements pProgramElementNoTarget;
	private final TerminalRule tINCLUDE_LINE;
	private final TerminalRule tDEFINE_LINE;
	private final AttributableNodeOrProcedureElements pAttributableNodeOrProcedure;
	private final NumberConstElements pNumberConst;
	private final DoubleConstElements pDoubleConst;
	private final SpecificationElements pSpecification;
	private final NodeBodyElementElements pNodeBodyElement;
	private final AttributableElementElements pAttributableElement;
	private final RoleBodyElementElements pRoleBodyElement;
	private final AttributableNoRoleElementElements pAttributableNoRoleElement;
	private final VarBlockElements pVarBlock;
	private final RecordBlockElements pRecordBlock;
	private final NodeVarInitElements pNodeVarInit;
	private final VarInitElements pVarInit;
	private final VarAsgnElements pVarAsgn;
	private final VarElements pVar;
	private final DimensionElements pDimension;
	private final TypeElements pType;
	private final ProcedureElements pProcedure;
	private final FnBodyElements pFnBody;
	private final AttrElements pAttr;
	private final ParamElements pParam;
	private final StmtElements pStmt;
	private final AssignmentOrIncrementStmtElements pAssignmentOrIncrementStmt;
	private final IncrementStmtElements pIncrementStmt;
	private final InitAssignmentStmtElements pInitAssignmentStmt;
	private final AssignmentStmtElements pAssignmentStmt;
	private final LValElements pLVal;
	private final ExprElements pExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final BitwiseOrExprElements pBitwiseOrExpr;
	private final XorExprElements pXorExpr;
	private final BitwiseAndExprElements pBitwiseAndExpr;
	private final EqualityExprElements pEqualityExpr;
	private final CompareExprElements pCompareExpr;
	private final ShiftExprElements pShiftExpr;
	private final AdditiveExprElements pAdditiveExpr;
	private final MultiplicativeExprElements pMultiplicativeExpr;
	private final TerminalExprElements pTerminalExpr;
	private final CallExprElements pCallExpr;
	private final SignEnumElements unknownRuleSignEnum;
	private final SignElements pSign;
	private final SimpTypeEnumElements unknownRuleSimpTypeEnum;
	private final SimpTypeElements pSimpType;
	private final SignedEnumElements unknownRuleSignedEnum;
	private final SignedElements pSigned;
	private final SimpleStmtKeywordEnumElements unknownRuleSimpleStmtKeywordEnum;
	private final SimpleStmtKeywordElements pSimpleStmtKeyword;
	private final ForAllFunctionEnumElements unknownRuleForAllFunctionEnum;
	private final ForAllFunctionElements pForAllFunction;
	private final NodeVarScopeEnumElements unknownRuleNodeVarScopeEnum;
	private final NodeVarScopeElements pNodeVarScope;
	private final EqualityOperatorElements unknownRuleEqualityOperator;
	private final CompareOperatorElements unknownRuleCompareOperator;
	private final ShiftOperatorElements unknownRuleShiftOperator;
	private final AdditiveOperatorElements unknownRuleAdditiveOperator;
	private final MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private final UnaryOperatorElements unknownRuleUnaryOperator;
	private final BuiltInFunctionEnumElements unknownRuleBuiltInFunctionEnum;
	private final BuiltInFunctionElements pBuiltInFunction;
	private final DoubleElements pDouble;
	private final TerminalRule tTIDENTIFIER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DmplGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pDmplSubclause = new DmplSubclauseElements();
		this.pProgramElement = new ProgramElementElements();
		this.pProgramElementNoTarget = new ProgramElementNoTargetElements();
		this.tINCLUDE_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDE_LINE");
		this.tDEFINE_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEFINE_LINE");
		this.pAttributableNodeOrProcedure = new AttributableNodeOrProcedureElements();
		this.pNumberConst = new NumberConstElements();
		this.pDoubleConst = new DoubleConstElements();
		this.pSpecification = new SpecificationElements();
		this.pNodeBodyElement = new NodeBodyElementElements();
		this.pAttributableElement = new AttributableElementElements();
		this.pRoleBodyElement = new RoleBodyElementElements();
		this.pAttributableNoRoleElement = new AttributableNoRoleElementElements();
		this.pVarBlock = new VarBlockElements();
		this.pRecordBlock = new RecordBlockElements();
		this.pNodeVarInit = new NodeVarInitElements();
		this.pVarInit = new VarInitElements();
		this.pVarAsgn = new VarAsgnElements();
		this.pVar = new VarElements();
		this.pDimension = new DimensionElements();
		this.pType = new TypeElements();
		this.pProcedure = new ProcedureElements();
		this.pFnBody = new FnBodyElements();
		this.pAttr = new AttrElements();
		this.pParam = new ParamElements();
		this.pStmt = new StmtElements();
		this.pAssignmentOrIncrementStmt = new AssignmentOrIncrementStmtElements();
		this.pIncrementStmt = new IncrementStmtElements();
		this.pInitAssignmentStmt = new InitAssignmentStmtElements();
		this.pAssignmentStmt = new AssignmentStmtElements();
		this.pLVal = new LValElements();
		this.pExpr = new ExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pBitwiseOrExpr = new BitwiseOrExprElements();
		this.pXorExpr = new XorExprElements();
		this.pBitwiseAndExpr = new BitwiseAndExprElements();
		this.pEqualityExpr = new EqualityExprElements();
		this.pCompareExpr = new CompareExprElements();
		this.pShiftExpr = new ShiftExprElements();
		this.pAdditiveExpr = new AdditiveExprElements();
		this.pMultiplicativeExpr = new MultiplicativeExprElements();
		this.pTerminalExpr = new TerminalExprElements();
		this.pCallExpr = new CallExprElements();
		this.unknownRuleSignEnum = new SignEnumElements();
		this.pSign = new SignElements();
		this.unknownRuleSimpTypeEnum = new SimpTypeEnumElements();
		this.pSimpType = new SimpTypeElements();
		this.unknownRuleSignedEnum = new SignedEnumElements();
		this.pSigned = new SignedElements();
		this.unknownRuleSimpleStmtKeywordEnum = new SimpleStmtKeywordEnumElements();
		this.pSimpleStmtKeyword = new SimpleStmtKeywordElements();
		this.unknownRuleForAllFunctionEnum = new ForAllFunctionEnumElements();
		this.pForAllFunction = new ForAllFunctionElements();
		this.unknownRuleNodeVarScopeEnum = new NodeVarScopeEnumElements();
		this.pNodeVarScope = new NodeVarScopeElements();
		this.unknownRuleEqualityOperator = new EqualityOperatorElements();
		this.unknownRuleCompareOperator = new CompareOperatorElements();
		this.unknownRuleShiftOperator = new ShiftOperatorElements();
		this.unknownRuleAdditiveOperator = new AdditiveOperatorElements();
		this.unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.unknownRuleUnaryOperator = new UnaryOperatorElements();
		this.unknownRuleBuiltInFunctionEnum = new BuiltInFunctionEnumElements();
		this.pBuiltInFunction = new BuiltInFunctionElements();
		this.pDouble = new DoubleElements();
		this.tTIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.annex.dmpl.Dmpl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} elements+=ProgramElement*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	DmplSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//DmplSubclause:
	//	{DmplSubclause} program=Program;
	public DmplSubclauseElements getDmplSubclauseAccess() {
		return pDmplSubclause;
	}
	
	public ParserRule getDmplSubclauseRule() {
		return getDmplSubclauseAccess().getRule();
	}

	//ProgramElement:
	//	{Target} ("target" | "TARGET") names+=TIDENTIFIER ("," names+=TIDENTIFIER)* "%%{" elements+=ProgramElementNoTarget*
	//	"%%}" | ProgramElementNoTarget;
	public ProgramElementElements getProgramElementAccess() {
		return pProgramElement;
	}
	
	public ParserRule getProgramElementRule() {
		return getProgramElementAccess().getRule();
	}

	//ProgramElementNoTarget:
	//	{Includeline} line=INCLUDE_LINE | {Defineline} line=DEFINE_LINE | {Constant} ("const" | "CONST") name=TIDENTIFIER "="
	//	value=NumberConst ";" | {AttributableProgramElement} attrs+=Attr* element=AttributableNodeOrProcedure;
	public ProgramElementNoTargetElements getProgramElementNoTargetAccess() {
		return pProgramElementNoTarget;
	}
	
	public ParserRule getProgramElementNoTargetRule() {
		return getProgramElementNoTargetAccess().getRule();
	}

	//terminal INCLUDE_LINE:
	//	"#include" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getINCLUDE_LINERule() {
		return tINCLUDE_LINE;
	} 

	//terminal DEFINE_LINE:
	//	"#define" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getDEFINE_LINERule() {
		return tDEFINE_LINE;
	} 

	//AttributableNodeOrProcedure:
	//	{Node} ("node" | "NODE") name=TIDENTIFIER (";" | "{" elements+=NodeBodyElement* "}") | Procedure;
	public AttributableNodeOrProcedureElements getAttributableNodeOrProcedureAccess() {
		return pAttributableNodeOrProcedure;
	}
	
	public ParserRule getAttributableNodeOrProcedureRule() {
		return getAttributableNodeOrProcedureAccess().getRule();
	}

	//NumberConst:
	//	{IntConst} sign=Sign? value=INT | DoubleConst;
	public NumberConstElements getNumberConstAccess() {
		return pNumberConst;
	}
	
	public ParserRule getNumberConstRule() {
		return getNumberConstAccess().getRule();
	}

	//DoubleConst:
	//	sign=Sign? value=Double;
	public DoubleConstElements getDoubleConstAccess() {
		return pDoubleConst;
	}
	
	public ParserRule getDoubleConstRule() {
		return getDoubleConstAccess().getRule();
	}

	//Specification:
	//	{AtEndSpec} "expect" name=TIDENTIFIER ":" "at_end" "=>" function=TIDENTIFIER ";" | {AtLeastSpec} "expect"
	//	name=TIDENTIFIER ":" "at_least" threshold=DoubleConst "=>" function=TIDENTIFIER ";" | {RequireSpec} "require"
	//	name=TIDENTIFIER "=>" function=TIDENTIFIER ";";
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//NodeBodyElement:
	//	VarBlock | RecordBlock | {Attributable} attrs+=Attr* element=AttributableElement;
	public NodeBodyElementElements getNodeBodyElementAccess() {
		return pNodeBodyElement;
	}
	
	public ParserRule getNodeBodyElementRule() {
		return getNodeBodyElementAccess().getRule();
	}

	//AttributableElement:
	//	Procedure | {SimpleRole} "role" name=TIDENTIFIER "{" elements+=RoleBodyElement* "}" | {IdRole} "role" name=TIDENTIFIER
	//	"id" id=INT "{" elements+=RoleBodyElement* "}" | Specification;
	public AttributableElementElements getAttributableElementAccess() {
		return pAttributableElement;
	}
	
	public ParserRule getAttributableElementRule() {
		return getAttributableElementAccess().getRule();
	}

	//RoleBodyElement:
	//	VarBlock | RecordBlock | {AttributableNoRole} attrs+=Attr* element=AttributableNoRoleElement;
	public RoleBodyElementElements getRoleBodyElementAccess() {
		return pRoleBodyElement;
	}
	
	public ParserRule getRoleBodyElementRule() {
		return getRoleBodyElementAccess().getRule();
	}

	//AttributableNoRoleElement:
	//	Procedure | Specification;
	public AttributableNoRoleElementElements getAttributableNoRoleElementAccess() {
		return pAttributableNoRoleElement;
	}
	
	public ParserRule getAttributableNoRoleElementRule() {
		return getAttributableNoRoleElementAccess().getRule();
	}

	//VarBlock:
	//	override?="override"? var=NodeVarInit ";";
	public VarBlockElements getVarBlockAccess() {
		return pVarBlock;
	}
	
	public ParserRule getVarBlockRule() {
		return getVarBlockAccess().getRule();
	}

	//RecordBlock:
	//	override?="override"? "record" name=TIDENTIFIER "{" (vars+=NodeVarInit ";")+ "}" ("=" equalsBody=FnBody)? ("~"
	//	complementBody=FnBody)?;
	public RecordBlockElements getRecordBlockAccess() {
		return pRecordBlock;
	}
	
	public ParserRule getRecordBlockRule() {
		return getRecordBlockAccess().getRule();
	}

	//NodeVarInit:
	//	scope=NodeVarScope var=VarInit;
	public NodeVarInitElements getNodeVarInitAccess() {
		return pNodeVarInit;
	}
	
	public ParserRule getNodeVarInitRule() {
		return getNodeVarInitAccess().getRule();
	}

	//VarInit:
	//	type=Type varAsgns+=VarAsgn ("," varAsgns+=VarAsgn)*;
	public VarInitElements getVarInitAccess() {
		return pVarInit;
	}
	
	public ParserRule getVarInitRule() {
		return getVarInitAccess().getRule();
	}

	//VarAsgn:
	//	input?="input"? var=Var | {ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr | {FnVarAsgn} (var=Var
	//	"=" | input?="input" var=Var "~") fnBody=FnBody;
	public VarAsgnElements getVarAsgnAccess() {
		return pVarAsgn;
	}
	
	public ParserRule getVarAsgnRule() {
		return getVarAsgnAccess().getRule();
	}

	//Var:
	//	name=TIDENTIFIER ("[" dimensions+=Dimension "]")*;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Dimension:
	//	{IntDimension} index=INT | {NodeNumDimension} "#N" | {IdDimension} index=TIDENTIFIER;
	public DimensionElements getDimensionAccess() {
		return pDimension;
	}
	
	public ParserRule getDimensionRule() {
		return getDimensionAccess().getRule();
	}

	//Type:
	//	signed=Signed? simpType=SimpType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Procedure:
	//	{ThreadDeclaration} override?="override"? extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread"
	//	name=TIDENTIFIER (";" | fnBody=FnBody) | {FunctionDeclaration} override?="override"? extern?=("extern" | "EXTERN")?
	//	pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "(" (params+=Param ("," params+=Param)*)? ")" (";" |
	//	fnBody=FnBody);
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//FnBody:
	//	{FnBody} "{" (varInits+=VarInit ";")* stmts+=Stmt* "}";
	public FnBodyElements getFnBodyAccess() {
		return pFnBody;
	}
	
	public ParserRule getFnBodyRule() {
		return getFnBodyAccess().getRule();
	}

	//Attr:
	//	"@" name=TIDENTIFIER ("(" params+=Expr ("," params+=Expr)* ")")? ";";
	public AttrElements getAttrAccess() {
		return pAttr;
	}
	
	public ParserRule getAttrRule() {
		return getAttrAccess().getRule();
	}

	//Param:
	//	type=Type var=Var;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//Stmt:
	//	{NestedStmt} "{" stmts+=Stmt* "}" | AssignmentStmt ";" | {WhileStmt} "while" "(" condition=Expr ")" stmt=Stmt |
	//	{ForStmt} "for" "(" (inits+=InitAssignmentStmt ("," inits+=InitAssignmentStmt)*)? ";" condition=Expr? ";"
	//	update=AssignmentOrIncrementStmt? ")" stmt=Stmt | {CondStmt} attrs+=Attr* "if" "(" condition=Expr ")" then=Stmt
	//	("else" else=Stmt)? | {SimpleStmt} name=SimpleStmtKeyword ";" | {ReturnValueStmt} "return" value=Expr ";" | CallExpr
	//	";" | {ForAllStmt} name=ForAllFunction "(" node=TIDENTIFIER ")" stmt=Stmt | {FadnpStmt} ("forall_distinct_node_pair" |
	//	"FORALL_DISTINCT_NODE_PAIR") "(" node1=TIDENTIFIER "," node2=TIDENTIFIER ")" stmt=Stmt;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//AssignmentOrIncrementStmt:
	//	AssignmentStmt | IncrementStmt;
	public AssignmentOrIncrementStmtElements getAssignmentOrIncrementStmtAccess() {
		return pAssignmentOrIncrementStmt;
	}
	
	public ParserRule getAssignmentOrIncrementStmtRule() {
		return getAssignmentOrIncrementStmtAccess().getRule();
	}

	//IncrementStmt:
	//	var=TIDENTIFIER "++" | "++" var=TIDENTIFIER;
	public IncrementStmtElements getIncrementStmtAccess() {
		return pIncrementStmt;
	}
	
	public ParserRule getIncrementStmtRule() {
		return getIncrementStmtAccess().getRule();
	}

	//InitAssignmentStmt:
	//	type=Type? variable=LVal "=" value=Expr;
	public InitAssignmentStmtElements getInitAssignmentStmtAccess() {
		return pInitAssignmentStmt;
	}
	
	public ParserRule getInitAssignmentStmtRule() {
		return getInitAssignmentStmtAccess().getRule();
	}

	//AssignmentStmt:
	//	variable=LVal "=" value=Expr;
	public AssignmentStmtElements getAssignmentStmtAccess() {
		return pAssignmentStmt;
	}
	
	public ParserRule getAssignmentStmtRule() {
		return getAssignmentStmtAccess().getRule();
	}

	//LVal:
	//	name=TIDENTIFIER ("[" indices+=Expr "]")* ("@" at=Expr)?;
	public LValElements getLValAccess() {
		return pLVal;
	}
	
	public ParserRule getLValRule() {
		return getLValAccess().getRule();
	}

	//Expr:
	//	OrExpr (=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr (=> ({OrExpr.left=current} "||") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	BitwiseOrExpr (=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//BitwiseOrExpr returns Expr:
	//	XorExpr (=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*;
	public BitwiseOrExprElements getBitwiseOrExprAccess() {
		return pBitwiseOrExpr;
	}
	
	public ParserRule getBitwiseOrExprRule() {
		return getBitwiseOrExprAccess().getRule();
	}

	//XorExpr returns Expr:
	//	BitwiseAndExpr (=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*;
	public XorExprElements getXorExprAccess() {
		return pXorExpr;
	}
	
	public ParserRule getXorExprRule() {
		return getXorExprAccess().getRule();
	}

	//BitwiseAndExpr returns Expr:
	//	EqualityExpr (=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*;
	public BitwiseAndExprElements getBitwiseAndExprAccess() {
		return pBitwiseAndExpr;
	}
	
	public ParserRule getBitwiseAndExprRule() {
		return getBitwiseAndExprAccess().getRule();
	}

	//EqualityExpr returns Expr:
	//	CompareExpr (=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*;
	public EqualityExprElements getEqualityExprAccess() {
		return pEqualityExpr;
	}
	
	public ParserRule getEqualityExprRule() {
		return getEqualityExprAccess().getRule();
	}

	//CompareExpr returns Expr:
	//	ShiftExpr (=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*;
	public CompareExprElements getCompareExprAccess() {
		return pCompareExpr;
	}
	
	public ParserRule getCompareExprRule() {
		return getCompareExprAccess().getRule();
	}

	//ShiftExpr returns Expr:
	//	AdditiveExpr (=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*;
	public ShiftExprElements getShiftExprAccess() {
		return pShiftExpr;
	}
	
	public ParserRule getShiftExprRule() {
		return getShiftExprAccess().getRule();
	}

	//AdditiveExpr returns Expr:
	//	MultiplicativeExpr (=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*;
	public AdditiveExprElements getAdditiveExprAccess() {
		return pAdditiveExpr;
	}
	
	public ParserRule getAdditiveExprRule() {
		return getAdditiveExprAccess().getRule();
	}

	//MultiplicativeExpr returns Expr:
	//	TerminalExpr (=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*;
	public MultiplicativeExprElements getMultiplicativeExprAccess() {
		return pMultiplicativeExpr;
	}
	
	public ParserRule getMultiplicativeExprRule() {
		return getMultiplicativeExprAccess().getRule();
	}

	//TerminalExpr returns Expr:
	//	LVal | {IdExpr} "id" | {IntExpr} value=INT | {DoubleExpr} value=Double | {StringExpr} value=STRING | {NodeNumExpr}
	//	"#N" | {UnaryExpr} operator=UnaryOperator operand=Expr | {BuiltInExpr} function=BuiltInFunction "("
	//	firstArg=TIDENTIFIER "," secondArg=Expr ")" | CallExpr | {ParenthesizedExpr} "(" expr=Expr ")";
	public TerminalExprElements getTerminalExprAccess() {
		return pTerminalExpr;
	}
	
	public ParserRule getTerminalExprRule() {
		return getTerminalExprAccess().getRule();
	}

	//CallExpr:
	//	(namespaces+=TIDENTIFIER "::")* name=TIDENTIFIER "(" (args+=Expr ("," args+=Expr)*)? ")" ("@" at=Expr)?;
	public CallExprElements getCallExprAccess() {
		return pCallExpr;
	}
	
	public ParserRule getCallExprRule() {
		return getCallExprAccess().getRule();
	}

	//enum SignEnum:
	//	unset | PLUS="+" | MINUS="-";
	public SignEnumElements getSignEnumAccess() {
		return unknownRuleSignEnum;
	}
	
	public EnumRule getSignEnumRule() {
		return getSignEnumAccess().getRule();
	}

	//Sign returns SignEnum:
	//	"+" | "-";
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//enum SimpTypeEnum:
	//	bool | int | double | void | char;
	public SimpTypeEnumElements getSimpTypeEnumAccess() {
		return unknownRuleSimpTypeEnum;
	}
	
	public EnumRule getSimpTypeEnumRule() {
		return getSimpTypeEnumAccess().getRule();
	}

	//SimpType returns SimpTypeEnum:
	//	"bool" | "_Bool" | "int" | "double" | "void" | "char";
	public SimpTypeElements getSimpTypeAccess() {
		return pSimpType;
	}
	
	public ParserRule getSimpTypeRule() {
		return getSimpTypeAccess().getRule();
	}

	//enum SignedEnum:
	//	unset | signed | unsigned;
	public SignedEnumElements getSignedEnumAccess() {
		return unknownRuleSignedEnum;
	}
	
	public EnumRule getSignedEnumRule() {
		return getSignedEnumAccess().getRule();
	}

	//Signed returns SignedEnum:
	//	"signed" | "unsigned";
	public SignedElements getSignedAccess() {
		return pSigned;
	}
	
	public ParserRule getSignedRule() {
		return getSignedAccess().getRule();
	}

	//enum SimpleStmtKeywordEnum:
	//	break | continue | return;
	public SimpleStmtKeywordEnumElements getSimpleStmtKeywordEnumAccess() {
		return unknownRuleSimpleStmtKeywordEnum;
	}
	
	public EnumRule getSimpleStmtKeywordEnumRule() {
		return getSimpleStmtKeywordEnumAccess().getRule();
	}

	//SimpleStmtKeyword returns SimpleStmtKeywordEnum:
	//	"break" | "continue" | "return";
	public SimpleStmtKeywordElements getSimpleStmtKeywordAccess() {
		return pSimpleStmtKeyword;
	}
	
	public ParserRule getSimpleStmtKeywordRule() {
		return getSimpleStmtKeywordAccess().getRule();
	}

	//enum ForAllFunctionEnum:
	//	forall_node | forall_other | forall_other_lower | forall_other_higher;
	public ForAllFunctionEnumElements getForAllFunctionEnumAccess() {
		return unknownRuleForAllFunctionEnum;
	}
	
	public EnumRule getForAllFunctionEnumRule() {
		return getForAllFunctionEnumAccess().getRule();
	}

	//ForAllFunction returns ForAllFunctionEnum:
	//	"forall_node" | "FORALL_NODE" | "forall_other" | "FORALL_OTHER" | "forall_other_lower" | "FORALL_OTHER_LOWER" |
	//	"forall_other_higher" | "FORALL_OTHER_HIGHER";
	public ForAllFunctionElements getForAllFunctionAccess() {
		return pForAllFunction;
	}
	
	public ParserRule getForAllFunctionRule() {
		return getForAllFunctionAccess().getRule();
	}

	//enum NodeVarScopeEnum:
	//	global | local | group;
	public NodeVarScopeEnumElements getNodeVarScopeEnumAccess() {
		return unknownRuleNodeVarScopeEnum;
	}
	
	public EnumRule getNodeVarScopeEnumRule() {
		return getNodeVarScopeEnumAccess().getRule();
	}

	//NodeVarScope returns NodeVarScopeEnum:
	//	"global" | "GLOBAL" | "local" | "LOCAL" | "group";
	public NodeVarScopeElements getNodeVarScopeAccess() {
		return pNodeVarScope;
	}
	
	public ParserRule getNodeVarScopeRule() {
		return getNodeVarScopeAccess().getRule();
	}

	//enum EqualityOperator:
	//	EQUAL="==" | NOT_EQUAL="!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return unknownRuleEqualityOperator;
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//enum CompareOperator:
	//	LESS="<" | LESS_EQUAL="<=" | GREATER=">" | GREATER_EQUAL=">=";
	public CompareOperatorElements getCompareOperatorAccess() {
		return unknownRuleCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//	LEFT="<<" | RIGHT=">>";
	public ShiftOperatorElements getShiftOperatorAccess() {
		return unknownRuleShiftOperator;
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//	ADD="+" | SUBTRACT="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return unknownRuleAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	MULTIPLY="*" | DIVIDE="/" | MODULUS="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return unknownRuleMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	MINUS="-" | PLUS="+" | LOGICAL_NOT="!" | BITWISE_NOT="~" | INCR="++";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return unknownRuleUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum BuiltInFunctionEnum:
	//	exists_other | exists_higher | exists_lower;
	public BuiltInFunctionEnumElements getBuiltInFunctionEnumAccess() {
		return unknownRuleBuiltInFunctionEnum;
	}
	
	public EnumRule getBuiltInFunctionEnumRule() {
		return getBuiltInFunctionEnumAccess().getRule();
	}

	//BuiltInFunction returns BuiltInFunctionEnum:
	//	"exists_other" | "EXISTS_OTHER" | "exists_higher" | "EXISTS_HIGHER" | "exists_lower" | "EXISTS_LOWER";
	public BuiltInFunctionElements getBuiltInFunctionAccess() {
		return pBuiltInFunction;
	}
	
	public ParserRule getBuiltInFunctionRule() {
		return getBuiltInFunctionAccess().getRule();
	}

	//Double returns ecore::EDouble:
	//	"NAN" | INT "." INT?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//terminal TIDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getTIDENTIFIERRule() {
		return tTIDENTIFIER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
