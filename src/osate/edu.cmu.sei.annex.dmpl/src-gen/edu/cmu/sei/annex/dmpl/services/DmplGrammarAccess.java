/*
 * generated by Xtext
 */
package edu.cmu.sei.annex.dmpl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DmplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cDmplSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Model:
		////	greetings+=Greeting*;
		////	
		////Greeting:
		////	'Hello' name=ID '!';
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	DmplSubclause;
		@Override public ParserRule getRule() { return rule; }

		//DmplSubclause
		public RuleCall getDmplSubclauseParserRuleCall() { return cDmplSubclauseParserRuleCall; }
	}

	public class DmplSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DmplSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmplSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionCallsFunctionCallParserRuleCall_1_0 = (RuleCall)cFunctionCallsAssignment_1.eContents().get(0);
		
		//DmplSubclause:
		//	{DmplSubclause} functionCalls+=FunctionCall*;
		@Override public ParserRule getRule() { return rule; }

		//{DmplSubclause} functionCalls+=FunctionCall*
		public Group getGroup() { return cGroup; }

		//{DmplSubclause}
		public Action getDmplSubclauseAction_0() { return cDmplSubclauseAction_0; }

		//functionCalls+=FunctionCall*
		public Assignment getFunctionCallsAssignment_1() { return cFunctionCallsAssignment_1; }

		//FunctionCall
		public RuleCall getFunctionCallsFunctionCallParserRuleCall_1_0() { return cFunctionCallsFunctionCallParserRuleCall_1_0; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Assignment cFunctionNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionNameIDTerminalRuleCall_0 = (RuleCall)cFunctionNameAssignment.eContents().get(0);
		
		//FunctionCall:
		//	functionName=ID;
		@Override public ParserRule getRule() { return rule; }

		//functionName=ID
		public Assignment getFunctionNameAssignment() { return cFunctionNameAssignment; }

		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_0() { return cFunctionNameIDTerminalRuleCall_0; }
	}
	
	
	private final AnnexSubclauseElements pAnnexSubclause;
	private final DmplSubclauseElements pDmplSubclause;
	private final FunctionCallElements pFunctionCall;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DmplGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pDmplSubclause = new DmplSubclauseElements();
		this.pFunctionCall = new FunctionCallElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.annex.dmpl.Dmpl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////	greetings+=Greeting*;
	////	
	////Greeting:
	////	'Hello' name=ID '!';
	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	DmplSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//DmplSubclause:
	//	{DmplSubclause} functionCalls+=FunctionCall*;
	public DmplSubclauseElements getDmplSubclauseAccess() {
		return pDmplSubclause;
	}
	
	public ParserRule getDmplSubclauseRule() {
		return getDmplSubclauseAccess().getRule();
	}

	//FunctionCall:
	//	functionName=ID;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
