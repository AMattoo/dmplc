/*
 * generated by Xtext
 */
package edu.cmu.sei.annex.dmpl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DmplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProgramElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramElementsProgramElementParserRuleCall_1_0 = (RuleCall)cProgramElementsAssignment_1.eContents().get(0);
		
		//Program:
		//	{Program} programElements+=ProgramElement*;
		@Override public ParserRule getRule() { return rule; }

		//{Program} programElements+=ProgramElement*
		public Group getGroup() { return cGroup; }

		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }

		//programElements+=ProgramElement*
		public Assignment getProgramElementsAssignment_1() { return cProgramElementsAssignment_1; }

		//ProgramElement
		public RuleCall getProgramElementsProgramElementParserRuleCall_1_0() { return cProgramElementsProgramElementParserRuleCall_1_0; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cDmplSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	DmplSubclause;
		@Override public ParserRule getRule() { return rule; }

		//DmplSubclause
		public RuleCall getDmplSubclauseParserRuleCall() { return cDmplSubclauseParserRuleCall; }
	}

	public class DmplSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DmplSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmplSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProgramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_1_0 = (RuleCall)cProgramAssignment_1.eContents().get(0);
		
		//DmplSubclause:
		//	{DmplSubclause} program=Program;
		@Override public ParserRule getRule() { return rule; }

		//{DmplSubclause} program=Program
		public Group getGroup() { return cGroup; }

		//{DmplSubclause}
		public Action getDmplSubclauseAction_0() { return cDmplSubclauseAction_0; }

		//program=Program
		public Assignment getProgramAssignment_1() { return cProgramAssignment_1; }

		//Program
		public RuleCall getProgramProgramParserRuleCall_1_0() { return cProgramProgramParserRuleCall_1_0; }
	}

	public class ProgramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProgramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgramElement: //TODO: target, node
		//	Constant | Procedure;
		@Override public ParserRule getRule() { return rule; }

		////TODO: target, node
		//Constant | Procedure
		public Alternatives getAlternatives() { return cAlternatives; }

		////TODO: target, node
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_1() { return cProcedureParserRuleCall_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCONSTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueNumberConstParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//	("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";";
		@Override public ParserRule getRule() { return rule; }

		//("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";"
		public Group getGroup() { return cGroup; }

		//"const" | "CONST"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"const"
		public Keyword getConstKeyword_0_0() { return cConstKeyword_0_0; }

		//"CONST"
		public Keyword getCONSTKeyword_0_1() { return cCONSTKeyword_0_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_0() { return cNameTIDENTIFIERTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=NumberConst
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//NumberConst
		public RuleCall getValueNumberConstParserRuleCall_3_0() { return cValueNumberConstParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NumberConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberConst:
		//	IntConst | DoubleConst;
		@Override public ParserRule getRule() { return rule; }

		//IntConst | DoubleConst
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntConst
		public RuleCall getIntConstParserRuleCall_0() { return cIntConstParserRuleCall_0; }

		//DoubleConst
		public RuleCall getDoubleConstParserRuleCall_1() { return cDoubleConstParserRuleCall_1; }
	}

	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntConst:
		//	sign=Sign? value=INT;
		@Override public ParserRule getRule() { return rule; }

		//sign=Sign? value=INT
		public Group getGroup() { return cGroup; }

		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//Sign
		public RuleCall getSignSignParserRuleCall_0_0() { return cSignSignParserRuleCall_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class DoubleConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DoubleConst:
		//	sign=Sign? value=Double;
		@Override public ParserRule getRule() { return rule; }

		//sign=Sign? value=Double
		public Group getGroup() { return cGroup; }

		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//Sign
		public RuleCall getSignSignParserRuleCall_0_0() { return cSignSignParserRuleCall_0_0; }

		//value=Double
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_1_0() { return cValueDoubleParserRuleCall_1_0; }
	}

	public class VarInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarAsgnListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarAsgnListVarAsgnListParserRuleCall_1_0 = (RuleCall)cVarAsgnListAssignment_1.eContents().get(0);
		
		//VarInit:
		//	type=Type varAsgnList=VarAsgnList;
		@Override public ParserRule getRule() { return rule; }

		//type=Type varAsgnList=VarAsgnList
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//varAsgnList=VarAsgnList
		public Assignment getVarAsgnListAssignment_1() { return cVarAsgnListAssignment_1; }

		//VarAsgnList
		public RuleCall getVarAsgnListVarAsgnListParserRuleCall_1_0() { return cVarAsgnListVarAsgnListParserRuleCall_1_0; }
	}

	public class VarAsgnListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarAsgnList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cVarAsgnAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarAsgnVarAsgnParserRuleCall_1_0 = (RuleCall)cVarAsgnAssignment_1.eContents().get(0);
		
		//VarAsgnList: //TODO 'input', and multiplicity
		//	var=Var | varAsgn=VarAsgn;
		@Override public ParserRule getRule() { return rule; }

		////TODO 'input', and multiplicity
		//var=Var | varAsgn=VarAsgn
		public Alternatives getAlternatives() { return cAlternatives; }

		////TODO 'input', and multiplicity
		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }

		//varAsgn=VarAsgn
		public Assignment getVarAsgnAssignment_1() { return cVarAsgnAssignment_1; }

		//VarAsgn
		public RuleCall getVarAsgnVarAsgnParserRuleCall_1_0() { return cVarAsgnVarAsgnParserRuleCall_1_0; }
	}

	public class VarAsgnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarAsgn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprVarAsgnAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Assignment cVarAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_1_0_0_0 = (RuleCall)cVarAssignment_0_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Assignment cInputAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final Keyword cInputInputKeyword_0_1_1_0_0 = (Keyword)cInputAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_0_1_1_1_0 = (RuleCall)cVarAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cTildeKeyword_0_1_1_2 = (Keyword)cGroup_0_1_1.eContents().get(2);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFnVarAsgnAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cVarAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_1_1_0_0_0 = (RuleCall)cVarAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cInputAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cInputInputKeyword_1_1_1_0_0 = (Keyword)cInputAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_1_1_1_0 = (RuleCall)cVarAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Assignment cFnBodyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFnBodyFnBodyParserRuleCall_1_2_0 = (RuleCall)cFnBodyAssignment_1_2.eContents().get(0);
		
		//VarAsgn:
		//	{ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr | {FnVarAsgn} (var=Var "=" | input?="input" var=Var
		//	"~") fnBody=FnBody;
		@Override public ParserRule getRule() { return rule; }

		//{ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr | {FnVarAsgn} (var=Var "=" | input?="input" var=Var
		//"~") fnBody=FnBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr
		public Group getGroup_0() { return cGroup_0; }

		//{ExprVarAsgn}
		public Action getExprVarAsgnAction_0_0() { return cExprVarAsgnAction_0_0; }

		//var=Var "=" | input?="input" var=Var "~"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//var=Var "="
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//var=Var
		public Assignment getVarAssignment_0_1_0_0() { return cVarAssignment_0_1_0_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_1_0_0_0() { return cVarVarParserRuleCall_0_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_0_1() { return cEqualsSignKeyword_0_1_0_1; }

		//input?="input" var=Var "~"
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//input?="input"
		public Assignment getInputAssignment_0_1_1_0() { return cInputAssignment_0_1_1_0; }

		//"input"
		public Keyword getInputInputKeyword_0_1_1_0_0() { return cInputInputKeyword_0_1_1_0_0; }

		//var=Var
		public Assignment getVarAssignment_0_1_1_1() { return cVarAssignment_0_1_1_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_1_1_1_0() { return cVarVarParserRuleCall_0_1_1_1_0; }

		//"~"
		public Keyword getTildeKeyword_0_1_1_2() { return cTildeKeyword_0_1_1_2; }

		//expr=Expr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_2_0() { return cExprExprParserRuleCall_0_2_0; }

		//{FnVarAsgn} (var=Var "=" | input?="input" var=Var "~") fnBody=FnBody
		public Group getGroup_1() { return cGroup_1; }

		//{FnVarAsgn}
		public Action getFnVarAsgnAction_1_0() { return cFnVarAsgnAction_1_0; }

		//var=Var "=" | input?="input" var=Var "~"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//var=Var "="
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//var=Var
		public Assignment getVarAssignment_1_1_0_0() { return cVarAssignment_1_1_0_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_1_0_0_0() { return cVarVarParserRuleCall_1_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_0_1() { return cEqualsSignKeyword_1_1_0_1; }

		//input?="input" var=Var "~"
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//input?="input"
		public Assignment getInputAssignment_1_1_1_0() { return cInputAssignment_1_1_1_0; }

		//"input"
		public Keyword getInputInputKeyword_1_1_1_0_0() { return cInputInputKeyword_1_1_1_0_0; }

		//var=Var
		public Assignment getVarAssignment_1_1_1_1() { return cVarAssignment_1_1_1_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_1_1_1_0() { return cVarVarParserRuleCall_1_1_1_1_0; }

		//"~"
		public Keyword getTildeKeyword_1_1_1_2() { return cTildeKeyword_1_1_1_2; }

		//fnBody=FnBody
		public Assignment getFnBodyAssignment_1_2() { return cFnBodyAssignment_1_2; }

		//FnBody
		public RuleCall getFnBodyFnBodyParserRuleCall_1_2_0() { return cFnBodyFnBodyParserRuleCall_1_2_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsDimensionParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Var:
		//	name=TIDENTIFIER ("[" dimensions+=Dimension "]")*;
		@Override public ParserRule getRule() { return rule; }

		//name=TIDENTIFIER ("[" dimensions+=Dimension "]")*
		public Group getGroup() { return cGroup; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_0() { return cNameTIDENTIFIERTerminalRuleCall_0_0; }

		//("[" dimensions+=Dimension "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//dimensions+=Dimension
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }

		//Dimension
		public RuleCall getDimensionsDimensionParserRuleCall_1_1_0() { return cDimensionsDimensionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class DimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dimension");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntDimensionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIndexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_0_1_0 = (RuleCall)cIndexAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeNumDimensionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIdDimensionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexTIDENTIFIERTerminalRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		
		//Dimension:
		//	{IntDimension} index=INT | {NodeNumDimension} "#N" | {IdDimension} index=TIDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//{IntDimension} index=INT | {NodeNumDimension} "#N" | {IdDimension} index=TIDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntDimension} index=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntDimension}
		public Action getIntDimensionAction_0_0() { return cIntDimensionAction_0_0; }

		//index=INT
		public Assignment getIndexAssignment_0_1() { return cIndexAssignment_0_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_0_1_0() { return cIndexINTTerminalRuleCall_0_1_0; }

		//{NodeNumDimension} "#N"
		public Group getGroup_1() { return cGroup_1; }

		//{NodeNumDimension}
		public Action getNodeNumDimensionAction_1_0() { return cNodeNumDimensionAction_1_0; }

		//"#N"
		public Keyword getNKeyword_1_1() { return cNKeyword_1_1; }

		//{IdDimension} index=TIDENTIFIER
		public Group getGroup_2() { return cGroup_2; }

		//{IdDimension}
		public Action getIdDimensionAction_2_0() { return cIdDimensionAction_2_0; }

		//index=TIDENTIFIER
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }

		//TIDENTIFIER
		public RuleCall getIndexTIDENTIFIERTerminalRuleCall_2_1_0() { return cIndexTIDENTIFIERTerminalRuleCall_2_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignedSignedParserRuleCall_0_0 = (RuleCall)cSignedAssignment_0.eContents().get(0);
		private final Assignment cSimpTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpTypeSimpTypeParserRuleCall_1_0 = (RuleCall)cSimpTypeAssignment_1.eContents().get(0);
		
		//Type:
		//	signed=Signed? simpType=SimpType;
		@Override public ParserRule getRule() { return rule; }

		//signed=Signed? simpType=SimpType
		public Group getGroup() { return cGroup; }

		//signed=Signed?
		public Assignment getSignedAssignment_0() { return cSignedAssignment_0; }

		//Signed
		public RuleCall getSignedSignedParserRuleCall_0_0() { return cSignedSignedParserRuleCall_0_0; }

		//simpType=SimpType
		public Assignment getSimpTypeAssignment_1() { return cSimpTypeAssignment_1; }

		//SimpType
		public RuleCall getSimpTypeSimpTypeParserRuleCall_1_0() { return cSimpTypeSimpTypeParserRuleCall_1_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Assignment cProcedureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProcedureProcNoAttrParserRuleCall_0 = (RuleCall)cProcedureAssignment.eContents().get(0);
		
		//Procedure: //TODO: OVERRIDE and attr_list
		//	procedure=ProcNoAttr;
		@Override public ParserRule getRule() { return rule; }

		////TODO: OVERRIDE and attr_list
		//procedure=ProcNoAttr
		public Assignment getProcedureAssignment() { return cProcedureAssignment; }

		//ProcNoAttr
		public RuleCall getProcedureProcNoAttrParserRuleCall_0() { return cProcedureProcNoAttrParserRuleCall_0; }
	}

	public class ProcNoAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcNoAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrototypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrototypeFnPrototypeParserRuleCall_0_0 = (RuleCall)cPrototypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cFnBodyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFnBodyFnBodyParserRuleCall_1_1_0 = (RuleCall)cFnBodyAssignment_1_1.eContents().get(0);
		
		//ProcNoAttr: //TODO: fn_body
		//	prototype=FnPrototype (";" | fnBody=FnBody);
		@Override public ParserRule getRule() { return rule; }

		////TODO: fn_body
		//prototype=FnPrototype (";" | fnBody=FnBody)
		public Group getGroup() { return cGroup; }

		////TODO: fn_body
		//prototype=FnPrototype
		public Assignment getPrototypeAssignment_0() { return cPrototypeAssignment_0; }

		//FnPrototype
		public RuleCall getPrototypeFnPrototypeParserRuleCall_0_0() { return cPrototypeFnPrototypeParserRuleCall_0_0; }

		//";" | fnBody=FnBody
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//fnBody=FnBody
		public Assignment getFnBodyAssignment_1_1() { return cFnBodyAssignment_1_1; }

		//FnBody
		public RuleCall getFnBodyFnBodyParserRuleCall_1_1_0() { return cFnBodyFnBodyParserRuleCall_1_1_0; }
	}

	public class FnBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarInitListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarInitListVarInitListParserRuleCall_1_0 = (RuleCall)cVarInitListAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FnBody: //TODO var_init_list and stmt_list
		//	"{" varInitList=VarInitList "}";
		@Override public ParserRule getRule() { return rule; }

		////TODO var_init_list and stmt_list
		//"{" varInitList=VarInitList "}"
		public Group getGroup() { return cGroup; }

		////TODO var_init_list and stmt_list
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//varInitList=VarInitList
		public Assignment getVarInitListAssignment_1() { return cVarInitListAssignment_1; }

		//VarInitList
		public RuleCall getVarInitListVarInitListParserRuleCall_1_0() { return cVarInitListVarInitListParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class FnPrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnPrototype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cThreadDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExternAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cExternAlternatives_0_1_0 = (Alternatives)cExternAssignment_0_1.eContents().get(0);
		private final Keyword cExternExternKeyword_0_1_0_0 = (Keyword)cExternAlternatives_0_1_0.eContents().get(0);
		private final Keyword cExternEXTERNKeyword_0_1_0_1 = (Keyword)cExternAlternatives_0_1_0.eContents().get(1);
		private final Assignment cPureAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cPureAlternatives_0_2_0 = (Alternatives)cPureAssignment_0_2.eContents().get(0);
		private final Keyword cPurePureKeyword_0_2_0_0 = (Keyword)cPureAlternatives_0_2_0.eContents().get(0);
		private final Keyword cPurePUREKeyword_0_2_0_1 = (Keyword)cPureAlternatives_0_2_0.eContents().get(1);
		private final Keyword cThreadKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cNameAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_4_0 = (RuleCall)cNameAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFnPrototypeDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExternAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExternAlternatives_1_1_0 = (Alternatives)cExternAssignment_1_1.eContents().get(0);
		private final Keyword cExternExternKeyword_1_1_0_0 = (Keyword)cExternAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExternEXTERNKeyword_1_1_0_1 = (Keyword)cExternAlternatives_1_1_0.eContents().get(1);
		private final Assignment cPureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cPureAlternatives_1_2_0 = (Alternatives)cPureAssignment_1_2.eContents().get(0);
		private final Keyword cPurePureKeyword_1_2_0_0 = (Keyword)cPureAlternatives_1_2_0.eContents().get(0);
		private final Keyword cPurePUREKeyword_1_2_0_1 = (Keyword)cPureAlternatives_1_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Assignment cNameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Assignment cParamsAssignment_1_6_0 = (Assignment)cGroup_1_6.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_1_6_0_0 = (RuleCall)cParamsAssignment_1_6_0.eContents().get(0);
		private final Group cGroup_1_6_1 = (Group)cGroup_1_6.eContents().get(1);
		private final Keyword cCommaKeyword_1_6_1_0 = (Keyword)cGroup_1_6_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_6_1_1 = (Assignment)cGroup_1_6_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_6_1_1_0 = (RuleCall)cParamsAssignment_1_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//FnPrototype:
		//	{ThreadDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread" name=TIDENTIFIER |
		//	{FnPrototypeDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "("
		//	(params+=Param ("," params+=Param)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{ThreadDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread" name=TIDENTIFIER |
		//{FnPrototypeDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "("
		//(params+=Param ("," params+=Param)*)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ThreadDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread" name=TIDENTIFIER
		public Group getGroup_0() { return cGroup_0; }

		//{ThreadDeclaration}
		public Action getThreadDeclarationAction_0_0() { return cThreadDeclarationAction_0_0; }

		//extern?=("extern" | "EXTERN")?
		public Assignment getExternAssignment_0_1() { return cExternAssignment_0_1; }

		//"extern" | "EXTERN"
		public Alternatives getExternAlternatives_0_1_0() { return cExternAlternatives_0_1_0; }

		//"extern"
		public Keyword getExternExternKeyword_0_1_0_0() { return cExternExternKeyword_0_1_0_0; }

		//"EXTERN"
		public Keyword getExternEXTERNKeyword_0_1_0_1() { return cExternEXTERNKeyword_0_1_0_1; }

		//pure?=("pure" | "PURE")?
		public Assignment getPureAssignment_0_2() { return cPureAssignment_0_2; }

		//"pure" | "PURE"
		public Alternatives getPureAlternatives_0_2_0() { return cPureAlternatives_0_2_0; }

		//"pure"
		public Keyword getPurePureKeyword_0_2_0_0() { return cPurePureKeyword_0_2_0_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_0_2_0_1() { return cPurePUREKeyword_0_2_0_1; }

		//"thread"
		public Keyword getThreadKeyword_0_3() { return cThreadKeyword_0_3; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_4_0() { return cNameTIDENTIFIERTerminalRuleCall_0_4_0; }

		//{FnPrototypeDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "("
		//(params+=Param ("," params+=Param)*)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//{FnPrototypeDeclaration}
		public Action getFnPrototypeDeclarationAction_1_0() { return cFnPrototypeDeclarationAction_1_0; }

		//extern?=("extern" | "EXTERN")?
		public Assignment getExternAssignment_1_1() { return cExternAssignment_1_1; }

		//"extern" | "EXTERN"
		public Alternatives getExternAlternatives_1_1_0() { return cExternAlternatives_1_1_0; }

		//"extern"
		public Keyword getExternExternKeyword_1_1_0_0() { return cExternExternKeyword_1_1_0_0; }

		//"EXTERN"
		public Keyword getExternEXTERNKeyword_1_1_0_1() { return cExternEXTERNKeyword_1_1_0_1; }

		//pure?=("pure" | "PURE")?
		public Assignment getPureAssignment_1_2() { return cPureAssignment_1_2; }

		//"pure" | "PURE"
		public Alternatives getPureAlternatives_1_2_0() { return cPureAlternatives_1_2_0; }

		//"pure"
		public Keyword getPurePureKeyword_1_2_0_0() { return cPurePureKeyword_1_2_0_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_1_2_0_1() { return cPurePUREKeyword_1_2_0_1; }

		//type=Type
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_3_0() { return cTypeTypeParserRuleCall_1_3_0; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_4_0() { return cNameTIDENTIFIERTerminalRuleCall_1_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_5() { return cLeftParenthesisKeyword_1_5; }

		//(params+=Param ("," params+=Param)*)?
		public Group getGroup_1_6() { return cGroup_1_6; }

		//params+=Param
		public Assignment getParamsAssignment_1_6_0() { return cParamsAssignment_1_6_0; }

		//Param
		public RuleCall getParamsParamParserRuleCall_1_6_0_0() { return cParamsParamParserRuleCall_1_6_0_0; }

		//("," params+=Param)*
		public Group getGroup_1_6_1() { return cGroup_1_6_1; }

		//","
		public Keyword getCommaKeyword_1_6_1_0() { return cCommaKeyword_1_6_1_0; }

		//params+=Param
		public Assignment getParamsAssignment_1_6_1_1() { return cParamsAssignment_1_6_1_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_1_6_1_1_0() { return cParamsParamParserRuleCall_1_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Param:
		//	type=Type var=Var;
		@Override public ParserRule getRule() { return rule; }

		//type=Type var=Var
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//var=Var
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_0() { return cVarVarParserRuleCall_1_0; }
	}

	public class VarInitListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarInitList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarInitListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVarInitsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarInitsVarInitParserRuleCall_1_0_0 = (RuleCall)cVarInitsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//VarInitList:
		//	{VarInitList} (varInits+=VarInit ";")*;
		@Override public ParserRule getRule() { return rule; }

		//{VarInitList} (varInits+=VarInit ";")*
		public Group getGroup() { return cGroup; }

		//{VarInitList}
		public Action getVarInitListAction_0() { return cVarInitListAction_0; }

		//(varInits+=VarInit ";")*
		public Group getGroup_1() { return cGroup_1; }

		//varInits+=VarInit
		public Assignment getVarInitsAssignment_1_0() { return cVarInitsAssignment_1_0; }

		//VarInit
		public RuleCall getVarInitsVarInitParserRuleCall_1_0_0() { return cVarInitsVarInitParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class LValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExprParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAtAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAtExprParserRuleCall_2_1_0 = (RuleCall)cAtAssignment_2_1.eContents().get(0);
		
		//LVal:
		//	name=TIDENTIFIER ("[" indices+=Expr "]")* ("@" at=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//name=TIDENTIFIER ("[" indices+=Expr "]")* ("@" at=Expr)?
		public Group getGroup() { return cGroup; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_0_0() { return cNameTIDENTIFIERTerminalRuleCall_0_0; }

		//("[" indices+=Expr "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indices+=Expr
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }

		//Expr
		public RuleCall getIndicesExprParserRuleCall_1_1_0() { return cIndicesExprParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//("@" at=Expr)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//at=Expr
		public Assignment getAtAssignment_2_1() { return cAtAssignment_2_1; }

		//Expr
		public RuleCall getAtExprParserRuleCall_2_1_0() { return cAtExprParserRuleCall_2_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cTernaryExprConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cThenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThenExprParserRuleCall_1_1_0 = (RuleCall)cThenAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElseAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElseExprParserRuleCall_1_3_0 = (RuleCall)cElseAssignment_1_3.eContents().get(0);
		
		//Expr:
		//	OrExpr (=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({TernaryExpr.condition=current} "?")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{TernaryExpr.condition=current} "?"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{TernaryExpr.condition=current}
		public Action getTernaryExprConditionAction_1_0_0_0() { return cTernaryExprConditionAction_1_0_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }

		//then=Expr
		public Assignment getThenAssignment_1_1() { return cThenAssignment_1_1; }

		//Expr
		public RuleCall getThenExprParserRuleCall_1_1_0() { return cThenExprParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//else=Expr
		public Assignment getElseAssignment_1_3() { return cElseAssignment_1_3; }

		//Expr
		public RuleCall getElseExprParserRuleCall_1_3_0() { return cElseExprParserRuleCall_1_3_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOrExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr (=> ({OrExpr.left=current} "||") right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({OrExpr.left=current} "||") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({OrExpr.left=current} "||") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({OrExpr.left=current} "||")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OrExpr.left=current} "||"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{OrExpr.left=current}
		public Action getOrExprLeftAction_1_0_0_0() { return cOrExprLeftAction_1_0_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_0_1() { return cVerticalLineVerticalLineKeyword_1_0_0_1; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAndExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseOrExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns Expr:
		//	BitwiseOrExpr (=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//BitwiseOrExpr (=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*
		public Group getGroup() { return cGroup; }

		//BitwiseOrExpr
		public RuleCall getBitwiseOrExprParserRuleCall_0() { return cBitwiseOrExprParserRuleCall_0; }

		//(=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({AndExpr.left=current} "&&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AndExpr.left=current} "&&"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AndExpr.left=current}
		public Action getAndExprLeftAction_1_0_0_0() { return cAndExprLeftAction_1_0_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_0_1() { return cAmpersandAmpersandKeyword_1_0_0_1; }

		//right=BitwiseOrExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitwiseOrExpr
		public RuleCall getRightBitwiseOrExprParserRuleCall_1_1_0() { return cRightBitwiseOrExprParserRuleCall_1_1_0; }
	}

	public class BitwiseOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBitwiseOrExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightXorExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseOrExpr returns Expr:
		//	XorExpr (=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//XorExpr (=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*
		public Group getGroup() { return cGroup; }

		//XorExpr
		public RuleCall getXorExprParserRuleCall_0() { return cXorExprParserRuleCall_0; }

		//(=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BitwiseOrExpr.left=current} "|")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BitwiseOrExpr.left=current} "|"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BitwiseOrExpr.left=current}
		public Action getBitwiseOrExprLeftAction_1_0_0_0() { return cBitwiseOrExprLeftAction_1_0_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_0_1() { return cVerticalLineKeyword_1_0_0_1; }

		//right=XorExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//XorExpr
		public RuleCall getRightXorExprParserRuleCall_1_1_0() { return cRightXorExprParserRuleCall_1_1_0; }
	}

	public class XorExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XorExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXorExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//XorExpr returns Expr:
		//	BitwiseAndExpr (=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//BitwiseAndExpr (=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*
		public Group getGroup() { return cGroup; }

		//BitwiseAndExpr
		public RuleCall getBitwiseAndExprParserRuleCall_0() { return cBitwiseAndExprParserRuleCall_0; }

		//(=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XorExpr.left=current} "^")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XorExpr.left=current} "^"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XorExpr.left=current}
		public Action getXorExprLeftAction_1_0_0_0() { return cXorExprLeftAction_1_0_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_0_1() { return cCircumflexAccentKeyword_1_0_0_1; }

		//right=BitwiseAndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitwiseAndExpr
		public RuleCall getRightBitwiseAndExprParserRuleCall_1_1_0() { return cRightBitwiseAndExprParserRuleCall_1_1_0; }
	}

	public class BitwiseAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBitwiseAndExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualityExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseAndExpr returns Expr:
		//	EqualityExpr (=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//EqualityExpr (=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*
		public Group getGroup() { return cGroup; }

		//EqualityExpr
		public RuleCall getEqualityExprParserRuleCall_0() { return cEqualityExprParserRuleCall_0; }

		//(=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BitwiseAndExpr.left=current} "&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BitwiseAndExpr.left=current} "&"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BitwiseAndExpr.left=current}
		public Action getBitwiseAndExprLeftAction_1_0_0_0() { return cBitwiseAndExprLeftAction_1_0_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_0_1() { return cAmpersandKeyword_1_0_0_1; }

		//right=EqualityExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//EqualityExpr
		public RuleCall getRightEqualityExprParserRuleCall_1_1_0() { return cRightEqualityExprParserRuleCall_1_1_0; }
	}

	public class EqualityExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cEqualityExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualityExpr returns Expr:
		//	CompareExpr (=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//CompareExpr (=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*
		public Group getGroup() { return cGroup; }

		//CompareExpr
		public RuleCall getCompareExprParserRuleCall_0() { return cCompareExprParserRuleCall_0; }

		//(=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({EqualityExpr.left=current} operator=EqualityOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{EqualityExpr.left=current} operator=EqualityOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{EqualityExpr.left=current}
		public Action getEqualityExprLeftAction_1_0_0_0() { return cEqualityExprLeftAction_1_0_0_0; }

		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_0_0_1_0; }

		//right=CompareExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//CompareExpr
		public RuleCall getRightCompareExprParserRuleCall_1_1_0() { return cRightCompareExprParserRuleCall_1_1_0; }
	}

	public class CompareExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCompareExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorCompareOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightShiftExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareExpr returns Expr:
		//	ShiftExpr (=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//ShiftExpr (=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*
		public Group getGroup() { return cGroup; }

		//ShiftExpr
		public RuleCall getShiftExprParserRuleCall_0() { return cShiftExprParserRuleCall_0; }

		//(=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({CompareExpr.left=current} operator=CompareOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{CompareExpr.left=current} operator=CompareOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{CompareExpr.left=current}
		public Action getCompareExprLeftAction_1_0_0_0() { return cCompareExprLeftAction_1_0_0_0; }

		//operator=CompareOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//CompareOperator
		public RuleCall getOperatorCompareOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorCompareOperatorEnumRuleCall_1_0_0_1_0; }

		//right=ShiftExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ShiftExpr
		public RuleCall getRightShiftExprParserRuleCall_1_1_0() { return cRightShiftExprParserRuleCall_1_1_0; }
	}

	public class ShiftExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cShiftExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorShiftOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditiveExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ShiftExpr returns Expr:
		//	AdditiveExpr (=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpr (=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpr
		public RuleCall getAdditiveExprParserRuleCall_0() { return cAdditiveExprParserRuleCall_0; }

		//(=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ShiftExpr.left=current} operator=ShiftOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ShiftExpr.left=current} operator=ShiftOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ShiftExpr.left=current}
		public Action getShiftExprLeftAction_1_0_0_0() { return cShiftExprLeftAction_1_0_0_0; }

		//operator=ShiftOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//ShiftOperator
		public RuleCall getOperatorShiftOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorShiftOperatorEnumRuleCall_1_0_0_1_0; }

		//right=AdditiveExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AdditiveExpr
		public RuleCall getRightAdditiveExprParserRuleCall_1_1_0() { return cRightAdditiveExprParserRuleCall_1_1_0; }
	}

	public class AdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAdditiveExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpr returns Expr:
		//	MultiplicativeExpr (=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpr (=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpr
		public RuleCall getMultiplicativeExprParserRuleCall_0() { return cMultiplicativeExprParserRuleCall_0; }

		//(=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({AdditiveExpr.left=current} operator=AdditiveOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AdditiveExpr.left=current} operator=AdditiveOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AdditiveExpr.left=current}
		public Action getAdditiveExprLeftAction_1_0_0_0() { return cAdditiveExprLeftAction_1_0_0_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0; }

		//right=MultiplicativeExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicativeExpr
		public RuleCall getRightMultiplicativeExprParserRuleCall_1_1_0() { return cRightMultiplicativeExprParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cMultiplicativeExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTerminalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpr returns Expr:
		//	TerminalExpr (=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//TerminalExpr (=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*
		public Group getGroup() { return cGroup; }

		//TerminalExpr
		public RuleCall getTerminalExprParserRuleCall_0() { return cTerminalExprParserRuleCall_0; }

		//(=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{MultiplicativeExpr.left=current} operator=MultiplicativeOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{MultiplicativeExpr.left=current}
		public Action getMultiplicativeExprLeftAction_1_0_0_0() { return cMultiplicativeExprLeftAction_1_0_0_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0; }

		//right=TerminalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TerminalExpr
		public RuleCall getRightTerminalExprParserRuleCall_1_1_0() { return cRightTerminalExprParserRuleCall_1_1_0; }
	}

	public class TerminalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLValParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIdExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIdKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDoubleExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNodeNumExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cUnaryExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cOperatorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_5_1_0 = (RuleCall)cOperatorAssignment_5_1.eContents().get(0);
		private final Assignment cOperandAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOperandExprParserRuleCall_5_2_0 = (RuleCall)cOperandAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBuiltInExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cFunctionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFunctionBuiltInFunctionParserRuleCall_6_1_0 = (RuleCall)cFunctionAssignment_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cFirstArgAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cFirstArgTIDENTIFIERTerminalRuleCall_6_3_0 = (RuleCall)cFirstArgAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cSecondArgAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cSecondArgExprParserRuleCall_6_5_0 = (RuleCall)cSecondArgAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final RuleCall cCallExprParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cExprParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//TerminalExpr returns Expr:
		//	LVal | {IdExpr} "id" | {IntExpr} value=INT | {DoubleExpr} value=Double | {NodeNumExpr} "#N" | {UnaryExpr}
		//	operator=UnaryOperator operand=Expr | {BuiltInExpr} function=BuiltInFunction "(" firstArg=TIDENTIFIER ","
		//	secondArg=Expr ")" | CallExpr | "(" Expr ")";
		@Override public ParserRule getRule() { return rule; }

		//LVal | {IdExpr} "id" | {IntExpr} value=INT | {DoubleExpr} value=Double | {NodeNumExpr} "#N" | {UnaryExpr}
		//operator=UnaryOperator operand=Expr | {BuiltInExpr} function=BuiltInFunction "(" firstArg=TIDENTIFIER ","
		//secondArg=Expr ")" | CallExpr | "(" Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LVal
		public RuleCall getLValParserRuleCall_0() { return cLValParserRuleCall_0; }

		//{IdExpr} "id"
		public Group getGroup_1() { return cGroup_1; }

		//{IdExpr}
		public Action getIdExprAction_1_0() { return cIdExprAction_1_0; }

		//"id"
		public Keyword getIdKeyword_1_1() { return cIdKeyword_1_1; }

		//{IntExpr} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntExpr}
		public Action getIntExprAction_2_0() { return cIntExprAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//{DoubleExpr} value=Double
		public Group getGroup_3() { return cGroup_3; }

		//{DoubleExpr}
		public Action getDoubleExprAction_3_0() { return cDoubleExprAction_3_0; }

		//value=Double
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_3_1_0() { return cValueDoubleParserRuleCall_3_1_0; }

		//{NodeNumExpr} "#N"
		public Group getGroup_4() { return cGroup_4; }

		//{NodeNumExpr}
		public Action getNodeNumExprAction_4_0() { return cNodeNumExprAction_4_0; }

		//"#N"
		public Keyword getNKeyword_4_1() { return cNKeyword_4_1; }

		//{UnaryExpr} operator=UnaryOperator operand=Expr
		public Group getGroup_5() { return cGroup_5; }

		//{UnaryExpr}
		public Action getUnaryExprAction_5_0() { return cUnaryExprAction_5_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_5_1() { return cOperatorAssignment_5_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_5_1_0() { return cOperatorUnaryOperatorEnumRuleCall_5_1_0; }

		//operand=Expr
		public Assignment getOperandAssignment_5_2() { return cOperandAssignment_5_2; }

		//Expr
		public RuleCall getOperandExprParserRuleCall_5_2_0() { return cOperandExprParserRuleCall_5_2_0; }

		//{BuiltInExpr} function=BuiltInFunction "(" firstArg=TIDENTIFIER "," secondArg=Expr ")"
		public Group getGroup_6() { return cGroup_6; }

		//{BuiltInExpr}
		public Action getBuiltInExprAction_6_0() { return cBuiltInExprAction_6_0; }

		//function=BuiltInFunction
		public Assignment getFunctionAssignment_6_1() { return cFunctionAssignment_6_1; }

		//BuiltInFunction
		public RuleCall getFunctionBuiltInFunctionParserRuleCall_6_1_0() { return cFunctionBuiltInFunctionParserRuleCall_6_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//firstArg=TIDENTIFIER
		public Assignment getFirstArgAssignment_6_3() { return cFirstArgAssignment_6_3; }

		//TIDENTIFIER
		public RuleCall getFirstArgTIDENTIFIERTerminalRuleCall_6_3_0() { return cFirstArgTIDENTIFIERTerminalRuleCall_6_3_0; }

		//","
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }

		//secondArg=Expr
		public Assignment getSecondArgAssignment_6_5() { return cSecondArgAssignment_6_5; }

		//Expr
		public RuleCall getSecondArgExprParserRuleCall_6_5_0() { return cSecondArgExprParserRuleCall_6_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }

		//CallExpr
		public RuleCall getCallExprParserRuleCall_7() { return cCallExprParserRuleCall_7; }

		//"(" Expr ")"
		public Group getGroup_8() { return cGroup_8; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//Expr
		public RuleCall getExprParserRuleCall_8_1() { return cExprParserRuleCall_8_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
	}

	public class CallExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNamespaceTIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cNamespaceAssignment_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgListArgListParserRuleCall_3_0 = (RuleCall)cArgListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommercialAtKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAtAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAtExprParserRuleCall_5_1_0 = (RuleCall)cAtAssignment_5_1.eContents().get(0);
		
		//CallExpr:
		//	(namespace=TIDENTIFIER "::")? name=TIDENTIFIER "(" argList=ArgList ")" ("@" at=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//(namespace=TIDENTIFIER "::")? name=TIDENTIFIER "(" argList=ArgList ")" ("@" at=Expr)?
		public Group getGroup() { return cGroup; }

		//(namespace=TIDENTIFIER "::")?
		public Group getGroup_0() { return cGroup_0; }

		//namespace=TIDENTIFIER
		public Assignment getNamespaceAssignment_0_0() { return cNamespaceAssignment_0_0; }

		//TIDENTIFIER
		public RuleCall getNamespaceTIDENTIFIERTerminalRuleCall_0_0_0() { return cNamespaceTIDENTIFIERTerminalRuleCall_0_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//name=TIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TIDENTIFIER
		public RuleCall getNameTIDENTIFIERTerminalRuleCall_1_0() { return cNameTIDENTIFIERTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//argList=ArgList
		public Assignment getArgListAssignment_3() { return cArgListAssignment_3; }

		//ArgList
		public RuleCall getArgListArgListParserRuleCall_3_0() { return cArgListArgListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("@" at=Expr)?
		public Group getGroup_5() { return cGroup_5; }

		//"@"
		public Keyword getCommercialAtKeyword_5_0() { return cCommercialAtKeyword_5_0; }

		//at=Expr
		public Assignment getAtAssignment_5_1() { return cAtAssignment_5_1; }

		//Expr
		public RuleCall getAtExprParserRuleCall_5_1_0() { return cAtExprParserRuleCall_5_1_0; }
	}

	public class ArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_1_0_0 = (RuleCall)cArgsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_1_1_1_0 = (RuleCall)cArgsAssignment_1_1_1.eContents().get(0);
		
		//ArgList:
		//	{ArgList} (args+=Expr ("," args+=Expr)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{ArgList} (args+=Expr ("," args+=Expr)*)?
		public Group getGroup() { return cGroup; }

		//{ArgList}
		public Action getArgListAction_0() { return cArgListAction_0; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_1() { return cGroup_1; }

		//args+=Expr
		public Assignment getArgsAssignment_1_0() { return cArgsAssignment_1_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_1_0_0() { return cArgsExprParserRuleCall_1_0_0; }

		//("," args+=Expr)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_1_1_1() { return cArgsAssignment_1_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_1_1_1_0() { return cArgsExprParserRuleCall_1_1_1_0; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Sign returns SignEnum:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class SimpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword c_BoolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVoidKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCharKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//SimpType returns SimpTypeEnum:
		//	"bool" | "_Bool" | "int" | "double" | "void" | "char";
		@Override public ParserRule getRule() { return rule; }

		//"bool" | "_Bool" | "int" | "double" | "void" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//"_Bool"
		public Keyword get_BoolKeyword_1() { return c_BoolKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }

		//"void"
		public Keyword getVoidKeyword_4() { return cVoidKeyword_4; }

		//"char"
		public Keyword getCharKeyword_5() { return cCharKeyword_5; }
	}

	public class SignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSignedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnsignedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Signed returns SignedEnum:
		//	"signed" | "unsigned";
		@Override public ParserRule getRule() { return rule; }

		//"signed" | "unsigned"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"signed"
		public Keyword getSignedKeyword_0() { return cSignedKeyword_0; }

		//"unsigned"
		public Keyword getUnsignedKeyword_1() { return cUnsignedKeyword_1; }
	}

	public class BuiltInFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExists_otherKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEXISTS_OTHERKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExists_higherKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEXISTS_HIGHERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExists_lowerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEXISTS_LOWERKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BuiltInFunction returns BuiltInFunctionEnum:
		//	"exists_other" | "EXISTS_OTHER" | "exists_higher" | "EXISTS_HIGHER" | "exists_lower" | "EXISTS_LOWER";
		@Override public ParserRule getRule() { return rule; }

		//"exists_other" | "EXISTS_OTHER" | "exists_higher" | "EXISTS_HIGHER" | "exists_lower" | "EXISTS_LOWER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"exists_other"
		public Keyword getExists_otherKeyword_0() { return cExists_otherKeyword_0; }

		//"EXISTS_OTHER"
		public Keyword getEXISTS_OTHERKeyword_1() { return cEXISTS_OTHERKeyword_1; }

		//"exists_higher"
		public Keyword getExists_higherKeyword_2() { return cExists_higherKeyword_2; }

		//"EXISTS_HIGHER"
		public Keyword getEXISTS_HIGHERKeyword_3() { return cEXISTS_HIGHERKeyword_3; }

		//"exists_lower"
		public Keyword getExists_lowerKeyword_4() { return cExists_lowerKeyword_4; }

		//"EXISTS_LOWER"
		public Keyword getEXISTS_LOWERKeyword_5() { return cEXISTS_LOWERKeyword_5; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNANKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//	"NAN" | INT "." INT?;
		@Override public ParserRule getRule() { return rule; }

		//"NAN" | INT "." INT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NAN"
		public Keyword getNANKeyword_0() { return cNANKeyword_0; }

		//INT "." INT?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	
	
	public class SignEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SignEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnsetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnsetUnsetKeyword_0_0 = (Keyword)cUnsetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SignEnum:
		//	unset | PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//unset | PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//unset
		public EnumLiteralDeclaration getUnsetEnumLiteralDeclaration_0() { return cUnsetEnumLiteralDeclaration_0; }

		//"unset"
		public Keyword getUnsetUnsetKeyword_0_0() { return cUnsetUnsetKeyword_0_0; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
	}

	public class SimpTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimpTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoolBoolKeyword_0_0 = (Keyword)cBoolEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDoubleDoubleKeyword_2_0 = (Keyword)cDoubleEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cVoidVoidKeyword_3_0 = (Keyword)cVoidEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCharCharKeyword_4_0 = (Keyword)cCharEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SimpTypeEnum:
		//	bool | int | double | void | char;
		public EnumRule getRule() { return rule; }

		//bool | int | double | void | char
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_0() { return cBoolEnumLiteralDeclaration_0; }

		//"bool"
		public Keyword getBoolBoolKeyword_0_0() { return cBoolBoolKeyword_0_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }

		//"int"
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_2() { return cDoubleEnumLiteralDeclaration_2; }

		//"double"
		public Keyword getDoubleDoubleKeyword_2_0() { return cDoubleDoubleKeyword_2_0; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_3() { return cVoidEnumLiteralDeclaration_3; }

		//"void"
		public Keyword getVoidVoidKeyword_3_0() { return cVoidVoidKeyword_3_0; }

		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_4() { return cCharEnumLiteralDeclaration_4; }

		//"char"
		public Keyword getCharCharKeyword_4_0() { return cCharCharKeyword_4_0; }
	}

	public class SignedEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SignedEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnsetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnsetUnsetKeyword_0_0 = (Keyword)cUnsetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSignedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSignedSignedKeyword_1_0 = (Keyword)cSignedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnsignedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnsignedUnsignedKeyword_2_0 = (Keyword)cUnsignedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SignedEnum:
		//	unset | signed | unsigned;
		public EnumRule getRule() { return rule; }

		//unset | signed | unsigned
		public Alternatives getAlternatives() { return cAlternatives; }

		//unset
		public EnumLiteralDeclaration getUnsetEnumLiteralDeclaration_0() { return cUnsetEnumLiteralDeclaration_0; }

		//"unset"
		public Keyword getUnsetUnsetKeyword_0_0() { return cUnsetUnsetKeyword_0_0; }

		//signed
		public EnumLiteralDeclaration getSignedEnumLiteralDeclaration_1() { return cSignedEnumLiteralDeclaration_1; }

		//"signed"
		public Keyword getSignedSignedKeyword_1_0() { return cSignedSignedKeyword_1_0; }

		//unsigned
		public EnumLiteralDeclaration getUnsignedEnumLiteralDeclaration_2() { return cUnsignedEnumLiteralDeclaration_2; }

		//"unsigned"
		public Keyword getUnsignedUnsignedKeyword_2_0() { return cUnsignedUnsignedKeyword_2_0; }
	}

	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator:
		//	EQUAL="==" | NOT_EQUAL="!=";
		public EnumRule getRule() { return rule; }

		//EQUAL="==" | NOT_EQUAL="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }

		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0; }
	}

	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERGreaterThanSignKeyword_2_0 = (Keyword)cGREATEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompareOperator:
		//	LESS="<" | LESS_EQUAL="<=" | GREATER=">" | GREATER_EQUAL=">=";
		public EnumRule getRule() { return rule; }

		//LESS="<" | LESS_EQUAL="<=" | GREATER=">" | GREATER_EQUAL=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }

		//LESS_EQUAL="<="
		public EnumLiteralDeclaration getLESS_EQUALEnumLiteralDeclaration_1() { return cLESS_EQUALEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLESS_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_EQUALLessThanSignEqualsSignKeyword_1_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_2() { return cGREATEREnumLiteralDeclaration_2; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_2_0() { return cGREATERGreaterThanSignKeyword_2_0; }

		//GREATER_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_3() { return cGREATER_EQUALEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0; }
	}

	public class ShiftOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOperator:
		//	LEFT="<<" | RIGHT=">>";
		public EnumRule getRule() { return rule; }

		//LEFT="<<" | RIGHT=">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFT="<<"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }

		//"<<"
		public Keyword getLEFTLessThanSignLessThanSignKeyword_0_0() { return cLEFTLessThanSignLessThanSignKeyword_0_0; }

		//RIGHT=">>"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }

		//">>"
		public Keyword getRIGHTGreaterThanSignGreaterThanSignKeyword_1_0() { return cRIGHTGreaterThanSignGreaterThanSignKeyword_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	ADD="+" | SUBTRACT="-";
		public EnumRule getRule() { return rule; }

		//ADD="+" | SUBTRACT="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//SUBTRACT="-"
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODULUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODULUSPercentSignKeyword_2_0 = (Keyword)cMODULUSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	MULTIPLY="*" | DIVIDE="/" | MODULUS="%";
		public EnumRule getRule() { return rule; }

		//MULTIPLY="*" | DIVIDE="/" | MODULUS="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MULTIPLY="*"
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }

		//DIVIDE="/"
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }

		//MODULUS="%"
		public EnumLiteralDeclaration getMODULUSEnumLiteralDeclaration_2() { return cMODULUSEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getMODULUSPercentSignKeyword_2_0() { return cMODULUSPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUSHyphenMinusKeyword_0_0 = (Keyword)cMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_NOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOGICAL_NOTExclamationMarkKeyword_2_0 = (Keyword)cLOGICAL_NOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBITWISE_NOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBITWISE_NOTTildeKeyword_3_0 = (Keyword)cBITWISE_NOTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnaryOperator:
		//	MINUS="-" | PLUS="+" | LOGICAL_NOT="!" | BITWISE_NOT="~";
		public EnumRule getRule() { return rule; }

		//MINUS="-" | PLUS="+" | LOGICAL_NOT="!" | BITWISE_NOT="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_0() { return cMINUSEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_0_0() { return cMINUSHyphenMinusKeyword_0_0; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }

		//LOGICAL_NOT="!"
		public EnumLiteralDeclaration getLOGICAL_NOTEnumLiteralDeclaration_2() { return cLOGICAL_NOTEnumLiteralDeclaration_2; }

		//"!"
		public Keyword getLOGICAL_NOTExclamationMarkKeyword_2_0() { return cLOGICAL_NOTExclamationMarkKeyword_2_0; }

		//BITWISE_NOT="~"
		public EnumLiteralDeclaration getBITWISE_NOTEnumLiteralDeclaration_3() { return cBITWISE_NOTEnumLiteralDeclaration_3; }

		//"~"
		public Keyword getBITWISE_NOTTildeKeyword_3_0() { return cBITWISE_NOTTildeKeyword_3_0; }
	}

	public class BuiltInFunctionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunctionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cExists_otherEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cExists_otherExists_otherKeyword_0_0 = (Keyword)cExists_otherEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExists_higherEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExists_higherExists_higherKeyword_1_0 = (Keyword)cExists_higherEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExists_lowerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExists_lowerExists_lowerKeyword_2_0 = (Keyword)cExists_lowerEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BuiltInFunctionEnum:
		//	exists_other | exists_higher | exists_lower;
		public EnumRule getRule() { return rule; }

		//exists_other | exists_higher | exists_lower
		public Alternatives getAlternatives() { return cAlternatives; }

		//exists_other
		public EnumLiteralDeclaration getExists_otherEnumLiteralDeclaration_0() { return cExists_otherEnumLiteralDeclaration_0; }

		//"exists_other"
		public Keyword getExists_otherExists_otherKeyword_0_0() { return cExists_otherExists_otherKeyword_0_0; }

		//exists_higher
		public EnumLiteralDeclaration getExists_higherEnumLiteralDeclaration_1() { return cExists_higherEnumLiteralDeclaration_1; }

		//"exists_higher"
		public Keyword getExists_higherExists_higherKeyword_1_0() { return cExists_higherExists_higherKeyword_1_0; }

		//exists_lower
		public EnumLiteralDeclaration getExists_lowerEnumLiteralDeclaration_2() { return cExists_lowerEnumLiteralDeclaration_2; }

		//"exists_lower"
		public Keyword getExists_lowerExists_lowerKeyword_2_0() { return cExists_lowerExists_lowerKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final DmplSubclauseElements pDmplSubclause;
	private final ProgramElementElements pProgramElement;
	private final ConstantElements pConstant;
	private final NumberConstElements pNumberConst;
	private final IntConstElements pIntConst;
	private final DoubleConstElements pDoubleConst;
	private final VarInitElements pVarInit;
	private final VarAsgnListElements pVarAsgnList;
	private final VarAsgnElements pVarAsgn;
	private final VarElements pVar;
	private final DimensionElements pDimension;
	private final TypeElements pType;
	private final ProcedureElements pProcedure;
	private final ProcNoAttrElements pProcNoAttr;
	private final FnBodyElements pFnBody;
	private final FnPrototypeElements pFnPrototype;
	private final ParamElements pParam;
	private final VarInitListElements pVarInitList;
	private final LValElements pLVal;
	private final ExprElements pExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final BitwiseOrExprElements pBitwiseOrExpr;
	private final XorExprElements pXorExpr;
	private final BitwiseAndExprElements pBitwiseAndExpr;
	private final EqualityExprElements pEqualityExpr;
	private final CompareExprElements pCompareExpr;
	private final ShiftExprElements pShiftExpr;
	private final AdditiveExprElements pAdditiveExpr;
	private final MultiplicativeExprElements pMultiplicativeExpr;
	private final TerminalExprElements pTerminalExpr;
	private final CallExprElements pCallExpr;
	private final ArgListElements pArgList;
	private final SignEnumElements unknownRuleSignEnum;
	private final SignElements pSign;
	private final SimpTypeEnumElements unknownRuleSimpTypeEnum;
	private final SimpTypeElements pSimpType;
	private final SignedEnumElements unknownRuleSignedEnum;
	private final SignedElements pSigned;
	private final EqualityOperatorElements unknownRuleEqualityOperator;
	private final CompareOperatorElements unknownRuleCompareOperator;
	private final ShiftOperatorElements unknownRuleShiftOperator;
	private final AdditiveOperatorElements unknownRuleAdditiveOperator;
	private final MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private final UnaryOperatorElements unknownRuleUnaryOperator;
	private final BuiltInFunctionEnumElements unknownRuleBuiltInFunctionEnum;
	private final BuiltInFunctionElements pBuiltInFunction;
	private final DoubleElements pDouble;
	private final TerminalRule tTIDENTIFIER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DmplGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pDmplSubclause = new DmplSubclauseElements();
		this.pProgramElement = new ProgramElementElements();
		this.pConstant = new ConstantElements();
		this.pNumberConst = new NumberConstElements();
		this.pIntConst = new IntConstElements();
		this.pDoubleConst = new DoubleConstElements();
		this.pVarInit = new VarInitElements();
		this.pVarAsgnList = new VarAsgnListElements();
		this.pVarAsgn = new VarAsgnElements();
		this.pVar = new VarElements();
		this.pDimension = new DimensionElements();
		this.pType = new TypeElements();
		this.pProcedure = new ProcedureElements();
		this.pProcNoAttr = new ProcNoAttrElements();
		this.pFnBody = new FnBodyElements();
		this.pFnPrototype = new FnPrototypeElements();
		this.pParam = new ParamElements();
		this.pVarInitList = new VarInitListElements();
		this.pLVal = new LValElements();
		this.pExpr = new ExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pBitwiseOrExpr = new BitwiseOrExprElements();
		this.pXorExpr = new XorExprElements();
		this.pBitwiseAndExpr = new BitwiseAndExprElements();
		this.pEqualityExpr = new EqualityExprElements();
		this.pCompareExpr = new CompareExprElements();
		this.pShiftExpr = new ShiftExprElements();
		this.pAdditiveExpr = new AdditiveExprElements();
		this.pMultiplicativeExpr = new MultiplicativeExprElements();
		this.pTerminalExpr = new TerminalExprElements();
		this.pCallExpr = new CallExprElements();
		this.pArgList = new ArgListElements();
		this.unknownRuleSignEnum = new SignEnumElements();
		this.pSign = new SignElements();
		this.unknownRuleSimpTypeEnum = new SimpTypeEnumElements();
		this.pSimpType = new SimpTypeElements();
		this.unknownRuleSignedEnum = new SignedEnumElements();
		this.pSigned = new SignedElements();
		this.unknownRuleEqualityOperator = new EqualityOperatorElements();
		this.unknownRuleCompareOperator = new CompareOperatorElements();
		this.unknownRuleShiftOperator = new ShiftOperatorElements();
		this.unknownRuleAdditiveOperator = new AdditiveOperatorElements();
		this.unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.unknownRuleUnaryOperator = new UnaryOperatorElements();
		this.unknownRuleBuiltInFunctionEnum = new BuiltInFunctionEnumElements();
		this.pBuiltInFunction = new BuiltInFunctionElements();
		this.pDouble = new DoubleElements();
		this.tTIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.annex.dmpl.Dmpl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} programElements+=ProgramElement*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	DmplSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//DmplSubclause:
	//	{DmplSubclause} program=Program;
	public DmplSubclauseElements getDmplSubclauseAccess() {
		return pDmplSubclause;
	}
	
	public ParserRule getDmplSubclauseRule() {
		return getDmplSubclauseAccess().getRule();
	}

	//ProgramElement: //TODO: target, node
	//	Constant | Procedure;
	public ProgramElementElements getProgramElementAccess() {
		return pProgramElement;
	}
	
	public ParserRule getProgramElementRule() {
		return getProgramElementAccess().getRule();
	}

	//Constant:
	//	("const" | "CONST") name=TIDENTIFIER "=" value=NumberConst ";";
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumberConst:
	//	IntConst | DoubleConst;
	public NumberConstElements getNumberConstAccess() {
		return pNumberConst;
	}
	
	public ParserRule getNumberConstRule() {
		return getNumberConstAccess().getRule();
	}

	//IntConst:
	//	sign=Sign? value=INT;
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}

	//DoubleConst:
	//	sign=Sign? value=Double;
	public DoubleConstElements getDoubleConstAccess() {
		return pDoubleConst;
	}
	
	public ParserRule getDoubleConstRule() {
		return getDoubleConstAccess().getRule();
	}

	//VarInit:
	//	type=Type varAsgnList=VarAsgnList;
	public VarInitElements getVarInitAccess() {
		return pVarInit;
	}
	
	public ParserRule getVarInitRule() {
		return getVarInitAccess().getRule();
	}

	//VarAsgnList: //TODO 'input', and multiplicity
	//	var=Var | varAsgn=VarAsgn;
	public VarAsgnListElements getVarAsgnListAccess() {
		return pVarAsgnList;
	}
	
	public ParserRule getVarAsgnListRule() {
		return getVarAsgnListAccess().getRule();
	}

	//VarAsgn:
	//	{ExprVarAsgn} (var=Var "=" | input?="input" var=Var "~") expr=Expr | {FnVarAsgn} (var=Var "=" | input?="input" var=Var
	//	"~") fnBody=FnBody;
	public VarAsgnElements getVarAsgnAccess() {
		return pVarAsgn;
	}
	
	public ParserRule getVarAsgnRule() {
		return getVarAsgnAccess().getRule();
	}

	//Var:
	//	name=TIDENTIFIER ("[" dimensions+=Dimension "]")*;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Dimension:
	//	{IntDimension} index=INT | {NodeNumDimension} "#N" | {IdDimension} index=TIDENTIFIER;
	public DimensionElements getDimensionAccess() {
		return pDimension;
	}
	
	public ParserRule getDimensionRule() {
		return getDimensionAccess().getRule();
	}

	//Type:
	//	signed=Signed? simpType=SimpType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Procedure: //TODO: OVERRIDE and attr_list
	//	procedure=ProcNoAttr;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//ProcNoAttr: //TODO: fn_body
	//	prototype=FnPrototype (";" | fnBody=FnBody);
	public ProcNoAttrElements getProcNoAttrAccess() {
		return pProcNoAttr;
	}
	
	public ParserRule getProcNoAttrRule() {
		return getProcNoAttrAccess().getRule();
	}

	//FnBody: //TODO var_init_list and stmt_list
	//	"{" varInitList=VarInitList "}";
	public FnBodyElements getFnBodyAccess() {
		return pFnBody;
	}
	
	public ParserRule getFnBodyRule() {
		return getFnBodyAccess().getRule();
	}

	//FnPrototype:
	//	{ThreadDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? "thread" name=TIDENTIFIER |
	//	{FnPrototypeDeclaration} extern?=("extern" | "EXTERN")? pure?=("pure" | "PURE")? type=Type name=TIDENTIFIER "("
	//	(params+=Param ("," params+=Param)*)? ")";
	public FnPrototypeElements getFnPrototypeAccess() {
		return pFnPrototype;
	}
	
	public ParserRule getFnPrototypeRule() {
		return getFnPrototypeAccess().getRule();
	}

	//Param:
	//	type=Type var=Var;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//VarInitList:
	//	{VarInitList} (varInits+=VarInit ";")*;
	public VarInitListElements getVarInitListAccess() {
		return pVarInitList;
	}
	
	public ParserRule getVarInitListRule() {
		return getVarInitListAccess().getRule();
	}

	//LVal:
	//	name=TIDENTIFIER ("[" indices+=Expr "]")* ("@" at=Expr)?;
	public LValElements getLValAccess() {
		return pLVal;
	}
	
	public ParserRule getLValRule() {
		return getLValAccess().getRule();
	}

	//Expr:
	//	OrExpr (=> ({TernaryExpr.condition=current} "?") then=Expr ":" else=Expr)?;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr (=> ({OrExpr.left=current} "||") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	BitwiseOrExpr (=> ({AndExpr.left=current} "&&") right=BitwiseOrExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//BitwiseOrExpr returns Expr:
	//	XorExpr (=> ({BitwiseOrExpr.left=current} "|") right=XorExpr)*;
	public BitwiseOrExprElements getBitwiseOrExprAccess() {
		return pBitwiseOrExpr;
	}
	
	public ParserRule getBitwiseOrExprRule() {
		return getBitwiseOrExprAccess().getRule();
	}

	//XorExpr returns Expr:
	//	BitwiseAndExpr (=> ({XorExpr.left=current} "^") right=BitwiseAndExpr)*;
	public XorExprElements getXorExprAccess() {
		return pXorExpr;
	}
	
	public ParserRule getXorExprRule() {
		return getXorExprAccess().getRule();
	}

	//BitwiseAndExpr returns Expr:
	//	EqualityExpr (=> ({BitwiseAndExpr.left=current} "&") right=EqualityExpr)*;
	public BitwiseAndExprElements getBitwiseAndExprAccess() {
		return pBitwiseAndExpr;
	}
	
	public ParserRule getBitwiseAndExprRule() {
		return getBitwiseAndExprAccess().getRule();
	}

	//EqualityExpr returns Expr:
	//	CompareExpr (=> ({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*;
	public EqualityExprElements getEqualityExprAccess() {
		return pEqualityExpr;
	}
	
	public ParserRule getEqualityExprRule() {
		return getEqualityExprAccess().getRule();
	}

	//CompareExpr returns Expr:
	//	ShiftExpr (=> ({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*;
	public CompareExprElements getCompareExprAccess() {
		return pCompareExpr;
	}
	
	public ParserRule getCompareExprRule() {
		return getCompareExprAccess().getRule();
	}

	//ShiftExpr returns Expr:
	//	AdditiveExpr (=> ({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*;
	public ShiftExprElements getShiftExprAccess() {
		return pShiftExpr;
	}
	
	public ParserRule getShiftExprRule() {
		return getShiftExprAccess().getRule();
	}

	//AdditiveExpr returns Expr:
	//	MultiplicativeExpr (=> ({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*;
	public AdditiveExprElements getAdditiveExprAccess() {
		return pAdditiveExpr;
	}
	
	public ParserRule getAdditiveExprRule() {
		return getAdditiveExprAccess().getRule();
	}

	//MultiplicativeExpr returns Expr:
	//	TerminalExpr (=> ({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*;
	public MultiplicativeExprElements getMultiplicativeExprAccess() {
		return pMultiplicativeExpr;
	}
	
	public ParserRule getMultiplicativeExprRule() {
		return getMultiplicativeExprAccess().getRule();
	}

	//TerminalExpr returns Expr:
	//	LVal | {IdExpr} "id" | {IntExpr} value=INT | {DoubleExpr} value=Double | {NodeNumExpr} "#N" | {UnaryExpr}
	//	operator=UnaryOperator operand=Expr | {BuiltInExpr} function=BuiltInFunction "(" firstArg=TIDENTIFIER ","
	//	secondArg=Expr ")" | CallExpr | "(" Expr ")";
	public TerminalExprElements getTerminalExprAccess() {
		return pTerminalExpr;
	}
	
	public ParserRule getTerminalExprRule() {
		return getTerminalExprAccess().getRule();
	}

	//CallExpr:
	//	(namespace=TIDENTIFIER "::")? name=TIDENTIFIER "(" argList=ArgList ")" ("@" at=Expr)?;
	public CallExprElements getCallExprAccess() {
		return pCallExpr;
	}
	
	public ParserRule getCallExprRule() {
		return getCallExprAccess().getRule();
	}

	//ArgList:
	//	{ArgList} (args+=Expr ("," args+=Expr)*)?;
	public ArgListElements getArgListAccess() {
		return pArgList;
	}
	
	public ParserRule getArgListRule() {
		return getArgListAccess().getRule();
	}

	//enum SignEnum:
	//	unset | PLUS="+" | MINUS="-";
	public SignEnumElements getSignEnumAccess() {
		return unknownRuleSignEnum;
	}
	
	public EnumRule getSignEnumRule() {
		return getSignEnumAccess().getRule();
	}

	//Sign returns SignEnum:
	//	"+" | "-";
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//enum SimpTypeEnum:
	//	bool | int | double | void | char;
	public SimpTypeEnumElements getSimpTypeEnumAccess() {
		return unknownRuleSimpTypeEnum;
	}
	
	public EnumRule getSimpTypeEnumRule() {
		return getSimpTypeEnumAccess().getRule();
	}

	//SimpType returns SimpTypeEnum:
	//	"bool" | "_Bool" | "int" | "double" | "void" | "char";
	public SimpTypeElements getSimpTypeAccess() {
		return pSimpType;
	}
	
	public ParserRule getSimpTypeRule() {
		return getSimpTypeAccess().getRule();
	}

	//enum SignedEnum:
	//	unset | signed | unsigned;
	public SignedEnumElements getSignedEnumAccess() {
		return unknownRuleSignedEnum;
	}
	
	public EnumRule getSignedEnumRule() {
		return getSignedEnumAccess().getRule();
	}

	//Signed returns SignedEnum:
	//	"signed" | "unsigned";
	public SignedElements getSignedAccess() {
		return pSigned;
	}
	
	public ParserRule getSignedRule() {
		return getSignedAccess().getRule();
	}

	//enum EqualityOperator:
	//	EQUAL="==" | NOT_EQUAL="!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return unknownRuleEqualityOperator;
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//enum CompareOperator:
	//	LESS="<" | LESS_EQUAL="<=" | GREATER=">" | GREATER_EQUAL=">=";
	public CompareOperatorElements getCompareOperatorAccess() {
		return unknownRuleCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//	LEFT="<<" | RIGHT=">>";
	public ShiftOperatorElements getShiftOperatorAccess() {
		return unknownRuleShiftOperator;
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//	ADD="+" | SUBTRACT="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return unknownRuleAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	MULTIPLY="*" | DIVIDE="/" | MODULUS="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return unknownRuleMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	MINUS="-" | PLUS="+" | LOGICAL_NOT="!" | BITWISE_NOT="~";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return unknownRuleUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum BuiltInFunctionEnum:
	//	exists_other | exists_higher | exists_lower;
	public BuiltInFunctionEnumElements getBuiltInFunctionEnumAccess() {
		return unknownRuleBuiltInFunctionEnum;
	}
	
	public EnumRule getBuiltInFunctionEnumRule() {
		return getBuiltInFunctionEnumAccess().getRule();
	}

	//BuiltInFunction returns BuiltInFunctionEnum:
	//	"exists_other" | "EXISTS_OTHER" | "exists_higher" | "EXISTS_HIGHER" | "exists_lower" | "EXISTS_LOWER";
	public BuiltInFunctionElements getBuiltInFunctionAccess() {
		return pBuiltInFunction;
	}
	
	public ParserRule getBuiltInFunctionRule() {
		return getBuiltInFunctionAccess().getRule();
	}

	//Double returns ecore::EDouble:
	//	"NAN" | INT "." INT?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//terminal TIDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getTIDENTIFIERRule() {
		return tTIDENTIFIER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
