grammar edu.cmu.sei.annex.dmpl.Dmpl with org.eclipse.xtext.common.Terminals

generate dmpl "http://www.cmu.edu/sei/annex/dmpl/Dmpl"

import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program:
	{Program}
	programElements+=ProgramElement*
;

AnnexSubclause returns aadl2::AnnexSubclause:
	DmplSubclause
;

DmplSubclause: {DmplSubclause}
	program=Program
;

ProgramElement:
	//TODO: target, node
	Constant | Node | Procedure
;

Constant:
	('const' | 'CONST') name=TIDENTIFIER '=' value=NumberConst ';'
;

NumberConst:
	IntConst | DoubleConst
;

IntConst:
	sign=Sign? value=INT
;

DoubleConst:
	sign=Sign? value=Double
;

//TODO
Node:
	node=NodeNoAttr
;

//TODO
NodeNoAttr:
	('node' | 'NODE') name=TIDENTIFIER (';' | '{' body=NodeBody '}')
;

//TODO
Specification:
	spec=SpecNoAttr
;

SpecNoAttr:
	{AtEndSpec} 'expect' name=TIDENTIFIER ':' 'at_end' '=>' function=TIDENTIFIER ';' |
	{AtLeastSpec} 'expect' name=TIDENTIFIER ':' 'at_least' threshold=DoubleConst '=>' function=TIDENTIFIER ';' |
	{RequireSpec} 'require' name=TIDENTIFIER '=>' function=TIDENTIFIER ';'
;

//TODO
NodeBody:
	{NodeBody} (elements+=NodeBodyElement)*
;

//TODO
NodeBodyElement:
	VarBlock | RecordBlock | Procedure | Specification
;

VarBlock:
	override?='override'? var=NodeVarInit ';'
;

RecordBlock:
	override?='override'? 'record' name=TIDENTIFIER '{' (vars+=NodeVarInit ';')+ '}' ('=' equalsBody=FnBody)? ('~' complementBody=FnBody)?
;

NodeVarInit:
	scope=NodeVarScope var=VarInit
;

VarInit:
	type=Type varAsgns+=VarAsgn (',' varAsgns+=VarAsgn)*
;

VarAsgn:
	input?='input'? var=Var |
	{ExprVarAsgn} (var=Var '=' | input?='input' var=Var '~') expr=Expr |
	{FnVarAsgn} (var=Var '=' | input?='input' var=Var '~') fnBody=FnBody
;

Var:
	name=TIDENTIFIER ('[' dimensions+=Dimension ']')*
;

Dimension:
	{IntDimension} index=INT |
	{NodeNumDimension} '#N' |
	{IdDimension} index=TIDENTIFIER
;

Type:
	signed=Signed? simpType=SimpType
;

Procedure:
	attrList=AttrList? override?='override'? prototype=FnPrototype (';' | fnBody=FnBody)
;

FnBody:
	{FnBody} '{' (varInits+=VarInit ';')* stmts+=Stmt* '}'
;

FnPrototype:
	{ThreadDeclaration} extern?=('extern' | 'EXTERN')? pure?=('pure' | 'PURE')? 'thread' name=TIDENTIFIER |
	{FnPrototypeDeclaration} extern?=('extern' | 'EXTERN')? pure?=('pure' | 'PURE')? type=Type name=TIDENTIFIER '('
		(params+=Param (',' params+=Param)*)?
	')'
;

AttrList:
	(attrs+=Attr ';')+
;

Attr:
	'@' name=TIDENTIFIER ('(' params+=Expr (',' params+=Expr)* ')')?
;

Param:
	type=Type var=Var
;

Stmt:
	{NestedStmt} '{' stmts+=Stmt* '}' |
	AssignmentStmt ';' |
	{WhileStmt} 'while' '(' condition=Expr ')' stmt=Stmt |
	{ForStmt} 'for' '(' (inits+=AssignmentStmt (',' inits+=AssignmentStmt)*)? ';' condition=Expr? ';' update=AssignmentStmt? ')' stmt=Stmt |
	{CondStmt} attrList=AttrList? 'if' '(' condition=Expr ')' then=Stmt (=> 'else' else=Stmt)? |
	{SimpleStmt} name=SimpleStmtKeyword ';' |
	{ReturnValueStmt} 'return' value=Expr ';' |
	CallExpr ';' |
	{ForAllStmt} name=ForAllFunction '(' node=TIDENTIFIER ')' stmt=Stmt |
	{FadnpStmt} ('forall_distinct_node_pair' | 'FORALL_DISTINCT_NODE_PAIR') '(' node1=TIDENTIFIER ',' node2=TIDENTIFIER ')' stmt=Stmt
;

AssignmentStmt:
	variable=LVal '=' value=Expr
;

LVal:
	name=TIDENTIFIER ('[' indices+=Expr ']')* ('@' at=Expr)?
;

Expr:
	OrExpr (=>({TernaryExpr.condition=current} '?') then=Expr ':' else=Expr)?
;

OrExpr returns Expr:
	AndExpr (=>({OrExpr.left=current} '||') right=AndExpr)*
;

AndExpr returns Expr:
	BitwiseOrExpr (=>({AndExpr.left=current} '&&') right=BitwiseOrExpr)*
;

BitwiseOrExpr returns Expr:
	XorExpr (=>({BitwiseOrExpr.left=current} '|') right=XorExpr)*
;

XorExpr returns Expr:
	BitwiseAndExpr (=>({XorExpr.left=current} '^') right=BitwiseAndExpr)*
;

BitwiseAndExpr returns Expr:
	EqualityExpr (=>({BitwiseAndExpr.left=current} '&') right=EqualityExpr)*
;

EqualityExpr returns Expr:
	CompareExpr (=>({EqualityExpr.left=current} operator=EqualityOperator) right=CompareExpr)*
;

CompareExpr returns Expr:
	ShiftExpr (=>({CompareExpr.left=current} operator=CompareOperator) right=ShiftExpr)*
;

ShiftExpr returns Expr:
	AdditiveExpr (=>({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*
;

AdditiveExpr returns Expr:
	MultiplicativeExpr (=>({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*
;

MultiplicativeExpr returns Expr:
	TerminalExpr (=>({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*
;

TerminalExpr returns Expr:
	LVal |
	{IdExpr} 'id' |
	{IntExpr} value=INT |
	{DoubleExpr} value=Double |
	{NodeNumExpr} '#N' |
	{UnaryExpr} operator=UnaryOperator operand=Expr |
	{BuiltInExpr} function=BuiltInFunction '(' firstArg=TIDENTIFIER ',' secondArg=Expr ')' |
	CallExpr |
	'(' Expr ')'
;

CallExpr:
	(namespace=TIDENTIFIER '::')? name=TIDENTIFIER '(' (args+=Expr (',' args+=Expr)*)? ')' ('@' at=Expr)?
;

enum SignEnum:
	unset |
	PLUS='+' |
	MINUS='-'
;

Sign returns SignEnum:
	'+' | '-'
;

enum SimpTypeEnum:
	bool | int | double | void | char
;

SimpType returns SimpTypeEnum:
	'bool' | '_Bool' | 'int' | 'double' | 'void' | 'char'
;

enum SignedEnum:
	unset | signed | unsigned
;

Signed returns SignedEnum:
	'signed' | 'unsigned'
;

enum SimpleStmtKeywordEnum:
	break | continue | return
;

SimpleStmtKeyword returns SimpleStmtKeywordEnum:
	'break' | 'continue' | 'return'
;

enum ForAllFunctionEnum:
	forall_node | forall_other | forall_other_lower | forall_other_higher
;

ForAllFunction returns ForAllFunctionEnum:
	'forall_node' | 'FORALL_NODE' | 'forall_other' | 'FORALL_OTHER' | 'forall_other_lower' | 'FORALL_OTHER_LOWER' | 'forall_other_higher' | 'FORALL_OTHER_HIGHER'
;

enum NodeVarScopeEnum:
	global | local | group
;

NodeVarScope returns NodeVarScopeEnum:
	'global' | 'GLOBAL' | 'local' | 'LOCAL' | 'group'
;

enum EqualityOperator:
	EQUAL='==' |
	NOT_EQUAL='!='
;

enum CompareOperator:
	LESS='<' |
	LESS_EQUAL='<=' |
	GREATER='>' |
	GREATER_EQUAL='>='
;

enum ShiftOperator:
	LEFT='<<' |
	RIGHT='>>'
;

enum AdditiveOperator:
	ADD='+' |
	SUBTRACT='-'
;

enum MultiplicativeOperator:
	MULTIPLY='*' |
	DIVIDE='/' |
	MODULUS='%'
;

enum UnaryOperator:
	MINUS='-' |
	PLUS='+' |
	LOGICAL_NOT='!' |
	BITWISE_NOT='~'
;

enum BuiltInFunctionEnum:
	exists_other | exists_higher | exists_lower
;

BuiltInFunction returns BuiltInFunctionEnum:
	'exists_other' | 'EXISTS_OTHER' | 'exists_higher' | 'EXISTS_HIGHER' | 'exists_lower' | 'EXISTS_LOWER'
;

Double returns ecore::EDouble:
	'NAN' | INT '.' INT?
;

terminal TIDENTIFIER:
	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;