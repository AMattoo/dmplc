grammar edu.cmu.sei.annex.dmpl.Dmpl with org.eclipse.xtext.common.Terminals

generate dmpl "http://www.cmu.edu/sei/annex/dmpl/Dmpl"

import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program:
	{Program}
	programElements+=ProgramElement*
;

AnnexSubclause returns aadl2::AnnexSubclause:
	DmplSubclause
;

DmplSubclause: {DmplSubclause}
	program=Program
;

ProgramElement:
	//TODO: target, node
	Constant | Procedure
;

Constant:
	('const' | 'CONST') name=TIDENTIFIER '=' value=NumberConst ';'
;

NumberConst:
	IntConst | DoubleConst
;

IntConst:
	sign=Sign? value=INT
;

DoubleConst:
	sign=Sign? value=Double
;

VarInit:
	type=Type varAsgnList=VarAsgnList
;

VarAsgnList:
	//TODO 'input', and multiplicity
	var=Var | varAsgn=VarAsgn
;

VarAsgn:
	//TODO 'input' and '~'
	var=Var '=' (fnBody=FnBody | expr=Expr)
;

Var:
	name=TIDENTIFIER ('[' dimensions+=Dimension ']')*
;

Dimension:
	{IntDimension} index=INT |
	{NodeNumDimension} '#N' |
	{IdDimension} index=TIDENTIFIER
;

Type:
	signed=Signed? simpType=SimpType
;

Procedure:
	//TODO: OVERRIDE and attr_list
	procedure=ProcNoAttr
;

ProcNoAttr:
	//TODO: fn_body
	prototype=FnPrototype (';' | fnBody=FnBody)
;

FnBody:
	//TODO var_init_list and stmt_list
	'{' varInitList=VarInitList '}'
;

FnPrototype:
	{ThreadDeclaration} extern?=('extern' | 'EXTERN')? pure?=('pure' | 'PURE')? 'thread' name=TIDENTIFIER |
	{FnPrototypeDeclaration} extern?=('extern' | 'EXTERN')? pure?=('pure' | 'PURE')? type=Type name=TIDENTIFIER '('
		(params+=Param (',' params+=Param)*)?
	')'
;

Param:
	type=Type var=Var
;

VarInitList:
	{VarInitList}
	(varInits+=VarInit ';')*
;

LVal:
	name=TIDENTIFIER ('[' indices+=Expr ']')* ('@' at=Expr)?
;

Expr:
	//TODO
	ShiftExpr
;

ShiftExpr returns Expr:
	AdditiveExpr (=>({ShiftExpr.left=current} operator=ShiftOperator) right=AdditiveExpr)*
;

AdditiveExpr returns Expr:
	MultiplicativeExpr (=>({AdditiveExpr.left=current} operator=AdditiveOperator) right=MultiplicativeExpr)*
;

MultiplicativeExpr returns Expr:
	TerminalExpr (=>({MultiplicativeExpr.left=current} operator=MultiplicativeOperator) right=TerminalExpr)*
;

TerminalExpr returns Expr:
	LVal |
	{IdExpr} 'id' |
	{IntExpr} value=INT |
	{DoubleExpr} value=Double |
	{NodeNumExpr} '#N' |
	{UnaryExpr} operator=UnaryOperator operand=Expr |
	{BuiltInExpr} function=BuiltInFunction '(' firstArg=TIDENTIFIER ',' secondArg=Expr ')' |
	CallExpr |
	'(' Expr ')'
;

CallExpr:
	(namespace=TIDENTIFIER '::')? name=TIDENTIFIER '(' argList=ArgList ')' ('@' at=Expr)?
;

ArgList:
	{ArgList}
	(args+=Expr (',' args+=Expr)*)?
;

enum SignEnum:
	unset |
	PLUS='+' |
	MINUS='-'
;

Sign returns SignEnum:
	'+' | '-'
;

enum SimpTypeEnum:
	bool | int | double | void | char
;

SimpType returns SimpTypeEnum:
	'bool' | '_Bool' | 'int' | 'double' | 'void' | 'char'
;

enum SignedEnum:
	unset | signed | unsigned
;

Signed returns SignedEnum:
	'signed' | 'unsigned'
;

enum ShiftOperator:
	LEFT='<<' |
	RIGHT='>>'
;

enum AdditiveOperator:
	ADD='+' |
	SUBTRACT='-'
;

enum MultiplicativeOperator:
	MULTIPLY='*' |
	DIVIDE='/' |
	MODULUS='%'
;

enum UnaryOperator:
	MINUS='-' |
	PLUS='+' |
	LOGICAL_NOT='!' |
	BITWISE_NOT='~'
;

enum BuiltInFunctionEnum:
	exists_other | exists_higher | exists_lower
;

BuiltInFunction returns BuiltInFunctionEnum:
	'exists_other' | 'EXISTS_OTHER' | 'exists_higher' | 'EXISTS_HIGHER' | 'exists_lower' | 'EXISTS_LOWER'
;

Double returns ecore::EDouble:
	'NAN' | INT '.' INT?
;

terminal TIDENTIFIER:
	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;