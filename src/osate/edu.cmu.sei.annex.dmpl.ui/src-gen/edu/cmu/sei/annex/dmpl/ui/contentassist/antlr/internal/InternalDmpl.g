/*
 * generated by Xtext
 */
grammar InternalDmpl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.cmu.sei.annex.dmpl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.cmu.sei.annex.dmpl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.cmu.sei.annex.dmpl.services.DmplGrammarAccess;

}

@parser::members {
 
 	private DmplGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DmplGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleDmplSubclause
entryRuleDmplSubclause 
:
{ before(grammarAccess.getDmplSubclauseRule()); }
	 ruleDmplSubclause
{ after(grammarAccess.getDmplSubclauseRule()); } 
	 EOF 
;

// Rule DmplSubclause
ruleDmplSubclause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDmplSubclauseAccess().getGroup()); }
(rule__DmplSubclause__Group__0)
{ after(grammarAccess.getDmplSubclauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgramElement
entryRuleProgramElement 
:
{ before(grammarAccess.getProgramElementRule()); }
	 ruleProgramElement
{ after(grammarAccess.getProgramElementRule()); } 
	 EOF 
;

// Rule ProgramElement
ruleProgramElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramElementAccess().getAlternatives()); }
(rule__ProgramElement__Alternatives)
{ after(grammarAccess.getProgramElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberConst
entryRuleNumberConst 
:
{ before(grammarAccess.getNumberConstRule()); }
	 ruleNumberConst
{ after(grammarAccess.getNumberConstRule()); } 
	 EOF 
;

// Rule NumberConst
ruleNumberConst
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberConstAccess().getAlternatives()); }
(rule__NumberConst__Alternatives)
{ after(grammarAccess.getNumberConstAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntConst
entryRuleIntConst 
:
{ before(grammarAccess.getIntConstRule()); }
	 ruleIntConst
{ after(grammarAccess.getIntConstRule()); } 
	 EOF 
;

// Rule IntConst
ruleIntConst
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntConstAccess().getGroup()); }
(rule__IntConst__Group__0)
{ after(grammarAccess.getIntConstAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleConst
entryRuleDoubleConst 
:
{ before(grammarAccess.getDoubleConstRule()); }
	 ruleDoubleConst
{ after(grammarAccess.getDoubleConstRule()); } 
	 EOF 
;

// Rule DoubleConst
ruleDoubleConst
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleConstAccess().getGroup()); }
(rule__DoubleConst__Group__0)
{ after(grammarAccess.getDoubleConstAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFnType
entryRuleFnType 
:
{ before(grammarAccess.getFnTypeRule()); }
	 ruleFnType
{ after(grammarAccess.getFnTypeRule()); } 
	 EOF 
;

// Rule FnType
ruleFnType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFnTypeAccess().getTypeAssignment()); }
(rule__FnType__TypeAssignment)
{ after(grammarAccess.getFnTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedure
entryRuleProcedure 
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureAccess().getProcedureAssignment()); }
(rule__Procedure__ProcedureAssignment)
{ after(grammarAccess.getProcedureAccess().getProcedureAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcNoAttr
entryRuleProcNoAttr 
:
{ before(grammarAccess.getProcNoAttrRule()); }
	 ruleProcNoAttr
{ after(grammarAccess.getProcNoAttrRule()); } 
	 EOF 
;

// Rule ProcNoAttr
ruleProcNoAttr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcNoAttrAccess().getGroup()); }
(rule__ProcNoAttr__Group__0)
{ after(grammarAccess.getProcNoAttrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFnPrototype
entryRuleFnPrototype 
:
{ before(grammarAccess.getFnPrototypeRule()); }
	 ruleFnPrototype
{ after(grammarAccess.getFnPrototypeRule()); } 
	 EOF 
;

// Rule FnPrototype
ruleFnPrototype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFnPrototypeAccess().getGroup()); }
(rule__FnPrototype__Group__0)
{ after(grammarAccess.getFnPrototypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFnPrototypeNoDecors
entryRuleFnPrototypeNoDecors 
:
{ before(grammarAccess.getFnPrototypeNoDecorsRule()); }
	 ruleFnPrototypeNoDecors
{ after(grammarAccess.getFnPrototypeNoDecorsRule()); } 
	 EOF 
;

// Rule FnPrototypeNoDecors
ruleFnPrototypeNoDecors
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getAlternatives()); }
(rule__FnPrototypeNoDecors__Alternatives)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSign
entryRuleSign 
:
{ before(grammarAccess.getSignRule()); }
	 ruleSign
{ after(grammarAccess.getSignRule()); } 
	 EOF 
;

// Rule Sign
ruleSign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignAccess().getAlternatives()); }
(rule__Sign__Alternatives)
{ after(grammarAccess.getSignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpType
entryRuleSimpType 
:
{ before(grammarAccess.getSimpTypeRule()); }
	 ruleSimpType
{ after(grammarAccess.getSimpTypeRule()); } 
	 EOF 
;

// Rule SimpType
ruleSimpType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpTypeAccess().getAlternatives()); }
(rule__SimpType__Alternatives)
{ after(grammarAccess.getSimpTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSigned
entryRuleSigned 
:
{ before(grammarAccess.getSignedRule()); }
	 ruleSigned
{ after(grammarAccess.getSignedRule()); } 
	 EOF 
;

// Rule Signed
ruleSigned
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedAccess().getAlternatives()); }
(rule__Signed__Alternatives)
{ after(grammarAccess.getSignedAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDouble
entryRuleDouble 
:
{ before(grammarAccess.getDoubleRule()); }
	 ruleDouble
{ after(grammarAccess.getDoubleRule()); } 
	 EOF 
;

// Rule Double
ruleDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleAccess().getAlternatives()); }
(rule__Double__Alternatives)
{ after(grammarAccess.getDoubleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProgramElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramElementAccess().getConstantParserRuleCall_0()); }
	ruleConstant
{ after(grammarAccess.getProgramElementAccess().getConstantParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProgramElementAccess().getProcedureParserRuleCall_1()); }
	ruleProcedure
{ after(grammarAccess.getProgramElementAccess().getProcedureParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getConstKeyword_0_0()); }

	'const' 

{ after(grammarAccess.getConstantAccess().getConstKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getCONSTKeyword_0_1()); }

	'CONST' 

{ after(grammarAccess.getConstantAccess().getCONSTKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstAccess().getIntConstParserRuleCall_0()); }
	ruleIntConst
{ after(grammarAccess.getNumberConstAccess().getIntConstParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberConstAccess().getDoubleConstParserRuleCall_1()); }
	ruleDoubleConst
{ after(grammarAccess.getNumberConstAccess().getDoubleConstParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__ExternAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getExternExternKeyword_0_0_0()); }

	'extern' 

{ after(grammarAccess.getFnPrototypeAccess().getExternExternKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getFnPrototypeAccess().getExternEXTERNKeyword_0_0_1()); }

	'EXTERN' 

{ after(grammarAccess.getFnPrototypeAccess().getExternEXTERNKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__PureAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getPurePureKeyword_1_0_0()); }

	'pure' 

{ after(grammarAccess.getFnPrototypeAccess().getPurePureKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getFnPrototypeAccess().getPurePUREKeyword_1_0_1()); }

	'PURE' 

{ after(grammarAccess.getFnPrototypeAccess().getPurePUREKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getGroup_0()); }
(rule__FnPrototypeNoDecors__Group_0__0)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getGroup_1()); }
(rule__FnPrototypeNoDecors__Group_1__0)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpTypeAccess().getBoolKeyword_0()); }

	'bool' 

{ after(grammarAccess.getSimpTypeAccess().getBoolKeyword_0()); }
)

    |(
{ before(grammarAccess.getSimpTypeAccess().get_BoolKeyword_1()); }

	'_Bool' 

{ after(grammarAccess.getSimpTypeAccess().get_BoolKeyword_1()); }
)

    |(
{ before(grammarAccess.getSimpTypeAccess().getIntKeyword_2()); }

	'int' 

{ after(grammarAccess.getSimpTypeAccess().getIntKeyword_2()); }
)

    |(
{ before(grammarAccess.getSimpTypeAccess().getDoubleKeyword_3()); }

	'double' 

{ after(grammarAccess.getSimpTypeAccess().getDoubleKeyword_3()); }
)

    |(
{ before(grammarAccess.getSimpTypeAccess().getVoidKeyword_4()); }

	'void' 

{ after(grammarAccess.getSimpTypeAccess().getVoidKeyword_4()); }
)

    |(
{ before(grammarAccess.getSimpTypeAccess().getCharKeyword_5()); }

	'char' 

{ after(grammarAccess.getSimpTypeAccess().getCharKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signed__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedAccess().getSignedKeyword_0()); }

	'signed' 

{ after(grammarAccess.getSignedAccess().getSignedKeyword_0()); }
)

    |(
{ before(grammarAccess.getSignedAccess().getUnsignedKeyword_1()); }

	'unsigned' 

{ after(grammarAccess.getSignedAccess().getUnsignedKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getNANKeyword_0()); }

	'NAN' 

{ after(grammarAccess.getDoubleAccess().getNANKeyword_0()); }
)

    |(
{ before(grammarAccess.getDoubleAccess().getGroup_1()); }
(rule__Double__Group_1__0)
{ after(grammarAccess.getDoubleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
(

)
{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramElementsAssignment_1()); }
(rule__Program__ProgramElementsAssignment_1)*
{ after(grammarAccess.getProgramAccess().getProgramElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DmplSubclause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DmplSubclause__Group__0__Impl
	rule__DmplSubclause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DmplSubclause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDmplSubclauseAccess().getDmplSubclauseAction_0()); }
(

)
{ after(grammarAccess.getDmplSubclauseAccess().getDmplSubclauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DmplSubclause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DmplSubclause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DmplSubclause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDmplSubclauseAccess().getProgramAssignment_1()); }
(rule__DmplSubclause__ProgramAssignment_1)
{ after(grammarAccess.getDmplSubclauseAccess().getProgramAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getAlternatives_0()); }
(rule__Constant__Alternatives_0)
{ after(grammarAccess.getConstantAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameAssignment_1()); }
(rule__Constant__NameAssignment_1)
{ after(grammarAccess.getConstantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__3__Impl
	rule__Constant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueAssignment_3()); }
(rule__Constant__ValueAssignment_3)
{ after(grammarAccess.getConstantAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getConstantAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IntConst__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntConst__Group__0__Impl
	rule__IntConst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstAccess().getSignAssignment_0()); }
(rule__IntConst__SignAssignment_0)?
{ after(grammarAccess.getIntConstAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntConst__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntConst__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstAccess().getValueAssignment_1()); }
(rule__IntConst__ValueAssignment_1)
{ after(grammarAccess.getIntConstAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DoubleConst__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleConst__Group__0__Impl
	rule__DoubleConst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleConst__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleConstAccess().getSignAssignment_0()); }
(rule__DoubleConst__SignAssignment_0)?
{ after(grammarAccess.getDoubleConstAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleConst__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleConst__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleConst__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleConstAccess().getValueAssignment_1()); }
(rule__DoubleConst__ValueAssignment_1)
{ after(grammarAccess.getDoubleConstAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSignedAssignment_0()); }
(rule__Type__SignedAssignment_0)?
{ after(grammarAccess.getTypeAccess().getSignedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSimpTypeAssignment_1()); }
(rule__Type__SimpTypeAssignment_1)
{ after(grammarAccess.getTypeAccess().getSimpTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcNoAttr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcNoAttr__Group__0__Impl
	rule__ProcNoAttr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcNoAttr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcNoAttrAccess().getPrototypeAssignment_0()); }
(rule__ProcNoAttr__PrototypeAssignment_0)
{ after(grammarAccess.getProcNoAttrAccess().getPrototypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcNoAttr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcNoAttr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcNoAttr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcNoAttrAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getProcNoAttrAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FnPrototype__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototype__Group__0__Impl
	rule__FnPrototype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getExternAssignment_0()); }
(rule__FnPrototype__ExternAssignment_0)?
{ after(grammarAccess.getFnPrototypeAccess().getExternAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototype__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototype__Group__1__Impl
	rule__FnPrototype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getPureAssignment_1()); }
(rule__FnPrototype__PureAssignment_1)?
{ after(grammarAccess.getFnPrototypeAccess().getPureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototype__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototype__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getPrototypeAssignment_2()); }
(rule__FnPrototype__PrototypeAssignment_2)
{ after(grammarAccess.getFnPrototypeAccess().getPrototypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FnPrototypeNoDecors__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_0__0__Impl
	rule__FnPrototypeNoDecors__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getThreadDeclarationAction_0_0()); }
(

)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getThreadDeclarationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototypeNoDecors__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_0__1__Impl
	rule__FnPrototypeNoDecors__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getThreadKeyword_0_1()); }

	'thread' 

{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getThreadKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototypeNoDecors__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getNameAssignment_0_2()); }
(rule__FnPrototypeNoDecors__NameAssignment_0_2)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getNameAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FnPrototypeNoDecors__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_1__0__Impl
	rule__FnPrototypeNoDecors__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getFnPrototypeDeclarationAction_1_0()); }
(

)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getFnPrototypeDeclarationAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototypeNoDecors__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_1__1__Impl
	rule__FnPrototypeNoDecors__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getTypeAssignment_1_1()); }
(rule__FnPrototypeNoDecors__TypeAssignment_1_1)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototypeNoDecors__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_1__2__Impl
	rule__FnPrototypeNoDecors__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getNameAssignment_1_2()); }
(rule__FnPrototypeNoDecors__NameAssignment_1_2)
{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototypeNoDecors__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_1__3__Impl
	rule__FnPrototypeNoDecors__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getLeftParenthesisKeyword_1_3()); }

	'(' 

{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getLeftParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FnPrototypeNoDecors__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FnPrototypeNoDecors__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Double__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1__0__Impl
	rule__Double__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_0()); }
	RULE_INT
{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1__1__Impl
	rule__Double__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getDoubleAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2()); }
(	RULE_INT)?
{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Program__ProgramElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramElementsProgramElementParserRuleCall_1_0()); }
	ruleProgramElement{ after(grammarAccess.getProgramAccess().getProgramElementsProgramElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DmplSubclause__ProgramAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDmplSubclauseAccess().getProgramProgramParserRuleCall_1_0()); }
	ruleProgram{ after(grammarAccess.getDmplSubclauseAccess().getProgramProgramParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); }
	RULE_TIDENTIFIER{ after(grammarAccess.getConstantAccess().getNameTIDENTIFIERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueNumberConstParserRuleCall_3_0()); }
	ruleNumberConst{ after(grammarAccess.getConstantAccess().getValueNumberConstParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstAccess().getSignSignParserRuleCall_0_0()); }
	ruleSign{ after(grammarAccess.getIntConstAccess().getSignSignParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getIntConstAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleConst__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleConstAccess().getSignSignParserRuleCall_0_0()); }
	ruleSign{ after(grammarAccess.getDoubleConstAccess().getSignSignParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleConst__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleConstAccess().getValueDoubleParserRuleCall_1_0()); }
	ruleDouble{ after(grammarAccess.getDoubleConstAccess().getValueDoubleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SignedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSignedSignedParserRuleCall_0_0()); }
	ruleSigned{ after(grammarAccess.getTypeAccess().getSignedSignedParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SimpTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSimpTypeSimpTypeParserRuleCall_1_0()); }
	ruleSimpType{ after(grammarAccess.getTypeAccess().getSimpTypeSimpTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnTypeAccess().getTypeTypeParserRuleCall_0()); }
	ruleType{ after(grammarAccess.getFnTypeAccess().getTypeTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ProcedureAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getProcedureProcNoAttrParserRuleCall_0()); }
	ruleProcNoAttr{ after(grammarAccess.getProcedureAccess().getProcedureProcNoAttrParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcNoAttr__PrototypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcNoAttrAccess().getPrototypeFnPrototypeParserRuleCall_0_0()); }
	ruleFnPrototype{ after(grammarAccess.getProcNoAttrAccess().getPrototypeFnPrototypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__ExternAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getExternAlternatives_0_0()); }
(rule__FnPrototype__ExternAlternatives_0_0)
{ after(grammarAccess.getFnPrototypeAccess().getExternAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__PureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getPureAlternatives_1_0()); }
(rule__FnPrototype__PureAlternatives_1_0)
{ after(grammarAccess.getFnPrototypeAccess().getPureAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototype__PrototypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeAccess().getPrototypeFnPrototypeNoDecorsParserRuleCall_2_0()); }
	ruleFnPrototypeNoDecors{ after(grammarAccess.getFnPrototypeAccess().getPrototypeFnPrototypeNoDecorsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__NameAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getNameTIDENTIFIERTerminalRuleCall_0_2_0()); }
	RULE_TIDENTIFIER{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getNameTIDENTIFIERTerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getTypeFnTypeParserRuleCall_1_1_0()); }
	ruleFnType{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getTypeFnTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FnPrototypeNoDecors__NameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFnPrototypeNoDecorsAccess().getNameTIDENTIFIERTerminalRuleCall_1_2_0()); }
	RULE_TIDENTIFIER{ after(grammarAccess.getFnPrototypeNoDecorsAccess().getNameTIDENTIFIERTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_TIDENTIFIER : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


