package DART_Example
public

with DART; -- include the DART property set
with Zero_Slack_Scheduling; -- include ZSS property set

-- a DART thread
thread dart_thread
	properties
  		-- all DART threads are periodic
  		Dispatch_Protocol => constant Periodic;
end dart_thread;

-- a low criticality process
process low_criticality_process
end low_criticality_process;

-- a low criticality process implementation
process implementation low_criticality_process.i
	subcomponents
		t: thread dart_thread;
end low_criticality_process.i;

-- a high criticality process
process high_criticality_process
end high_criticality_process;

-- a high criticality process implementation
process implementation high_criticality_process.i
	subcomponents
		t: thread dart_thread;
end high_criticality_process.i;

-- a high criticality partition. contains all high criticality processes.
virtual processor high_criticality_partition
end high_criticality_partition;

-- a low criticality partition. contains all low criticality processes.
virtual processor low_criticality_partition
end low_criticality_partition;

-- a DART processor. there will be one processor per node.
processor DART_processor
	properties
		-- all DART processors are scheduled via ZSRM
		Zero_Slack_Scheduling::Scheduling_Protocol => (ZSRM);
end DART_processor;

-- a DART node
system DART_node
end DART_Node;

-- a DART node implementation
system implementation DART_node.i
	subcomponents
		dart_processor: processor DART_processor;
		hc_partition: virtual processor high_criticality_partition;
		lc_partition: virtual processor low_criticality_partition;
		hc_process: process high_criticality_process.i;
		lc_process: process low_criticality_process.i;
	properties
		Actual_Processor_Binding => (reference (hc_partition)) applies to hc_process;
		Actual_Processor_Binding => (reference (lc_partition)) applies to lc_process;
		Actual_Processor_Binding => (reference (dart_processor)) applies to hc_partition;
		Actual_Processor_Binding => (reference (dart_processor)) applies to lc_partition;
end DART_node.i;

-- a DART system
system DART_system
end DART_system;

-- a DART system implementation with two nodes
system implementation DART_system.i
	subcomponents
		-- the first node
		node1: system DART_node.i {
			-- set the node id 
			DART::Node_Id => 1;
			-- set the criticality levels
			Zero_Slack_Scheduling::Criticality => 1 applies to hc_partition;
			Zero_Slack_Scheduling::Criticality => 2 applies to lc_partition;
			-- timing parameters
			Period => 4 ms applies to lc_process.t;
			Compute_Execution_Time => 2 ms .. 2 ms applies to lc_process.t;
			Zero_Slack_Scheduling::Zero_Slack_Instant => 4 ms applies to lc_process.t;
			-- 
			Period => 8 ms applies to hc_process.t;
			Compute_Execution_Time => 2 ms .. 5 ms applies to hc_process.t;
			Zero_Slack_Scheduling::Zero_Slack_Instant => 5 ms applies to hc_process.t;
		};
		-- the second node
		node2: system DART_node.i {
			-- set the node id 
			DART::Node_Id => 2;
			-- set the criticality levels
			Zero_Slack_Scheduling::Criticality => 1 applies to hc_partition;
			Zero_Slack_Scheduling::Criticality => 2 applies to lc_partition;
			-- timing parameters
			Period => 14 ms applies to lc_process.t;
			Compute_Execution_Time => 12 ms .. 12 ms applies to lc_process.t;
			Zero_Slack_Scheduling::Zero_Slack_Instant => 14 ms applies to lc_process.t;
			-- 
			Period => 18 ms applies to hc_process.t;
			Compute_Execution_Time => 12 ms .. 15 ms applies to hc_process.t;
			Zero_Slack_Scheduling::Zero_Slack_Instant => 15 ms applies to hc_process.t;
		};
	properties
		-- all source code appears here
  		Source_Text => ("../sources/DART_example.dasl");
end DART_system.i;

end DART_Example;
