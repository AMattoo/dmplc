MOC_SYNC;

//number of X and Y coordinates
CONST X = 4;
CONST Y = 4;

//states of each node
CONST NEXT = 0;
CONST REQUEST = 1;
CONST WAITING = 2;
CONST MOVE = 3;

NODE uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  GLOBAL _Bool lock [X][Y][#N];

  //private variables -- local to the node.
  //preserved across rounds
  LOCAL unsigned char state; //the state
  LOCAL unsigned char x,y; //current coordinates
  LOCAL unsigned char xp,yp; //next coordinates
  LOCAL unsigned char xf,yf; //final coordinates
  
  void NEXT_XY () {
    ATOMIC {
      xp.id = x.id; yp.id = y.id;
      if(x.id < xf.id) xp.id = x.id + 1;
      else if(x.id > xf.id) xp.id = x.id - 1;
      else if(y.id < yf.id) yp.id = y.id + 1;
      else yp.id = y.id - 1;
    }
  }

  //move to the next location -- this is a built-in function
  //implemented non-deterministically for verification
  // MOVE_TO {
  //   if (nondet_int()) return 0;
  //   else return 1;
  //   // if(target != (xp,yp)) {
  //   //   target = (xp,yp);
  //   //   return 1;
  //   // } else {
  //   //   return (position != target);
  //   // }
  // }

  void ROUND () {
    if(state.id == NEXT) {
      //compute next point on route
      if(x.id == xf.id && y.id == yf.id) return;
      NEXT_XY();
      state.id = REQUEST;
    } else if(state.id == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_OTHER(idp,lock[xp.id][yp.id][idp] != 0)) return;
      lock[xp.id][yp.id][id] = 1;
      state.id = WAITING;
    } else if(state.id == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp.id][yp.id][idp] != 0)) return;
      state.id = MOVE;
    } else if(state.id == MOVE) {
      //now we have the lock on (x’,y’)
      if(MOVE_TO()) return;
      lock[x.id][y.id][id] = 0; 
      x.id = xp.id; y.id = yp.id;
      state.id = NEXT;
    }
  }
}

//program has two nodes with ids 0 and 1
PROGRAM = uav (0) || uav (1);

//initial state
void INIT () 
{
  ATOMIC {
    FORALL_NODE(id) {
      state.id = NEXT;
      ND(x.id); ND(y.id);
      ASSUME(0 <= x.id && x.id < X && 0 <= y.id && y.id < Y);
      lock[x.id][y.id][id] = 1;
      ND(xf.id); ND(yf.id);
      ASSUME(0 <= xf.id && xf.id < X && 0 <= yf.id && yf.id < Y);
    }
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x.id1 != x.id2 || y.id1 != y.id2);
  }
}

//the safety property checked at the beginning of each round
void SAFETY ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x.id1 != x.id2 || y.id1 != y.id2);
  }
}
