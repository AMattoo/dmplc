MOC_SYNC;

//number of X and Y coordinates
CONST(X,4);
CONST(Y,4);

//states of each node
CONST(NEXT,0);
CONST(REQUEST,1);
CONST(WAITING,2);
CONST(MOVE,3);

NODE uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  PUBLIC(bool lock [X][Y][#N]);

  //private variables -- local to the node.
  //preserved across rounds
  PRIVATE(int state); //the state
  PRIVATE(int x,y); //current coordinates
  PRIVATE(int xp,yp); //next coordinates
  PRIVATE(int xf,yf); //final coordinates
  
  void NEXT_XY () {
    ATOMIC {
      xp = x; yp = y;
      if(x < xf) xp = x + 1;
      else if(x > xf) xp = x - 1;
      else if(y < yf) yp = y + 1;
      else yp = y - 1;
    }
  }

  //move to the next location -- this is a built-in function
  //implemented non-deterministically for verification
  // MOVE_TO {
  //   if (nondet_int()) return 0;
  //   else return 1;
  //   // if(target != (xp,yp)) {
  //   //   target = (xp,yp);
  //   //   return 1;
  //   // } else {
  //   //   return (position != target);
  //   // }
  // }

  void ROUND () {
    if(state == NEXT) {
      //compute next point on route
      if(x == xf && y == yf) return;
      NEXT_XY();
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_OTHER(idp,lock.idp[xp * Y + yp] != 0)) return;
      W(lock[xp * Y + yp],1);
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock.idp[xp * Y + yp] != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(MOVE_TO()) return;
      W(lock[x * Y + y],0); 
      x = xp; y = yp;
      state = NEXT;
    }
  }
}

//program has two nodes with ids 0 and 1
PROGRAM = uav (0) || uav (1);

//initial state
INIT 
{
  ATOMIC {
    FORALL_NODE(id) {
      state.id = NEXT;
      ND(x.id); ND(y.id);
      ASSUME(0 <= x.id && x.id < X && 0 <= y.id && y.id < Y);
      SET(lock.id[x.id * Y + y.id], 1);
      ND(xf.id); ND(yf.id);
      ASSUME(0 <= xf.id && xf.id < X && 0 <= yf.id && yf.id < Y);
    }
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x.id1 != x.id2 || y.id1 != y.id2);
  }
}

//the safety property checked at the beginning of each round
SAFETY
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x.id1 != x.id2 || y.id1 != y.id2);
  }
}
