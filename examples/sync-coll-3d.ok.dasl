/* a correct synchronous collision avoidance protocol -- this one uses
   3 dimensions and changes height to avoid collision */

MOC_SYNC;

//number of X and Y coordinates
CONST X = 4;
CONST Y = 4;

//states of each node
CONST NEXT = 0;
CONST REQUEST = 1;
CONST WAITING = 2;
CONST MOVE = 3;

EXTERN int MOVE_TO_XY(unsigned char x,unsigned char y);
EXTERN int MOVE_TO_Z(unsigned char z);

NODE uav (id)
{
  //private variables -- local to the node.
  //preserved across rounds
  LOCAL unsigned char state; //the state
  LOCAL unsigned char x,y,z; //current coordinates
  LOCAL unsigned char xp,yp,zp; //next coordinates
  LOCAL unsigned char xf,yf; //final coordinates
  
  //compute the next (x,y)-coordinates
  void NEXT_XY () {
    ATOMIC {
      xp = x; yp = y;
      if(x < xf) xp = x + 1;
      else if(x > xf) xp = x - 1;
      else if(y < yf) yp = y + 1;
      else yp = y - 1;
    }
  }

  void ROUND () {
    if(state == NEXT) {
      //compute next point on route
      if(x == xf && y == yf) return;
      NEXT_XY();
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(MOVE_TO_XY(xp,yp)) return;
      x = xp; y = yp;
      state = NEXT;
    }
  }
}

//program has two nodes with ids 0 and 1
//PROGRAM = uav (0) || uav (1);

//program has four nodes with ids 0, 1, 2, and 3
PROGRAM = uav (0) || uav (1) || uav (2) || uav (3);

//initial state
void INIT () 
{
  ATOMIC {
    FORALL_NODE(id) {
      state.id = NEXT;
      ND(x.id); ND(y.id);
      ASSUME(0 <= x.id && x.id < X && 0 <= y.id && y.id < Y);
      ND(xf.id); ND(yf.id);
      ASSUME(0 <= xf.id && xf.id < X && 0 <= yf.id && yf.id < Y);
      z.id = id;
    }
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x.id1 != x.id2 || y.id1 != y.id2);
  }
}

//the safety property checked at the beginning of each round
void SAFETY ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x.id1 != x.id2 || y.id1 != y.id2 || z.id1 != z.id2);
  }
}
